adventures:
    default:
        name: "Introdução"
        description: "Explicação do nível"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    ## Bem-vindo(a) à Hedy!
                    No Nível 1 você pode usar os comandos `{print}`, `{ask}` e `{echo}`.
                    Digite seu código no campo de programação. Ou pressione o botão verde no bloco de código de exemplo, e o código será digitado para você!
                    Experimente o código você mesmo com o botão verde 'Executar código' abaixo do campo de programação.

                    Você pode imprimir texto na tela usando o comando `{print}`.
                start_code: "{print} olá mundo!"
                example_code: "```\n{print} Olá!\n{print} Bem-vindo(a) à Hedy!\n```\n"
                story_text_2: "Você também pode pedir por uma entrada com `{ask}` e repeti-la de volta com um comando `{echo}`.\n"
                example_code_2: "```\n{ask} Qual o seu nome?\n{echo} olá\n```\n"
                story_text_3: "Vamos começar! Não sabe o que criar? Nas próximas abas, você encontrará ideias de programas para construir.\n"
            2:
                story_text: |
                    ## Variáveis
                    No nível 2 aprendemos dois novos comandos: `{is}` e `{sleep}`.
                    Você pode nomear uma palavra com `{is}`. Isso é chamado de variável. Neste exemplo, criamos uma variável chamada nome e uma variável chamada idade. Você pode usar a palavra nome em qualquer lugar do seu código e ela será substituída pela Hedy, assim:

                    Desta forma você não precisa mais do comando `{echo}`!
                start_code: "{print} olá mundo!"
                example_code: "```\nnome {is} Hedy\nidade {is} 15\n{print} nome tem idade anos\n```\n"
                story_text_2: "`{print}` ainda funciona da mesma forma, mas o comando `{ask}` mudou. Você precisa usar uma variável no comando `{ask}` também. Se parece com isso:\n"
                example_code_2: |
                    ```
                    resposta {is} {ask} Qual o seu nome?
                    {print} Olá resposta
                    ```
                story_text_3: "Outro novo comando neste nível é `{sleep}`, que pausa seu programa por um segundo. Se você digitar um número depois do comando {sleep}, o programa pausará por esta quantidade de segundos.\n"
                example_code_3: "```\n{print} Minha cor favorita é...\n{sleep} 2\n{print} verde!\n```\n"
            3:
                story_text: |
                    ## Faça uma lista!
                    No nível 3 você pode fazer uma lista. Você pode deixar o computador escolher algo aleatório da lista. Você faz isso com `{at} {random}`.
                start_code: "{print} olá mundo!"
                example_code: |
                    ```
                    animais {is} cachorro, gato, canguru
                    {print} animais {at} {random}
                    ```
                story_text_2: Você também pode adicionar itens à lista com `{add}` e remover itens com `{remove}`.
                example_code_2: "```\nanimais {is} cachorro, gato, canguru\n{add} pinguim {to_list} animais\n{remove} gato {from} animais\n{print} animais {at} {random}\n```\n"
            4:
                start_code: "{print} 'Olá mundo'"
                story_text: |
                    ## 'Aspas simples'
                    No nível 4, `{ask}` e `{print}` foram alterados.

                    Você deve colocar o texto que deseja imprimir entre aspas simples.

                    Isso é útil, porque agora você pode imprimir todas as palavras que quiser. E também as palavras que você usou para armazenar algo com `{is}`.

                    A maioria das linguagens de programação também usa aspas simples ao imprimir, então também estamos nos aproximando da programação real!
                example_code: "```\n{print} 'Você precisa usar aspas de agora em diante!'\nresposta {is} {ask} 'O que precisamos usar de agora em diante?'\n{print} 'Precisamos usar ' resposta\n```\n"
                story_text_2: "## As aventuras estão ficando cada vez mais difíceis\nAs aventuras estão ficando cada vez mais difíceis na sequência de abas.\nPortanto, é melhor começar pela esquerda e seguir para a direita, para ser desafiado cada vez mais.\n"
            5:
                start_code: |-
                    nome {is} {ask} 'qual o seu nome?'
                    {if} nome {is} Hedy {print} 'legal!' {else} {print} 'não tão legal'
                story_text: |
                    ## Se... senão....
                    No nível 5 há algo novo, o `{if}`! Com o `{if}` você pode escolher entre duas opções diferentes.
                    Este código é imprime legal se você inserir Hedy como um nome e não tão legal se você digitar outra coisa.
                    `{ask}` e `{print}` ainda funcionam como no nível 4.
                example_code: |
                    ```
                    nome {is} {ask} 'qual o seu nome?'
                    {if} nome {is} Hedy {print} 'legal' {else} {print} 'não tão legal'
                    ```
                story_text_3: "## Listas\nQuando queremos verificar se algo está em uma lista, agora podemos usar o comando `{in}`.\nEste código imprime bonito! se você escolher verde ou amarelo, e não gostei caso contrário.\n"
                example_code_3: |
                    ```
                    cores_bonitas {is} verde, amarelo
                    cor_favorita {is} {ask} 'Qual sua cor favorita?'
                    {if} cor_favorita {in} cores_bonitas {print} 'bonita!'
                    {else} {print} 'não gostei'
                    ```
                story_text_2: "Às vezes, o código com um `{if}` fica muito longo e não se encaixa bem na linha. <br> Você também pode dividir o código em duas linhas, começando a segunda linha com `{else}` assim:\n"
                example_code_2: "```\nnome {is} {ask} 'qual o seu nome?'\n{if} nome {is} Hedy {print} 'legal'\n{else} {print} 'não tão legal!'\n```\n"
            6:
                start_code: "{print} '5 vezes 5 é ' 5 * 5"
                story_text: |
                    ## 1 + 1
                      Neste nível você aprende algo novo: agora você também pode calcular.

                      A adição é fácil, você escreve como na matemática: `5 + 5` por exemplo. A subtração também funciona bem, é `5 - 5`.

                      A multiplicação é um pouco diferente, porque não há exatamente este símbolo no seu teclado. Basta pesquisar, realmente não há!
                      É por isso que multiplicamos com o asterisco da parte de cima da tecla 8: `5 * 5`. Leia isso como "5 vezes 5" que vai ajudar você a se lembrar melhor.

                example_code: |
                    ```
                    {print} '5 mais 5 é ' 5 + 5
                    {print} '5 menos 5 é ' 5 - 5
                    {print} '5 vezes 5 é ' 5 * 5
                    ```
                story_text_2: "Também fazemos uma mudança no armazenamento de uma palavra em uma variável! Agora você pode usar `=` em vez de `{is}` quando armazenamos um nome ou um número em uma variável, assim:\n"
                example_code_2: "```\nnome = Hedy\nresposta = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy é divertida!'"
                story_text: |
                    ## Nível 7! Nível 7!
                    O nível 7 adiciona o comando `{repeat}`. `{repeat}` pode ser usado para executar uma linha de código várias vezes.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy é divertida!'
                    ```
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Olá pessoal'
                        {print} 'Isso vai ser impresso 5 vezes'
                story_text: |
                    ## Indentação
                    Os comandos `{ask}` e `{print}` ainda funcionam da mesma forma. Mas `{if}`, `{else}` e `{repeat}` mudaram!
                    Você agora pode executar grupos de códigos juntos, mas você terá que *indentar* o código.
                    Isso significa colocar quatro espaços no começo da linha. O mesmo vale para quando você queira criar um bloco só com um linha.
                example_code: |
                    Veja como o comando `{repeat}` funciona agora:
                    ```
                    {repeat} 5 {times}
                        {print} 'Olá pessoal'
                        {print} 'Isso vai ser impresso 5 vezes'
                    ```
                    Veja como os comandos `{if}` e `{else}` funcionam agora:

                    ```
                    nome {is} {ask} 'Qual o seu nome?'
                    {if} nome {is} Hedy
                        {print} 'Bem-vinda Hedy'
                        {print} 'Você pode jogar no seu computador!'
                    {else}
                        {print} 'INVASOR!'
                        {print} 'Você não pode usar esse computador'
                    ```
            9:
                start_code: |-
                    {repeat} 3 {times}
                        comida = {ask} 'O que você deseja?'
                        {if} comida {is} 'pizza'
                            {print} 'excelente!'
                        {else}
                            {print} 'pizza é melhor'
                story_text: |
                    ## Todos juntos agora!
                    Neste nível você pode não só usar múltiplas linhas com `{if}` e `{repeat}`, mas também juntar os dois!
                    Neste exemplo você encontra um comando `{if}` dentro de um comando `{repeat}`. Também é possível fazer o contrário, e um `{if}`
                    também pode aparecer dentro de outro `{if}` e um `{repeat}` dentro de outro `{repeat}`.
                    Experimente!
                example_code: "```\n{repeat} 3 {times}\n    comida = {ask} 'O que você deseja?'\n    {if} comida {is} 'pizza'\n        {print} 'excelente!'\n    {else}\n        {print} 'pizza é melhor'\n```\n"
            10:
                start_code: |-
                    animais {is} cachorro, gato, peixe
                    {for} animal {in} animais
                      {print} 'Eu adoro ' animal
                story_text: |-
                    ## Para cada item na minha lista...
                    Neste nível vamos aprender um novo comando chamado `{for}`. Com `{for}` você pode fazer uma lista e usar todos os elementos.
                    `{for}` cria um bloco, assim como `{repeat}` e `{if}`, de modo que todas as linhas dentro do bloco precisam começar com espaços.
                example_code: "```\nanimais {is} cachorro, gato, peixe\n{for} animal {in} animais\n  {print} 'Eu adoro ' animal\n```\n"
            11:
                start_code: |-
                    {for} contador {in} {range} 1 {to} 5
                        {print} contador
                story_text: "## Laços!\n`{print}` continua funcionando da mesma forma, mas adicionamos uma nova forma de `{for}`. Agora você pode escrever `{for} contador {in} {range} 1 {to} 5` e usar `contador` em seu programa.\nExperimente para ver o que acontece! Lembre-se de usar indentações após as instruções `{for}` e `{if}` (isso significa iniciar uma frase com quatro espaços)"
                example_code: "```\n{for} contador {in} {range} 1 {to} 5\n    {print} contador\n```\n"
            12:
                start_code: |-
                    {print} 'números decimais agora precisam de um ponto'
                    {print} 2.5 + 2.5
                story_text: |-
                    ## Números e textos
                    **Números decimais**
                    Até agora, a Hedy não permitia números decimais como 1,5, mas agora permitimos isso. Observe que os computadores usam o `.` para números decimais.
                example_code_5: "```\npontuação = 25\n{print} 'Você conseguiu ' pontuação\n```\n"
                example_code: "```\n{print} 'Dois e meio mais dois e meio é...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Todos os textos precisam estar entre aspas simples**\nPara este nível você também terá que usar aspas simples ao armazenar um texto com `=`:\n"
                example_code_2: "```\nnome = 'Hedy a Robô'\n{print} 'Olá ' nome\n```\n"
                story_text_3: "**Todos os itens nas listas também precisam de aspas simples**\nListas são textos, então elas também precisam de aspas simples. Lembre-se de que cada item da lista tem aspas.\nIsso permite que você grave várias palavras como 1 item na lista, por exemplo, 'Homem de Ferro'.\n"
                example_code_3: "```\nsuper_heróis = 'Homem-Aranha', 'Batman', 'Homem de Ferro'\n{print} super_heróis {at} {random}\n```\n"
                story_text_4: "**Todo o texto após as comparações `{if}` também precisa de aspas simples**\n"
                example_code_4: "```\nnome = {ask} 'Qual o seu nome?'\n{if} nome = 'Hedy a Robô'\n    {print} 'Olá você!'\n```\n"
                story_text_5: "**Números não precisam de aspas simples**\nPara números, você não usa aspas no `=`:\n"
                story_text_6: "**Matemática com palavras**\nNeste nível também é permitido usar o sinal + com textos. Por exemplo:"
                example_code_6: "```\na = 'Olá '\nb = 'mundo!'\n{print} a + b\n```\n"
            13:
                start_code: |-
                    nome = {ask} 'qual o seu nome?'
                    idade = {ask} 'qual a sua idade?'
                    {if} nome {is} 'Hedy' {and} idade {is} 2
                        {print} 'Você é realmente a Hedy!'
                story_text: "## E... Ou...?\nAgora vamos aprender `{and}` e `{or}`! Se você quiser verificar duas declarações, você não precisa usar dois `{if}`s, mas pode usar `{and}` e `{or}`. Se você usar `{and}`, ambas as declarações, à esquerda e à direita de `{and}` precisam ser verdadeiras. Também podemos usar `{or}`. Então, apenas uma afirmação precisa estar correta."
                example_code: "```\nnome = {ask} 'qual o seu nome?'\nidade = {ask} 'qual a sua idade?'\n{if} nome {is} 'Hedy' {and} idade {is} 2\n    {print} 'Você é a verdadeira Hedy!'\n```\n"
            14:
                start_code: |-
                    idade = {ask} 'Quantos anos você tem?'
                    {if} idade < 13
                        {print} 'Você é mais novo(a) do que eu!'
                    {else}
                        {print} 'Você é mais velho(a) do que eu!'
                story_text: "## Maior, maior ainda, maior de todos!\nVamos aprender mais novos itens. Você já deve conhecê-los da matemática, os `<` e `>`.\nO `<` verifica se o primeiro número é menor que o segundo, por exemplo idade `<` 12 verifica se idade é menor que 12.\nSe você quiser verificar se o primeiro número é menor ou igual ao segundo, você pode usar `<=`, por exemplo idade `<=` 11.\nO `>` verifica se o primeiro número é maior que o segundo, por exemplo pontos `>` 10 verifica se pontos é maior que 10.\nSe você quiser verificar se o primeiro número é maior ou igual ao segundo, você pode usar `>=`, por exemplo pontos `>=` 11.\nVocê usa essas comparações em um `{if}`, assim:\n"
                example_code: "```\nidade = {ask} 'Quantos anos você tem?'\n{if} idade > 12\n    {print} 'Você é mais velho(a) do que eu!'\n```\n"
                story_text_2: "A partir deste nível, se você quiser comparar exatamente, pode usar dois sinais de igual. Isto é o que a maioria das linguagens de programação fazem:\n"
                example_code_2: "```\nnome = {ask} 'Qual o seu nome?'\n{if} nome == 'Hedy'\n    {print} 'Você é legal!'\n```\n"
                story_text_3: "Você também pode comparar se algo *não* é igual a outra coisa usando `!=` assim:\n"
                example_code_3: "```\nnome = {ask} 'Qual o seu nome?'\n{if} nome != 'Hedy'\n    {print} 'Você não é a Hedy'\n```\n"
            15:
                start_code: |-
                    resultado = 0
                    {while} resultado != 25
                        resultado = {ask} 'Quanto é 5 vezes 5?'
                    {print} 'Foi dada uma boa resposta'
                story_text: |-
                    ## Mais laços!
                    Vamos aprender um novo laço, o laço `{while}`! Continuamos a repetição do laço enquanto a afirmação for verdadeira.
                    Portanto, não se esqueça de alterar o valor dentro do laço.

                    No código de exemplo, continuamos até que uma resposta correta seja dada.
                    Se a resposta correta nunca for dada, o laço nunca termina!
                example_code: "```\nresultado = 0\n{while} resultado != 25\n    resultado = {ask} 'Quanto é 5 vezes 5?'\n{print} 'Uma resposta correta foi dada'\n```\n"
            16:
                start_code: |-
                    fruta = ['maçã', 'banana', 'cereja']
                    {print} fruta
                story_text: "## Mais e mais como código real!\nVamos fazer listas do jeito Python, com colchetes ao redor das listas! Também mantemos as aspas simples em torno de cada item, como aprendemos nos níveis anteriores.\nVocê também pode usar os colchetes para indicar um lugar nas listas."
                example_code: "```\namigos = ['Ahmed', 'Ben', 'Cayden']\nnúmeros_da_sorte = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'o número da sorte de ' amigos[i]\n    {print} 'é ' números_da_sorte[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Preparado(a) ou não, aqui vou eu!'
                story_text: "## Senãose\nAgora vamos mudar um pouco a indentação. Toda vez que precisamos de um recuo, precisamos de `:` na linha antes do recuo.\n\nNeste nível você também pode usar um novo comando: `{elif}`. `{elif}` é a abreviação de {else} {if} e você precisa dele quando quiser fazer 3 (ou mais!) opções.\nConfira!"
                example_code: "```\nprêmios = ['1 milhão de reais', 'uma torta de maça', 'nada']\nseu_prêmio = prêmios[{random}]\n{print} 'Você ganhou ' seu_prêmio\n{if} seu_prêmio == '1 milhão de reais' :\n    {print} 'Isso! Você ficou rico(a)!'\n{elif} seu_prêmio == 'uma torta de maça' :\n    {print} 'Legal, uma torta de maça!'\n{else}:\n    {print} 'Mais sorte da próxima vez..'\n```\n"
            18:
                start_code: |-
                    nome = 'Hedy'
                    {print}('Meu nome é ', nome)
                story_text: |-
                    ## O último nível!
                    Chegamos ao código Python real! Isso significa que precisamos usar parênteses com {print} e {range} de agora em diante.

                example_code: |
                    ```
                    {print}('meu nome é Hedy!')
                    ```

                story_text_2: |-
                    Caso queira imprimir mais de um item, é necessário separá-los por vírgulas.

                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Está ', temperatura, 'graus lá fora')
                    ```

                story_text_3: |-
                    ##  Entrada
                    A mudança final que precisaremos fazer para obter o código Python é mudar `{ask}` para `{input}`.

                example_code_3: |
                    ```
                    {print}('Meu nome é Hedy!')
                    nome = {input}('Qual o seu nome?')
                    {print}('Então o seu nome é ', nome)
                    ```

    story:
        levels:
            10:
                example_code: "```\nanimais = pássaro vermelho, ovelha negra, sapo verde, pato amarelo, criança pequena\n{print} 'urso marrom'\n{print} 'urso marrom'\n{print} 'O que você vê?'\n{for} animal {in} animais\n     {print} 'Vejo um 'animal' olhando para mim'\n     {print} animal\n     {print} animal\n     {print} 'O que você vê?'\n{print} 'Vejo todos os animais olhando para mim!'\n```\n"
                story_text: "## História\nNeste nível você pode usar o comando {for} em sua história. Desta forma, você poderia facilmente programar o livro infantil 'urso pardo, urso pardo, o que você vê'.\n"
                start_code: '# coloque o seu código aqui'
            9:
                story_text: "## História\nNeste nível você pode usar o encaixamento para colocar comandos {if}, {repeat} ou {for} dentro de outros comandos {if}, {repeat} ou {for}. Isso oferece muitas opções e realmente ajuda você a tornar sua história interativa.\n"
                example_code: "```\n{print} 'Roberta está andando no centro'\nlocal = {ask} 'Roberta está entrando em uma loja, ou ela vai para casa?'\n{if} local {is} loja\n    {print} 'Ela entra na loja.'\n    {print} 'Roberta vê um livro interessante'\n    compra = {ask} 'A Roberta vai comprar o livro?'\n    {if} compra {is} sim\n        {print} 'Roberta compra o livro e vai para casa'\n    {else}\n        {print} 'Roberta sai da loja e vai para casa'\n{else}\n    {print} 'Roberta vai para casa'\n```\n"
                story_text_2: "O exemplo acima é bem direto, mas encaixando {if} você pode realmente elaborar seu código e transformar sua história em um jogo real. Confira este exemplo!"
                example_code_2: "## Código elaborado\n```\nespada = perdida\njogo = ligado\n{print} 'Nossa heroína está andando pela floresta'\n{print} 'O caminho se divide em dois caminhos'\n{repeat} 2 {times}\n    {if} jogo {is} ligado\n        path = {ask} 'Qual caminho ela deve escolher?'\n        {if} caminho {is} esquerdo\n            {if} espada {is} encontrada\n                {print} 'Nossa heroína encontra um dragão!'\n                {print} 'Felizmente nossa heroína tem uma espada para derrotar a fera!'\n                jogo = acabou\n            {else}\n                {print} 'Nossa heroína encontra um dragão, mas ela não tem nenhuma arma!'\n                {print} 'Nossa heroína é derrotada pelo dragão...'\n                {print} 'Tente novamente'\n                jogo = acabou\n        {if} caminho {is} certo\n            {if} espada {is} perdida\n                {print} 'Nossa heroína encontra uma espada'\n                {print} 'Isso pode ser muito útil'\n                espada = encontrada\n            {else}\n                {print} 'Você já encontrou a espada. Não há mais nada aqui.'\n                {print} 'Ela volta'\n```\n"
                start_code: '# coloque o seu código aqui'
            3:
                story_text: |
                    ## História
                    No nível 3 você pode tornar sua história mais divertida. Você pode usar aleatoriedade para qualquer monstro, animal ou outro obstáculo, assim:

                example_code: |
                    ```
                    animais {is} 🦔, 🐿, 🦉, 🦇
                    {print} Ouve agora o som de animais {at} {random}
                    ```
                story_text_2: |
                    O comando `{add}` também pode ser útil em sua história.

                example_code_2: |
                    ```
                    {print} Ele ouve um som
                    animais {is} 🐿, 🦔, 🦇, 🦉
                    animal {is} {ask} O que você acha que é?
                    {add} animal {to_list} animais
                    {print} era um animais {at} {random}
                    ```
                story_text_3: |
                    Este é um exemplo do comando `{remove}` em sua história
                example_code_3: |
                    ```
                    {print} A sua mochila ficou muito pesada.
                    {print} Dentro havia uma garrafa de água, uma lanterna e um tijolo.
                    mochila {is} água, lanterna, tijolo
                    lixo {is} {ask} Qual item deve ser descartado?
                    {remove} lixo {from} mochila
                    ```
                start_code: "{print} Sua história"
            1:
                story_text: "## Faça uma história\nNo nível 1 você pode fazer uma história com um personagem principal diferente que você mesmo insere.\n\nNa primeira linha, use `{ask}` e pergunte quem será o personagem principal da história.\n\nApós essa primeira linha, comece com `{print}` se a frase precisar ser impressa.\nVocê usa `{echo}` se quiser que seu personagem principal esteja no final da frase.\n"

                example_code: "```\n{ask} O personagem principal desta história é\n{print} O personagem principal agora vai andar pela floresta\n{echo} Ele está um pouco assustado,\n{print} Ele ouve barulhos estranhos em todos os lugares\n{print} Ele tem medo que esta seja uma floresta assombrada\n```\n"
                start_code: '{print} A sua história começa aqui'
                story_text_2: "## Challenge\nCan you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?\n"
            2:
                story_text: "## História\nNo nível 2 você pode tornar sua história mais divertida. O nome do seu personagem principal agora pode estar em qualquer lugar dentro da frase.\n\nVocê tem que programar um pouco mais para isso. Agora você deve nomear seu personagem principal primeiro.\n\nVocê pode então colocar esse nome em qualquer lugar em uma frase.\n"
                example_code: "```\nnome {is} {ask} Qual é o nome do(a) personagem principal?\n{print} nome agora vai correr na floresta\n{print} nome está um pouco(a) assustado(a)\n{print} De repente ele(a) ouve um barulho estranho...\n{sleep}\n{print} nome está com medo de que esta seja uma floresta assombrada\n```"
                start_code: '{print} Sua história'
            12:
                story_text: "## História\nNeste nível, você pode usar as aspas simples para salvar várias palavras em uma variável."
                example_code: "```\nnome = 'A Rainha da Inglaterra'\n{print} nome 'estava comendo um pedaço de bolo, quando de repente...'\n```\n"
                start_code: '# coloque o seu código aqui'
            8:
                story_text: "## História\nNeste nível você pode usar várias linhas em seus comandos {if}, desta forma você pode atualizar seu final feliz ou triste!\n"
                example_code: "```\n{print} 'OH NÃO! O T-rex está se aproximando!'\nfinal = {ask} 'Você quer um final feliz ou triste?'\n{if} final {is} feliz\n     {print} 'Bem a tempo Ricardo volta para a máquina do tempo!'\n     {print} 'Miguel digita o código e...'\n     {print} '\U0001F4A5ZAP!\U0001F4A5'\n     {print} 'Eles estão de volta na garagem'\n{else}\n     {print} 'Miguel grita VENHA RICARDO! CORRA MAIS RÁPIDO!'\n     {print} 'Mas Ricardo é muito lento...'\n     {print} 'O T-rex se aproxima e o devora em uma grande mordida!\U0001F996'\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "## História\nEm uma história, alguém diz a mesma palavra várias vezes. Por exemplo, quando alguém pede ajuda ou canta uma música.\nVocê pode colocar tais repetições em sua história neste nível, com `{repeat}`.\n"
                example_code: "```\n{print} 'O príncipe não parava de pedir ajuda'\n{repeat} 5 {times} {print} 'Socorro!'\n{print} 'Por que ninguém está me ajudando?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Socorro!'"
            5:
                story_text: "## História\nNeste nível você pode programar finais diferentes, o que tornará sua história ainda mais divertida.\n\nPense em dois finais para sua história, por exemplo:\n\n- A princesa está andando pela floresta\n- Ela se depara com um monstro\n\n- Final feliz: ela pega sua espada e o monstro foge rapidamente\n- Final triste: O monstro devora a princesa\n\nVocê também pode garantir que um nome possa ser inserido novamente. Isso funciona exatamente como nos níveis anteriores. Você pode combinar isso com um `{if}`, e então você já fez um programa inteiro!\n"
                example_code: "```\nnome {is} {ask} 'Quem está andando na floresta?'\n{print} nome 'caminha pela floresta'\n{print} nome 'encontra um monstro'\nfinal {is} {ask} 'Você gostaria de um final feliz ou triste?'\n{if} final {is} feliz {print} nome 'pega a espada e o monstro foge rapidamente'\n{else} {print} 'O monstro devora' nome\n```\n"
                start_code: "{print} 'Aqui a sua história vai começar!'"
            4:
                story_text: "## História\nVocê deve ter notado que ainda há um problema nos níveis anteriores. Você tentou imprimir uma frase que continha a palavra nome?\nVocê pode resolver isso neste nível. Você deve usar aspas simples para tudo que for imprimir.\n"
                example_code: "```\nnome {is} Hans\n{print} 'O nome do personagem principal é' nome\n{print} nome 'agora vai andar na floresta'\n{print} nome 'está um pouco assustado'\nanimais {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} 'Ele ouve o som de' animais {at} {random}\n{print} nome 'tem medo que esta seja uma floresta assombrada'\n```\n"
                start_code: "{print} 'Sua história será impressa aqui!'"
            15:
                story_text: "## História\nUsar o laço `{while}` pode tornar suas histórias mais interessantes. Por exemplo, você pode usar `{while} jogo {is} 'ligado'` para poder jogar até que o jogo termine.\nOu você pode usar `{while} espada {is} 'perdida'` para que o jogador não possa continuar o jogo até encontrar algo.\n"
                example_code: "```\nchaves = 'perdidas'\n{print} 'Você está no seu jardim e perdeu suas chaves.'\n{print} 'Onde você quer procurá-las?'\n{print} 'Você pode escolher: árvore, canteiro de flores, pedra, caixa postal'\n{while} chaves == 'perdidas'\n    local = {ask} 'Onde você quer procurar?'\n    {if} local == 'canteiro de flores'\n        {print} 'Aqui estão elas!'\n        chaves = 'encontradas'\n    {else}\n        {print} 'Não, elas não estão no ' local\n{print} 'Agora você pode entrar na casa!'\n```\n"
                start_code: '# coloque o seu código aqui'
            13:
                story_text: "## História\nUsando os comandos `{and}` e `{or}`, você pode encurtar suas histórias. Por exemplo, confira a história do dragão.\n"
                example_code: "```\nespada = 'perdida'\njogo = 'ligado'\n{print} 'Nossa heroína está andando pela floresta'\n{print} 'O caminho se divide em dois caminhos'\n{for} i {in} {range} 0 {to} 2\n    {if} jogo {is} 'ligado'\n        caminho = {ask} 'Qual caminho ela deve escolher?'\n        {if} caminho {is} 'esquerda' {and} espada {is} 'encontrada'\n            {print} 'Nossa heroína encontra um dragão!'\n            {print} 'Felizmente nossa heroína tem uma espada para derrotar a fera!'\n            jogo = 'acabou'\n        {if} caminho {is} 'esquerda' {and} espada {is} 'perdida'\n            {print} 'Nossa heroína encontra um dragão, mas ela não tem nenhuma arma!'\n            {print} 'Nossa heroína é derrotado pelo dragão...'\n            {print} 'Tente novamente'\n            jogo = 'acabou'\n        {if} caminho {is} 'direito' {and} espada {is} 'encontrada'\n            {print} 'Você já encontrou a espada. Não há mais nada aqui.'\n            {print} 'Ela volta'\n        {if} caminho {is} 'certo' {and} espada {is} 'perdida'\n            {print} 'Nossa heroína encontra uma espada'\n            {print} 'Isso pode ser muito útil'\n            espada = 'encontrada'\n```\n"
                start_code: '# coloque o seu código aqui'
        name: História
        description: História
        default_save_name: História
    parrot:
        default_save_name: Papagaio
        levels:
            1:
                story_text: "## Papagaio\nCrie seu próprio papagaio de estimação online que irá copiar você!\n"
                example_code: "```\n{print} Eu sou Hedy a papagaio\n{ask} qual é o seu nome?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Eu sou Hedy a papagaio'
                story_text_2: "## Challenge\nCan you make the parrot ask a different question? Fill in the blanks in the example!\n"
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "## Papagaio\nCrie seu próprio papagaio de estimação online que irá copiar você!\n"
                example_code: "```\n{print} Eu sou Hedy a papagaio\nnome {is} {ask} qual é o seu nome?\n{print} nome\n{sleep}\n{print} grasnar\n{sleep}\n{print} nome\n```\n"
                start_code: '{print} Eu sou Hedy a papagaio!'
                story_text_2: "## Challenge\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
                example_code_2: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} name\nsurname {is} {ask} whats your surname?\n_\n{sleep}\n_\n```\n"
            3:
                story_text: "## Papagaio\nEnsine ao seu papagaio uma nova palavra com `{add}`.\n"
                example_code: "```\npalavras {is} grasnar, Hedy\n{print} Treine seu papagaio!\nnova_palavra {is} {ask} Qual palavra você quer ensinar a ele?\n{add} nova_palavra {to_list} palavras\n{print} \U0001F9D2 Diga nova_palavra , Hedy!\n{print} \U0001F99C palavras {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            5:
                story_text: "## Papagaio\nRecompense seu papagaio se ele disser a palavra correta!\n"
                example_code: "```\npalavras {is} grasnar, Hedy\n{print} 'Treine seu papagaio!'\nnova_palavra {is} {ask} 'Qual palavra você quer ensinar a ele?'\n{add} nova_palavra {to_list} palavras\npalavra_dita {is} palavras {at} {random}\n{print} '\U0001F9D2 Diga ' nova_palavra ', Hedy!'\n{print} '\U0001F99C' palavra_dita\n{if} palavra_dita {is} nova_palavra {print} '\U0001F9D2 Ótimo trabalho, Hedy! \U0001F36A'\n{else} {print} '\U0001F9D2 Não, Hedy! Diga ' nova_palavra\n```\n"
                start_code: '# coloque o seu código aqui'
        name: Papagaio
        description: Crie seu próprio papagaio de estimação online que irá copiar você!
    songs:
        levels:
            7:
                example_code: "```\n{repeat} _ _ {print} 'Bebê Tubarão tututudutudu'\n{print} 'Bebê Tubarão'\n```\n\nDepois do Bebê Tubarão, você também pode programar outras músicas. Há muitas músicas com repetição.\n"
                story_text: "## Músicas\nAs músicas geralmente contêm muita repetição. Por exemplo... Bebê Tubarão! Se você canta, você continua cantando a mesma coisa:\n\nBebê tubarão tututudutudu <br>\nBebê tubarão tututudutudu <br>\nBebê tubarão tututudutudu <br>\nTubarão bebê\n\nVocê pode fazer esta música muito mais curta com um `{repeat}`! Você pode terminar o código?\n"
                start_code: "{print} 'Bebê Tubarão'"
            12:
                story_text: "## Cante uma canção!\nNesta música podemos tornar ainda mais fácil programar '{if} você está feliz e sabe disso, bata palmas'. Uma vez que podemos colocar todas as ações em uma variável, confira:\n"
                example_code: "```\nações = 'bater palmas', 'bater os pés', 'gritar Hurra!'\n{for} ação {in} ações\n    {for} i {in} {range} 1 {to} 2\n        {print} 'se você está feliz e sabe disso'\n        {print} ação\n    {print} 'se você está feliz e sabe disso e realmente quer demonstrar'\n    {print} 'se você está feliz e sabe disso'\n    {print} ação\n```\n"
                start_code: '# coloque o seu código aqui'
            11:
                story_text: "## Músicas\nNeste nível você pode usar o comando `{for} i {in} {range}` para fazer músicas que usam contagem.\n"
                example_code: "## 5 macaquinhos\n```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' macaquinhos pulando na cama'\n    {print} 'Um caiu e bateu a cabeça'\n    {print} 'Mamãe chamou o médico e o médico disse'\n    {if} i {is} 1\n        {print} 'COLOQUE AQUELES MACACOS LOGO NA CAMA!'\n    {else}\n        {print} 'CHEGA DE MACACOS PULANDO NA CAMA!'\n```\n"
                start_code: '# coloque o seu código aqui'
            10:
                story_text: "## Músicas\nNeste nível, você pode facilmente fazer a música infantil 'Cinco macaquinhos'. Você pode fazer o último refrão?\nVocê também pode fazer toda a música do tubarão bebê (incluindo todos os outros tubarões da família) em apenas 6 linhas!\nOu você pode fazer o Velho McDonald com todos os diferentes animais.\n"
                example_code: "## 5 Macaquinhos pulando na cama\n```\nmacacos = 5, 4, 3, 2\n{for} macaco {in} macacos\n    {print} macaco 'macaquinhos pulando na cama'\n    {print} 'Um caiu e bateu a cabeça'\n    {print} 'Mamãe chamou o médico e o médico disse'\n    {print} 'SEM MAIS MACACOS PULANDO NA CAMA!'\n```\n\n## Tubarão bebê\n```\ntubarões = bebê, mamãe, papai, vovó, vovô\n{for} tubarão {in} tubarões\n    {print} tubarão 'tututututudu'\n    {print} tubarão 'tututututudu'\n    {print} tubarão 'tututututudu'\n    {print} tubarão\n```\n## Velho McDonald\n```\nanimais = porco, cachorro, vaca\n{for} animal {in} animais\n    {if} animal {is} porco\n        som = oink\n    {if} animal {is} cachorro\n        som = au\n    {if} animal {is} vaca\n        som = mu\n    {print} 'O velho McDonald tinha uma fazenda'\n    {print} 'I A I A O U!'\n    {print} 'e naquela fazenda ele tinha um ' animal\n    {print} 'I A I A O U!'\n    {print} 'com um ' som som ' aqui'\n    {print} 'e um ' som som ' ali'\n    {print} 'aqui um ' som\n    {print} 'lá um' som\n    {print} 'em todos os lugares um ' som som\n```\n"
                start_code: '# coloque o seu código aqui'
            8:
                story_text: "## Músicas\nEm um nível anterior você programou a música 'Garrafas de cerveja'. Você fez um verso e depois teve que copiar os versos 99 vezes. No nível 7 você pode repetir a música 99 vezes, apenas adicionando uma linha simples!\n"
                example_code: "```\nverso = 99\n{repeat} 99 {times}\n     {print} verso 'garrafas de cerveja na parede'\n     {print} verso 'garrafas de cerveja'\n     {print} 'Pegue uma, passe por aí'\n     verso = verso - 1\n     {print} verso 'garrafas de cerveja na parede'\n```\n"
                start_code: '# coloque o seu código aqui'
            6:
                story_text: "## Músicas\nAs músicas geralmente contêm muita repetição. Às vezes, a repetição também se baseia na contagem.\nPor exemplo, como na conhecida canção 'Garrafas de cerveja'. Você pode programar essa música com um pouco de matemática.\n"
                example_code: "```\nverso = 99\n{print} verso 'garrafas de cerveja na parede'\n{print} verso 'garrafas de cerveja'\n{print} 'Pegue uma, passe por aí'\nverso = verso - 1\n{print} verso 'garrafas de cerveja na parede'\n```\n\nAgora você pode repetir as linhas 2 a 9 quantas vezes quiser copiando as linhas.\n"
                start_code: "{print} 'Bebê tubarão'"
                story_text_2: "## 5 Little Monkeys jumping on the bed\nThis children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\nprint number ' little monkeys jumping on the bed'\nprint 'One fell off and bumped his head'\nprint 'Mama called the doctor and the doctor said'\nprint 'NO MORE MONKEYS JUMPING ON THE BED!'\nsleep\n```\n"
            16:
                story_text: "## Cante uma canção!\nNeste nível, você pode programar uma música como Velho MacDonald ainda mais rapidamente. Você pode conectar o animal certo ao som certo simplesmente colocando-os no mesmo lugar na lista.\nO Marinheiro Bêbado também é feito rapidamente neste nível. Você só precisa de 8 linhas para a música inteira, confira!\n"
                start_code: '# coloque o seu código aqui'
                example_code: "## Velho MacDonald\n```\nanimais = ['porco', 'cachorro', 'vaca']\nsons = ['oinc', 'au', 'mu']\n{for} i {in} {range} 1 {to} 3\n     animal = animais[i]\n     som = sons[i]\n     {print} 'O velho McDonald tinha uma fazenda'\n     {print} 'I A I A O!'\n     {print} 'e naquela fazenda ele tinha um ' animal\n     {print} 'I A I A O!'\n     {print} 'com um ' som som ' aqui'\n     {print} 'e um ' som som ' ali'\n     {print} 'aqui um ' som\n     {print} 'lá um' som\n     {print} 'em todos os lugares um ' som som\n```\n\n## Marinheiro Bêbado\n```\nlinhas = ['o que devemos fazer com o marinheiro bêbado', 'raspar sua barriga com uma navalha enferrujada', 'colocá-lo em um longo barco até que ele fique sóbrio']\n{for} linha {in} linhas\n    {for} i {in} {range} 1 {to} 3\n        {print} linha\n    {print} 'no início da manhã'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'e assim se levanta a âncora'\n    {print} 'no início da manhã'\n```\n"
        name: Cante uma canção!
        description: Imprima uma canção
        default_save_name: Canção
    turtle:
        levels:
            1:
                story_text: "## Vamos desenhar\nVocê também pode usar Hedy para desenhar. Ao combinar giros e linhas, você pode fazer um quadrado ou uma escada!\n\nUsando `{forward}` você desenha uma linha para frente. O número depois dele determina o quão longe a tartaruga vai andar. `{turn} {right}` gira um quarto de volta no sentido horário, `{turn} {left}` gira no sentido anti-horário.\nSe você quiser voltar, você usa o comando `{forward}` mas com um número negativo. Por exemplo, `{forward} -100`\n\nEste é o início de uma pequena escada. Você pode fazê-la ter 5 passos?\n"
                start_code: "{forward} 50\n{turn} {left}"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
            2:
                story_text: "## Tartaruga\nNeste nível você pode usar variáveis para tornar a tartaruga interativa. Por exemplo, você pode perguntar ao jogador quantos passos a tartaruga deve dar.\n"
                example_code: "```\nresposta {is} {ask} Quantos passos a tartaruga deve dar?\n{forward} resposta\n```\n"
                start_code: "{print} Corrida de tartaruga!\nângulo {is} 90\n{turn} ângulo\n{forward} 25"
                story_text_2: "Além disso, no nível 1 a tartaruga só podia virar para a esquerda ou para a direita. Isso é um pouco chato!\nNo nível 2, ela pode apontar o nariz em todas as direções.\n\nUse 90 para virar um quarto. Chamamos isso de graus. Uma volta completa é de 360 graus.\nVocê pode fazer uma figura com este código? Talvez um triângulo ou um círculo?\n"
                example_code_2: "```\n{print} Desenhando figuras\nângulo {is} 90\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n```\n"
            3:
                story_text: "## Procurando tartaruga\nNeste nível você pode usar `{at} {random}` com a tartaruga de desenho. Uma escolha aleatória faz com que a tartaruga percorra um caminho diferente a cada vez.\nUse `{at} {random}` para escolher um valor de uma lista. Você pode copiar e colar as linhas 2 e 3 para criar um caminho aleatório mais longo.\n"
                example_code: "```\nângulos {is} 10, 50, 90, 150, 250\n{turn} ângulos {at} {random}\n{forward} 25\n```\n"
                start_code: "ângulos {is} 10, 50, 90, 150, 250\n{turn} ângulos {at} {random}\n{forward} 25"
            4:
                story_text: "## Vamos desenhar\nNo nível 4 você tem que usar aspas com `{print}` e `{ask}`. Também ao desenhar!\n"
                example_code: "```\n{print} 'Desenhando figuras'\nângulo {is} 90\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n```\n"
                start_code: "{print} 'Desenhando figuras'\nângulo {is} 90\n{turn} ângulo\n{forward} 25"
                story_text_2: "## Colors\nYou can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "## Vamos desenhar\nNo nível 5 você pode fazer uma escolha com `{if}`. Por exemplo, entre diferentes tipos de figuras.\n"
                example_code: "```\n{print} 'Desenhando Figuras'\nfigura {is} {ask} 'Você quer um quadrado ou um triângulo?'\n{if} figura {is} triângulo ângulo {is} 120\n{else} ângulo {is} 90\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n```\n"
                start_code: "{print} 'Desenhando Figuras'\nfigura {is} {ask} 'Você quer um quadrado ou um triângulo?'\n{if} figura {is} triângulo ângulo {is} 120 {else} ângulo {is} 90\n{turn} ângulo\n{forward} 25"
            8:
                story_text: "## Vamos desenhar\nAgora que podemos repetir várias linhas, podemos fazer figuras com mais facilidade.\nNós só temos que definir o ângulo uma vez e então usar essa variável no `{repeat}`.\n"
                example_code: "```\nângulo = 90\n{repeat} 10 {times}\n    {turn} ângulo\n    {forward} 50\n```\n"
                story_text_2: "## Interação\nAlém disso, agora podemos melhorar o programa que desenha diferentes figuras.\nVocê consegue descobrir até onde a tartaruga tem que virar aqui? Termine o código e você pode desenhar qualquer polígono que quiser!\n"
                example_code_2: "```\nângulos = {ask} 'Quantos ângulos eu deve desenhar?'\nângulo= 360 / ângulos\n{repeat} ângulo {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "ângulos = {ask} 'Quantos ângulos eu devo desenhar?'"
            7:
                story_text: "## Vamos desenhar\nNeste nível você pode repetir uma linha de código com `{repeat}`.\n"
                example_code: "```\n{print} 'Desenhe figuras'\n{repeat} 3 {times} {forward} 10\n```\n"
                start_code: "{print} 'Desenhe figuras'\n{repeat} 3 {times} {forward} 10"
            6:
                story_text: "## Vamos desenhar\nNeste nível você pode usar cálculos para desenhar figuras diferentes.\nVocê pode ter aprendido na escola que girar um círculo completo é de 360 graus. Se não, agora você sabe!\nÉ por isso que você também usa 90 graus para um quadrado. 360 dividido por 4 é 90.\nAgora que podemos fazer contas com a Hedy, podemos desenhar todas as figuras que quisermos!\n"
                example_code: "```\nângulos = {ask} 'Quantos ângulos você deseja?'\nângulo = 360 / ângulos\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n```\n"
                start_code: "{print} 'Desenhando figuras'"
        name: Tartaruga
        description: Faça o seu próprio desenho
        default_save_name: Tartaruga
    dishes:
        levels:
            6:
                story_text: "## Lava-louças\nQuantas vezes todo mundo vai lavar a louça? Isso é justo? Você pode contá-lo neste nível.\n"
                example_code: "\n```\npeople = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = people {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                example_code_2: "```\npeople = mom, dad, Emma, Sophie\ndishwasher = people {at} {random}\n{print} 'Monday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n{print} 'Tuesday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n```\n"
                start_code: "{print} 'Who does the dishes?'"
                story_text_2: "## Make it fair\nIf you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!\nTo create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.\n\nMonday and tuesday are ready for you! Can you add the rest of the week?\nAnd... can you come up with a solution for when your list is empty?\n"
            10:
                story_text: "## Dishwashing\nIn this level you could make an even better dish washing shedule.\n"
                example_code: "```\ndays = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\nnames = mom, dad, Emma, Sophie\n{for} day {in} days\n    {print} names {at} {random} ' does the dishes on ' day\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "## Dishwashing\nWith the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.\n"
                example_code: "\n```\npeople = mom, dad, Emma, Sophie\n{repeat} _ _ {print} 'the dishwasher is' _\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            5:
                story_text: "## Lavar pratos\nCom o `{if}` agora você pode se divertir mais com a escolha do programa. Você pode fazer com que seu programa responda à escolha que o computador fez.\n\nVocê pode terminar o código para que ele imprima 'muito ruim' quando for sua vez e, caso contrário, 'sim!'?\nNão se esqueça das aspas simples!\n"
                example_code: "```\npessoas {is} mãe, pai, Eva, Sofia\nlavador {is} pessoas {at} {random}\n{if} lavador {is} Sofia {print} _ pena que tenho que lavar os pratos _ {else} {print} 'felizmente sem pratos porque' _ 'já está lavando'\n```\n"
                start_code: "{print} 'Quem lava os pratos?'"
            4:
                start_code: "{print} 'Quem lava os pratos?'"
                story_text: "## Lavando pratos\nCom as aspas simples você pode deixar seu planejamento de lavagem de louça mais bonito.\nDesta vez, o código de exemplo não está completo.\n\nVocê pode completar o código preenchendo os espaços em branco? Cada espaço em branco deve ser substituído por uma palavra de símbolo.\n\nDica: Não se esqueça das aspas!\n"
                example_code: "```\npessoas {is} mãe, pai, Eva, Sofia\n{print} _ os pratos são limpos por _\n{sleep}\n{print} pessoas {at} _\n```\n"
            3:
                story_text: "## Lavando pratos\nVocê sempre discorda em casa sobre quem deve lavar a louça ou trocar a caixa de areia hoje?\nEntão você pode deixar o computador escolher de forma muito justa. Você pode programar isso neste nível!\nVocê primeiro faz uma lista dos membros de sua família. Em seguida, escolha '{at} {random}' na lista.\n"
                example_code: "```\npessoas {is} mãe, pai, Eva, Sofia\n{print} pessoas {at} {random}\n```\n"
                start_code: '{print} Quem lava os pratos?'
                story_text_2: "## Hackeie o programa de lavar louça!\nNão sente vontade de lavar a louça sozinho? Hackeie o programa para remover seu nome da lista.\n"
                example_code_2: "```\npessoas {is} mãe, pai, Eva, Sofia\nseu_nome {is} {ask} Quem é você?\n{remove} seu_nome {from} pessoas\n{print} pessoas {at} {random} lava os pratos\n```\n"
        name: Pratos?
        description: Use o computador para ver quem lava os pratos (Comece no nível 2)
        default_save_name: Pratos
    dice:
        name: Dado
        levels:
            6:
                story_text: "## Dice\nYou can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.\nYou may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.\nThis is the code to calculate points for one die:\n"
                start_code: "{print} 'What will the die indicate this time?'"
                example_code: "\n```\nchoices = 1, 2, 3, 4, 5, earthworm\npoints = 0\nthrow = choices {at} {random}\n{print} 'you threw' throw\n{if} throw {is} earthworm points = points + 5 {else} points = points + throw\n{print} 'those are' points ' point'\n```\nCan you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.\n"
                example_code_2: "## Looking forward\n\nDid you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!\n"
            5:
                example_code: "\n```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
                story_text: "## Dice\nYou can also make a die again in this level using the `{if}`.\nComplete the sample code so that the code says \"You can stop throwing\" once you have thrown an earthworm.\n\nBut maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.\n"
            4:
                example_code: "\n```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} _ you threw _\n{print} _ _ _ <- here you have to program the choice\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
                story_text: "## Dice\nIn this level we can make sentences with the die value in the sentence, with quotes of course.\nThis time the sample code is not quite complete. Can you finish the code?\n"
            3:
                story_text: "## Dice\nIn this level we can choose from a list. With that we can let the computer choose one side of the die.\nTake a look at the games you have in your closet at home.\nAre there games with a (special) die? You can also copy it with this code.\nFor example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.\n\n![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "\n```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} choices {at} {random}\n```\n"
                start_code: '{print} What will the die indicate this time?'
                story_text_2: "## Challenge\nThe dice in the example above are dice for a specific game. Can you make normal dice?\nOr other special dice from a different game?\n"
                example_code_2: "```\nchoices {is} _\n```\n"
            10:
                story_text: "## Dice\nIs everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!\n"
                example_code: "\n```\nplayers = Ann, John, Jesse\nchoices = 1, 2, 3, 4, 5, 6\n{for} player {in} players\n    {print} player ' throws ' choices {at} {random}\n    {sleep}\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "## Dice\nYou can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.\nTry to finish the sample code! The dashes should contain multiple commands and characters.\n\nBut maybe you want to make a completely different die. Of course you can!\n"
                example_code: "\n```\nchoices = 1, 2, 3, 4, 5, earthworm\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
            15:
                story_text: "## Dice\nIn this game you have to throw 6 in as little tries as possible.\n"
                example_code: "\n```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# coloque o seu código aqui'
        description: Make your own dice
        default_save_name: Dado
    rock:
        levels:
            5:
                story_text: "## Rock, paper, scissors\nIn this level we can determine who won.\nFor that you need the new `{if}` code.\n\nSave your choice with the name of choice and the choice of computer as computer choice.\nThen you can use `{if}` to see {if} they are the same or different.\nWill you finish the code?\n"
                example_code: "\n```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} What do you choose?\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            4:
                story_text: "## Rock, paper, scissors\nIn this level we can further program rock, paper, scissors. But {if} you want to add text, you have to use quotation marks here too.\nDo you complete the code by entering the correct commands or characters on the underscores?\n"
                example_code: "\n```\nchoices {is} rock, paper, scissors\n{print} _ The computer chose: _ _ {at} _\n```\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            1:
                story_text: "## Pedra, papel e tesoura\nNo nível 1 você pode começar com um jogo de pedra, papel e tesoura.\n\nCom `{ask}` você pode fazer uma escolha, e com `{echo}` você pode repetir essa escolha.\n"
                example_code: "```\n{print} o que você escolhe?\n{ask} escolha entre pedra, papel ou tesoura\n{echo} então sua escolha foi:\n```\nEm vez de usar palavras, você também pode usar emojis, é claro: ✊✋✌\n"
                start_code: '{print} Bem-vindo ao seu próprio papel, pedra e tesoura!'
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
                story_text_2: "## Challenge\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
            10:
                story_text: "## Rock, Paper, Scissors\nFeeling too lazy to play the game yourself? Let Hedy play it for you!\n"
                example_code: "\n```\nchoices = rock, paper, scissors\nplayers = Marleen, Michael\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            9:
                story_text: "## Rock, paper, scissors\nIn this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?\n"
                example_code: "\n```\nchoices {is} rock, paper, scisscors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock'\n    {if} your_choice {is} 'paper'\n        {print} 'You win!'\n    {if} your_choice {is} 'scissors'\n        {print} 'You lose!'\n```\n"
                start_code: '# coloque o seu código aqui'
            3:
                story_text: "## Rock, paper, scissors\n\nIn this level we can enter lists and choose things from them.\nYou first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.\nFor example, you can let the computer pick from rock, paper and scissors.\n"
                start_code: '{print} Welcome to your own rock scissors paper!'
                example_code: "\n\n```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                story_text_2: "## Challenge\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
            2:
                story_text: "## Rock, paper, scissors\nIn this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!\n"
                example_code: "\n```\nchoice {is} _\n{print} I choose choice\n```\n"
                start_code: '# coloque o seu código aqui'
            15:
                story_text: "## Rock, Paper, Scissors\nPlay until you beat the computer! But first, finish the example code...\n"
                example_code: "\n```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n"
                start_code: '# coloque o seu código aqui'
            13:
                story_text: "## Rock, paper, scissors\nWith the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.\n"
                example_code: "\n```\noptions = 'rock', 'paper', 'scissors'\nyour_choice = {ask} 'What do you choose?'\ncomputer_choice = options {at} {random}\n{print} 'You choose ' your_choice\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'The computer wins!'\n```\n"
                start_code: '# coloque o seu código aqui'
        name: Pedra, papel, tesoura
        description: Make your own rock, paper, scissors game
        default_save_name: Pedra
    calculator:
        levels:
            12:
                story_text: "## Calculator\nNow you can make a calculator that works for decimal numbers.\n"
                example_code: "\n```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = number1 + number2\n{print} number1 ' plus ' number2 ' is ' answer\n"
                start_code: '# coloque o seu código aqui'
            10:
                story_text: "## Calculator\nThis calculator game helps you practise your tables of multiplication!\nIf you add more numbers to the list, you can practise all the multiplications.\n"
                example_code: "\n```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
                start_code: '# coloque o seu código aqui'
            9:
                story_text: "## Calculator\nIn previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game. Like this...\n"
                example_code: "\n```\nscore = 0\n{repeat} 10 {times}\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct_answer = number1 * number2\n    {print} 'What is ' number1 ' times ' number2 '?'\n    answer = {ask} 'Type your answer here...'\n    {print} 'Your answer is' answer\n    {if} answer {is} correct_answer\n        score = score + 1\n{print} 'Great job! Your score is... ' score ' out of 10!'\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
            6:
                start_code: "{print} 'Welcome to this calculator!'"
                story_text: "## Calculator\nNow that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:\n"
                example_code: "\n```\ncorrect_answer = 11 * 27\nanswer = {ask} 'How much is 11 times 27?'\n{if} answer {is} correct_answer {print} 'good job!'\n{else} {print} 'Wrong! It was ' correct_answer\n```\n"
                story_text_2: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_2: "\n```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
                story_text_3: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_3: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
            14:
                story_text: "## Guess which number\nIn this level you can programm the game 'Guess which number'\n"
                example_code: "\n```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n"
                start_code: '# coloque o seu código aqui'
            15:
                story_text: "## Calculator\nYou can add the `{while}` loop to the calculator game you've learned to make in a previous level.\nThis makes sure the player can't continue to the next question {if} they answer incorrectly.\n"
                example_code: "\n```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# coloque o seu código aqui'
        name: Calculadora
        description: Create a calculator
        default_save_name: Calculadora
    restaurant:
        name: Restaurant
        levels:
            9:
                story_text: "## Restaurant\nIn this level you can use nesting to make your restaurant more realistic and more fun!\nFor example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!\nCheck out the example, and try this at your own virtual restaurant!\n"
                example_code: "\n```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n    {if} food {is} fries\n        price = price + 3\n        sauce = {ask} 'What kind of sauce would you like with your fries?'\n        {if} sauce {is} no\n            {print} 'no sauce'\n        {else}\n            price = price + 1\n            {print} 'with ' sauce\n    {if} food {is} pizza\n        price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
                start_code: '# coloque o seu código aqui'
            8:
                story_text: "## Restaurant\nIn this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n\n## Challenge\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Challenge\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
            6:
                story_text: "## Restaurant\nIn this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.\n"
                example_code: "## Exemplo de código Hedy (Simple)\nYou can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                story_text_2: "But you can also add many more things to your virtual restaurant, for example more courses.\n"
                example_code_2: "## Exemplo de código Hedy(Elaborate)\nIn this example there are three courses, which requires more code and more additions in calculating the price.\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our starters are salad, soup, or carpaccio'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\n{print} 'Our desserts are brownie, icecream, or milkshake'\nstarter = {ask} 'Which starter would you like to have?'\nmain = {ask} 'Which main course would you like?'\ndessert = {ask} 'Which dessert do you pick?'\nprice = 0\n{if} starter {is} soup price = price + 6 {else} price = price + 7\n{if} main {is} pizza price = price + 10\n{if} main {is} lasagne price = price + 12\n{if} main {is} spaghetti price = price + 8\n{if} dessert {is} brownie price = price + 7\n{if} dessert {is} icecream price = price + 5\n{if} dessert {is} milkshake price = price + 4\n{print} 'You have ordered ' starter ' , ' main ' and ' dessert\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n## Challenge\nYou can add many more things to your virtual restaurant. For example, can you...\n- {ask} how many people are coming and multiply the price by that amount?\n- add another course?\n- give people a discount when they enter a (secret) couponcode?\n- add a children's menu?\n- think of other fun things to add?\n"
                start_code: '# coloque o seu código aqui'
            4:
                story_text: "## Restaurant\nIn this level you have to use quotation marks when using the `{print}` command.\nCan you make your code from the previous levels work in this level too by adding the quotation marks?\n\nBe careful! In the previous levels apostrophes were allowed in the text, but in this level Hedy will confuse them for quotation marks and the code will not work!\nSo instead of typing  `{print} Today we're serving pizza` , you should type `{print} 'Today we are serving pizza'`."
                start_code: '# coloque o seu código aqui'
                example_code: "## Example Hedy Restaurant\n```\n{print} 'Welcome to Hedys restaurant!'\n{print} 'Today we are serving pizza or lasagna.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'Great choice! The ' food ' is my favorite!'\ntopping {is} {ask} 'Would you like meat or veggies on that?'\n{print} food ' with ' topping ' is on its way!'\ndrinks {is} {ask} 'What would you like to drink with that?'\n{print} 'Thank you for your order.'\n{print} 'Your ' food ' and ' drinks ' will be right there!'\n```\n"
            3:
                example_code_2: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n{remove} allergies {from} flavors\n{print} You get a flavors {at} {random} milkshake\n```\n"
                story_text: "## Random Restaurant\nHaving trouble to decide what you wanna have for dinner? You can let Hedy choose for you!\nSimply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.\nYou can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?\n"
                example_code: "\n```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "## Allergies\nDoes your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.\n"
                start_code: '# coloque o seu código aqui'
            15:
                story_text: "## Restaurant\nWith the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
                example_code: "\n```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything {else}?'\n{print} 'Thank you!'\n"
                start_code: '# coloque o seu código aqui'
            1:
                story_text: "## Restaurante\n  No nível 1 você pode fazer seu próprio restaurante virtual e receber os pedidos de seus convidados.\n"
                example_code: "```\n{print} Bem-vindo ao restaurante da Hedy \U0001F35F\n{ask} O que você gostaria de pedir?\n{echo} Então você gostaria de pedir\n{print} Obrigado pelo seu pedido!\n{print} Está a caminho!\n```\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Desafio\nVocê consegue pensar em mais linhas para adicionar ao código do seu restaurante? Por exemplo, você pode usar {ask} para perguntar aos convidados o que eles gostariam de beber, dizer o preço ou desejar uma refeição agradável?\n"
            2:
                story_text: "## Restaurant\nIn level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.\nNow you can use variables and Hedy can remember both the food and the drinks!\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\ndrinks {is} {ask} What would you like to drink with that?\n{print} Thank you for your order.\n{print} Your food and drinks will be right there!\n```\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Challenge\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
                example_code_2: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\ndrinks {is} _\n```\n"
            12:
                story_text: "## Restaurant\nFrom this level on you can use decimal numbers to make you menu more realistic.\n"
                example_code: "\n```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drinks {is} 'water'\n    price = price + 1.20\n{if} drinks {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# coloque o seu código aqui'
            11:
                story_text: "## Restaurant\nWe can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.\n"
                example_code: "\n```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{for} i {in} {range} 1 {to} people\n    {print} 'Order number ' i\n    food = {ask} 'What would you like to eat?'\n    {print} food\n    {if} food {is} fries\n        sauce = {ask} 'What kind of sauce would you like with that?'\n        {print} sauce\n    drinks = {ask} 'What would you like to drink?'\n    {print} drinks\nprice = 4 * people\n{print} 'That will be ' price ' dollars, please!'\n```\n"
                start_code: '# coloque o seu código aqui'
            10:
                example_code: "\n```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
                story_text_2: "\nOf course, you could also order for multiple people!\n"
                example_code_2: "```\ncourses = appetizer, main course, dessert\nnames = Timon, Onno\n{for} name {in} names\n    {for} course {in} courses\n        food = {ask} name ', what would you like to eat as your ' course '?'\n        {print} name ' orders ' food ' as their ' course\n```\n"
                story_text: "## Restaurant\nIn this level you'll learn how to easily {ask} your guests' orders in a short code.\n"
                start_code: courses = appetizer, main course, dessert
            7:
                story_text: "## Restaurant\nIn this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.\nYou can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:\n\n```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
            5:
                story_text: "## Restaurant\nIn this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.\nIn the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.\n"
                example_code: "\n```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n\n## Challenge\nCan you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Challenge\nCan you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?\n"
            13:
                story_text: "## Restaurant\nIn this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                story_text_2: "We use `{or}` to see {if} one our of two things is the case.\n"
                example_code_2: "```\ndrinks = {ask} 'What would you like to drink?'\n{if} drinks {is} 'water' {or} drinks {is} 'juice'\n    {print} 'Thats a healthy choice'\n```\n"
                start_code: '# coloque o seu código aqui'
        description: Create your own virtual restaurant
        default_save_name: Restaurant
    fortune:
        description: Let Hedy predict the future
        levels:
            12:
                story_text: "## Fortune Teller\nIn this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "\n```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            5:
                example_code_2: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} you will win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\ngoodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!\nbadanswer {is} Bad luck! Try again!, Another person will win, You lose!\n{if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n\n## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "\n```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!\U0001F929' {else} {print} 'Bad luck! Someone {else} will win!\U0001F62D'\n```\n"
                story_text_2: "Replace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!\nOf course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.\nBut of course, still gives you a positive answer and the other players a negative one.\n"
                start_code: '# coloque o seu código aqui'
                story_text_3: "## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
            1:
                story_text: "## Cartomante\nVocê já foi a um parque de diversões e teve seu futuro previsto por uma cartomante? Ou você já jogou com uma bola oito mágica?\nEntão você provavelmente sabe que eles não podem prever seu futuro, mas ainda é divertido de jogar!\n\nNos próximos níveis, você pode aprender a criar sua própria máquina de adivinhação!\nNo nível 1 você pode começar de leve, deixando a Hedy se apresentar como uma cartomante e deixá-la repetir com {echo} as respostas dos jogadores.\nDessa forma:\n"
                example_code: "```\n{print} Olá, sou Hedy, a cartomante!\n{ask} Quem é você?\n{print} Deixe-me dar uma olhada na minha bola de cristal\n{print} eu vejo... eu vejo...\n{echo} Seu nome é\n```\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Desafio\nA Hedy agora apenas diz o seu nome. Você pode expandir o código para que a Hedy possa prever mais coisas sobre você?\nObviamente, a Hedy ainda não é uma vidente muito boa, pois ela só pode repetir as respostas que foram dadas pelos jogadores!\nDê uma olhada no nível 2 para melhorar sua cartomante.\n"
            10:
                example_code: "\n```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: We can also make a Harry Potter themed fortune teller.
                story_text: "## Fortune Teller\nIn this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code_2: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n{for} name in names\n    {print} name ' is placed in ' houses {at} {random}\n    {print} name ' is great at ' subjects {at} {random}\n    {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            8:
                story_text: "## Fortune Teller\nIn the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the repeat command.\nIn the next example you can have your fortune teller {ask} 3 questions and also print them!\n"
                example_code: "\n```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "## Fortune Teller\nIn this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "\n```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n\n## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question1` , `question2` and `question3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
            6:
                story_text: "## Fortune Teller\nIn this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n"
                example_code: "\n```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\n## Example Silly Fortune Teller\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# coloque o seu código aqui'
            4:
                story_text: "## Fortune Teller\nThis level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n"
                example_code: "\n```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            3:
                story_text: "## Fortune Teller\nIn the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                example_code: "\nIn this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n\n## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
        name: Fortune teller
        default_save_name: Fortune Teller
    haunted:
        name: Casa mal-assombrada
        levels:
            1:
                example_code: "```\n{print} Como eu cheguei aqui?\n{print} Lembro-me de meu amigo me dizendo para entrar na antiga mansão...\n{print} e de repente tudo ficou preto.\n{print} Mas como eu acabei no chão...?\n{print} Minha cabeça dói como se eu tivesse sido atingido por um taco de beisebol!\n{print} Que som é esse?\n{print} Oh não! Eu sinto que não estou sozinho nesta casa!\n{print} Eu preciso sair daqui!\n{print} Há 3 portas na minha frente..\n{ask} Qual porta devo escolher?\n{echo} eu escolho a porta\n{print} ...?\n```\n"
                start_code: '{print} Como eu cheguei aqui?'
                story_text: "## Casa mal-assombrada\nNesta aventura você está trabalhando para fazer um jogo no qual você tem que escapar de uma casa mal-assombrada escolhendo a porta correta.\nSe você escolher a porta certa, você sobreviverá, mas senão um monstro terrível pode...\n\nNo nível 1 começamos nosso jogo de casa mal-assombrada inventando uma história assustadora e perguntando ao jogador que monstro ele verá na casa mal-assombrada.\n"
                story_text_2: "## Desafio\nVocê pode terminar a história assustadora? Ou inventar sua própria história de casa mal-assombrada?\n"
            2:
                start_code: monstro1 {is} _
                story_text: "## Haunted House\nIn this haunted house you can choose your monsters with emojis. Of course you could also use words.\n\n```\nmonster1 {is} \U0001F47B\nmonster2 {is} \U0001F921\nmonster3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster1\n{print} You run into the other room, but a monster2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster3 attacks you!\n```\n"
                example_code: "```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                story_text_2: "## Challenge\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            14:
                story_text: "## Haunted House\nIn this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "\n```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# coloque o seu código aqui'
            3:
                story_text: "## Haunted house game\nIn the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                example_code: "\n```\n{print} Escape from the haunted house!\n{print} There are 3 doors in front of you...\nchoice {is} {ask} Which door do you choose?\n{print} You picked door ... choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} You see...\n{sleep}\n{print} monsters {at} {random}\n```\n\n## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                story_text_3: "## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\n{print} One of them contains _\n_\n```\n"
            16:
                story_text: "## Haunted House Game\nThis haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "\n```\nnumbers = [1, 2, 3]\ni = numbers[random]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# coloque o seu código aqui'
            11:
                story_text: "## Haunted House\nIn this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n"
                example_code: "\n```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            9:
                story_text: "## Haunted House\nIn this level you can use nesting, which allows you to make the haunted house even more interactive!\n"
                example_code: "\n```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n## Challenge\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
                start_code: "{print} 'Escape from the haunted house!'"
            5:
                example_code: "\n```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                story_text: "## Haunted House\nUp until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n"
                start_code: '# coloque o seu código aqui'
            4:
                story_text: "## Haunted house\nIn this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
        description: escape from the haunted house
        default_save_name: Casa mal-assombrada
    piggybank:
        name: Piggy Bank
        description: Count your pocketmoney!
        default_save_name: Piggy Bank
        levels:
            14:
                story_text: "## Piggybank\nIn this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "\n```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# coloque o seu código aqui'
            12:
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "\n```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n"
                start_code: '# coloque o seu código aqui'
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
        levels:
            14:
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "\n```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# coloque o seu código aqui'
    next:
        levels:
            3:
                story_text: "## What's next?\nIn this level you've been practising with variables, but maybe you've come across this mistake.\n\nTry to run this code:\n```\nname {is} Sophie\n{print} My name is name\n```\nOf course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`. \nIn the next level this problem is fixed by using quotation marks.\n"
                start_code: "{print} Let's go to the next level!"
            5:
                start_code: "{print} 'On to the next level!'"
                story_text: "## What's next?\nNow you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can {ask} guests what they would like to eat.\nWhat you can't yet do though, is calculate the price for everyone's dinner.\n\nThe next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.\nAnother option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.\nGo see for yourself in the next level!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
            11:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nMaybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.\nFrom the next level on you can use decimal numbers.\n\nAnother cool feauture in the next level is that you can use mulitiple words in a variable.\nFor intance, you could already do this...\n```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
                example_code: "```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
            12:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nIn the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:\n```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\nIn this system you have to give both the correct username and the correct password.\nIn the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!\nCheck it out!\n"
                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
            13:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nWith the program below you can calulate {if} you've passed a subject at school (so, a grade of six or higher).\nYou can see this code is extremely inefficient, du to the very long code in line 5.\nAll the different grades from 1 to 5 had to be programmed seperately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!\n```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
            15:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nIn the next level we will grow a bit more towards real Python code. thon code. You will also learn how to match two lists together.\nThis way you can program a code in which the correct animal is matched to the right sound.\nBecause the two codes below... Are obviously nonsense!\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
            16:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nIn the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.\nFor example in this code:\n```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = pizza\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\nIn this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible!\nSo check out the next level now!\n"
                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
            17:
                story_text: "## What's next?\nIn the next level you will learn a real Python way to use `{print}`.\n"
                start_code: "{print} 'Lets go to the next level!'"
            18:
                start_code: "{print} ('Bom trabalho!!!')"
                story_text: "## What's next?\nCongratulations! You have reached the last level of Hedy! But no worries, we are working very hard to create more levels and new adventures. So please come back later to check out the newest levels!\n"
            1:
                story_text: "## O que vem por aí?\nParabéns! Você chegou ao final do nível 1. Espero que você já tenha feito alguns códigos incríveis, mas a Hedy tem muito mais para descobrir.\n\nNo primeiro nível você deve ter notado que o comando `{echo}` pode salvar apenas um pouco de informação por vez.\nPor exemplo, na aventura do restaurante, você poderia usar {echo} para mostrar o que o cliente queria comer, ou o que ele queria beber, mas não ambos em uma frase.\n"
                start_code: "{print} Vamos lá!"
                example_code: "```\n{print} Bem-vindo ao Hedy's\n{ask} O que você gostaria de comer?\n{echo} Então você quer\n{ask} o que você gostaria de beber?\n{echo} Então você quer\n```\n"
                story_text_2: "Se o jogador digitar um hambúrguer e uma coca-cola, você não pode dizer \"então você gostaria de um hambúrguer e coca-cola\", mas você tem que fazer duas linhas separadas.\nAlém disso, o comando `{echo}` apenas repete a palavra no final da frase. Então você não pode dizer \"seu hambúrguer está chegando!\".\n\nIsso muda no nível 2. No nível 2, você aprenderá a trabalhar com variáveis, que permitem salvar várias informações e imprimi-las em qualquer lugar que desejar.\nAlém disso, você aprenderá a trabalhar com o comando `{at} {random}`, que pode ser usado para fazer jogos.\nEntão vamos para o próximo nível!\n"
            2:
                story_text: "## What's next?\nIn this level you've learned what a variable is and how you can use it to make your adventures more interactive.\nBut... that's not the only thing you can do with variables! You can also use variables to make lists.\nAnd you can even let Hedy pick a random word out of a list, which allows you to make real games!\nTake a quick look at the next level!\n"
                start_code: "{print} Let's go to the next level!"
            4:
                story_text: "## What's next?\nIn the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.\nBut it's not really interactive, the player doesn't have any influence on what happens in the game.\n\nIn the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.\nSo let's take a peak!\n\n```\npassword {is} {ask} 'What is the correct password?'\n```\n"
                start_code: "{print} 'Lets go to the next level!'"
            6:
                story_text: "## What's next?\n Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.\n For example {if} you want to program 'Happy Birthday'\n\n ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n\n ```\n That's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.\n"
                start_code: "{print} 'On to the next level!'"
                example_code: " ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n ```\n"
            7:
                story_text: "## What's next?\nNow you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.\nthe next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!\n\n```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
            8:
                story_text: "## What's next?\nGreat job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...\nGood news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.\n\nFor example:\n```\nanswer = {ask} 'Would you like to go to teh next level?'\n{if} answer {is} 'yes'\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\nIn this code Hedy will still say 'Your drink is on its way' even {if} you didn't even want to drink something! In the next level this will be fixed!\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
            9:
                story_text: "## What's next?\nYou're doing great! In this level we still face a small problem. You have learned to repeat lines, but what {if} you'd want to slightly change the line.\nFor example {if} you want to sing the song '{if} you're happy and you knwo it'\n\nIt would look like this:\n```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n\nIf you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.\nIn the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!\nPlease take a look!\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
            10:
                story_text: "## What's next?\nYou have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.\nIn Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!\n"
                start_code: "{print} 'Lets go to the next level!'"
            14:
                story_text: "## What's next?\nIn this game below a code has been made to make sure the player can play on as long as he/she wants...\nBut the code is ineffective and way too long. Also, what {if} the player wants to play 101 games instead of 100?\nYou can't play to infinity?\nIn the next level you will learn a command that makes all of this a lot easier!\n```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
        name: What's next?
        description: What's Next?
        default_save_name: next
    language:
        name: "Língua"
        description: "Practice words in a foreign language"
        default_save_name: "Language"
        levels:
            5:
                story_text: |
                    ## Learn a new language
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: "# coloque o seu código aqui"
            16:
                story_text: |
                    ## Learn a new language
                    Make your own program to practice your vocabulary in a new language.

                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: "# coloque o seu código aqui"
    secret:
        name: SuperSpy
        description: Make your own spy code
        default_save_name: language
        levels:
            12:
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '## coloque o seu código aqui'
            13:
                story_text: "## Superspy\nThe code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '## coloque o seu código aqui'
    tic:
        levels:
            14:
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                start_code: '## coloque o seu código aqui'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                start_code: '## coloque o seu código aqui'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '## coloque o seu código aqui'
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
            13:
                story_text: "## Tic Tac Toe\nIn this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## coloque o seu código aqui'
        name: Jogo da velha
        description: Play a game of Tic Tac Toe!
        default_save_name: Tic
    blackjack:
        default_save_name: Blackjack
        levels:
            17:
                start_code: '# coloque o seu código aqui'
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
        name: Blackjack
        description: Try to get as close to 21 as you can
    pressit:
        description: Try linking a keyboard key to a command!
        default_save_name: Pressit
        levels:
            5:
                story_text: "## Press it!\nIn the introduction you were also told about the new keyword ```pressed```! Using ```pressed```\ncan make coding much more interactive, and you can have live control of what is executed!\nIn the upcoming levels you will learn how ```pressed``` makes this possible and what uses ```pressed```\nhas.\nBesides printing text, there is a whole other variety of uses for ```pressed```\nFor example, you can also link turtle commands to keys! Try it!\n"
                example_code: "```\nif x is {pressed} forward 50\n```\n"
                story_text_2: "## If Else Pressed\nYou can also assign an else statement to ```pressed```. The else statement will be executed\nwhenever you press a key other than the key you assigned.\n"
                example_code_2: "```\nif y is {pressed} {print} 'Amazing! You pressed the y key!'\nelse {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# place your code here'
            6:
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\nprint 'press a to add, s to substract, d to divide, m to multiply'\nif a is {pressed} result = first + second\nif s is {pressed} result = first - second\nif d is {pressed} result = first / second\nif m is {pressed} result = first * second\nprint 'The answer is ' result\n```\n"
                story_text: "Did you know you can also make a calculator using ```pressed```?\nGive the calculator two numbers and press the m key to multiply.\nNow you don't have to bring your own!\nTry other keys and see what happens! Do you get a different result?\n"
                start_code: '# place your code here'
            7:
                story_text: "You might have tried it in level 5 and 6, pressing the key linked to ```pressed``` multiple\ntimes. If you did, you noticed that this did nothing. but now that you have learned about repeat, we\ncan press keys multiple times! Make the turtle walk forward!\n"
                start_code: '# place your code here'
                example_code: "```\nrepeat 3 times if x is {pressed} forward 15\n```\n"
            8:
                example_code: "```\n{if} x is {pressed}\n    {print} 'Only the cool kids press the x key.'\n{else}\n    {print} 'The adventurous kids press something else.'\n```\n"
                story_text: "## Press It!\nNow that you need to use indents for the {if} and {else} statements,\nyou will also have to indent code when using {pressed}! Don't worry,\nit works te same as with the other statements, see the example!\nPress another key instead of x and see what happens.\n"
                start_code: '# place your code here'
            9:
                story_text_2: "Besides counting, you can now also move the turtle in many more ways than only forward or backwards!\nTry making some figures by walking the turtle around!\n"
                story_text: "Now that you know how to nest multiple statements, you can also do this with {pressed}!\nBy nesting a pressed in a {repeat} loop, you can repeatedly press buttons and make something happen.\nNow we know you could do this before, but by using the indents you have much more overview!\nTry it counting to 5, for example!\n"
                example_code_2: "```\nstepsize = 25\nleft = -90\nright = 90\naround = 180\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
                start_code: '# place your code here'
                example_code: "```\ntotal = 1\n{repeat} 5 times\n    {if} x is {pressed}\n        {print} total\n        {print} 'keep pressing!'\n        total = total + 1\n```\n"
            10:
                story_text: "In this level you can make the turtle draw you a figure. The turtle is raring to go.\nGive the turtle the starting signal by pressing the x or y key on your keyboard.\nCan you let the turtle draw you another figure?\n"
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} -90\n{if} y is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} 90\n```\n"
                start_code: '# place your code here'
            11:
                example_code: "```\nleft = -90\nright = 90\naround = 180\nfor counter in range 1 to 15\n    stepsize = counter * 5\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
                story_text: "Now that you have learned of the ```for ... in range ... to ...``` rule, you can use it for ```pressed```\ntoo! for example, try moving the turtle! The turtle grows everytime you press a linked button.\nThis way the turtle can move further every step!\n"
                start_code: '# place your code here'
            12:
                story_text: "Are you familiar with videogames? You walk into tall grass and are suddenly approached by\na very suspicious mouse. What will you do?\nIn this level we will make a small menu with different kinds of options.\nStoring text into a variable is quite handy for repeated uses.\nOption, I choose you!\n"
                example_code: "```\nchoose = 'You chose option: '\nprint 'A wild mouse appeared!'\nprint 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n is {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    sleep\n    {print} 'Congratulations you did it!'\n{if} c is {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    sleep\n    {print} 'The mouse got scared and ran away!'\n{if} b is {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r is {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "Now that you learned how to use ```and``` and ```or```, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump if he turns left and right first!\n"
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        looked_left = 1\n    {if} d is {pressed}\n        turn right\n        looked_right = 1\n    {if} p is {pressed}\n        {if} looked_left is 1 and looked_right is 1\n            forward 40\n            looked_left = 0\n            looked_right = 0\n```\n"
                start_code: '# place your code here'
            14:
                story_text: "Now that you learned how to use operators, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump every 5 steps or every 4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "Now that you have learned about the ```while``` loops, you can start using it on the turtle!\nThe turtle is now only allowed to take only 15 steps or turn 15 times, before he gets tired!\nTry to get as far as possible before the turtle gets tired! You can use your superjump after 2 turns\nor 5 steps.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\nwhile tired_in > 0\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "Lets move a little with a game of Twister!\nWhen everyone is ready, press the x key for the next move!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\nrepeat 20 times\n    l = limbs[random]\n    c = colours[random]\n    {if} x is {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
                start_code: '# place your code here'
            17:
                story_text: "Now that you learned how to use ```elif```, we can use it with ```pressed```too! Be aware,\n```elif ... is pressed ``` is not possible! That is why we are going to nest some ```elif```\nstatements into the ```pressed``` options. We also had to add ```:``` to the code to make\neverything work! imagine the turtle being able to do a superjump forward. by pressing ```p``` the\nturtle can make a superjump! However, the turtle can only do this jump every 5 steps or every\n4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}:\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}:\n        turn around\n    {if} a is {pressed}:\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}:\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}:\n        {if} jumptime <= 0 or spins <= 0:\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            print \"you need to take more steps or turns before you can superjump!\"\n```\n"
                start_code: '# place your code here'
        name: Press it!
