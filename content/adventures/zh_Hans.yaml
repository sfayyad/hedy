adventures:
    default:
        name: "介绍"
        description: "关卡说明"
        default_save_name: "介绍"
        levels:
            1:
                story_text: |
                    ## 欢迎来到海迪！
                    在第1关，你可以使用命令`{print}`、`{ask}`和`{echo}`。
                    在编程栏里面输入你的代码。或者按下代码范例框里面的绿色按钮，它会为你输入代码!
                    你可以用左边编程栏下方绿色的 “运行程序” 按钮测试你的代码。

                    你可以使用`{print}`命令将文本打印到屏幕上。

                start_code: "{print} 你好，世界！"
                example_code: "```\n{print} 你好！\n{print} 欢迎来到海迪！\n```\n"
                story_text_2: "你还可以使用`{ask}`要求输入内容，然后使用`{echo}`命令复述输入的内容。\n"
                example_code_2: "```\n{ask} 你叫什么？\n{echo} 你好，\n```\n"
                story_text_3: "那么开始吧！ 不知道该做些什么？你可以下面的标签页中找到要构建的程序的灵感。\n"
            2:
                story_text: |
                    ## 变量
                    在第2级中，我们学习了两个新的命令：`{is}`和`{sleep}`。
                    你可以用`{is}`命名一个词，这叫变量。在这个例子中，我们定义了一个变量“名字”和另外一个变量“年龄”。你可以在代码中的任何地方使用“名字”这个词，它将被“海迪”替换，就像这样：

                    这样，你就不再需要`{echo}`命令了!
                start_code: "{print} 你好世界!"
                example_code: "```\n名字 {is} 海迪\n年龄 {is} 15\n{print} 名字 今年 年龄 岁\n```\n"
                example_code_2: "```\n回答 {is} {ask} 你叫什么名字？\n{print} 你好，回答\n```\n"
                story_text_2: "`{print}` 仍然可以正常工作，但 `{ask}` 命令已更改。 您还需要在 `{ask}` 命令中使用变量。 它看起来像这样：\n"
                story_text_3: "这个关卡的另一个新命令是`{sleep}`，它会暂停你的程序一秒钟。 如果您在 {sleep} 命令后面键入一个数字，程序会暂停该秒数。\n"
                example_code_3: "```\n{print} 我最喜欢的颜色是...\n{sleep} 2\n{print} 绿色！\n```\n"
            3:
                story_text: |
                    ## 创建一个列表！
                    在第3级你也可以创建一个列表。你可以让计算机从列表中随机选择一些项目。您可以使用 `{at} {random}` 执行此操作。
                start_code: "{print} 你好世界!"
                example_code: "```\n动物们 {is} 狗，猫，袋鼠\n{print} 动物们 {at} {random}\n```\n"
                story_text_2: 您还可以使用 `{add}` 将项目添加到列表中，并使用 `{remove}` 删除项目。
                example_code_2: "```\n动物们 {is} 狗，猫，袋鼠\n{add} 企鹅 {to_list} 动物们\n{remove} 猫 {from} 动物们\n{print} 动物们 {at} {random}\n```\n"
            4:
                start_code: "{print} '你好世界'"
                story_text: |
                    ## “引号”
                    在第4级目标中 `{ask}` 和 `{print}` 已更改。

                    你必须将要打印的文本放在单引号之间。

                    这很有用,因为现在你可以打印所有你想要打印的词汇了. 你也可以打印那些用 `{is}`命名并保存的词汇.

                     大多数编程语言在打印时也使用引号，所以我们也距离真正的编程更近了一步!
                example_code: "```\n{print} '从现在开始你们需要使用引号！'\n答案 {is} {ask} '从现在开始我们需要使用什么？'\n{print} '我们需要使用 ' 答案\n```\n"
                story_text_2: "## 冒险越来越难了\n在接下来的标签中，冒险现在变得越来越困难。\n所以最好从左边开始，向右进行，这样才能得到越来越多的挑战。\n"
            5:
                start_code: |-
                    name {is} {ask} '你的名字是什么?'
                    {if} name {is} 海迪 {print} '酷!' {else} {print} '呵呵'
                story_text: |
                    ## 如果（那么）......否则.....
                    `{if}`是第五级别的新东西！使用 `{if}`，你可以在两个不同的选项之间进行选择。
                    如果您输入海迪作为名字，那么此代码会打印出“赞！” 如果您输入其他内容，那么此代码会打印出“嘁！”这个词。
                    `{ask}` 和 `{print}` 的使用方法和在第 4 级中一样。
                example_code_2: "```\n名字 {is} {ask} '你叫什么名字？'\n{if} 名字 {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
                example_code: "```\n名字 {is} {ask} '你叫什么名字？'\n{if} 名字 {is} Hedy {print} '赞' {else} {print} '嘁!'\n```\n"
                story_text_3: "## 列表\n我们现在可以使用 `{in}` 命令去检查某个东西是否在列表中。\n如果你选择绿色或黄色，这段代码会打印“好看”，否则则会说“哦”。\n"
                example_code_3: "```\n好看的颜色 {is} 绿色，黄色\n颜色 {is} {ask} '你最喜欢的颜色是什么？'\n{if} 颜色 {in} 好看的颜色 {print} '好看！'\n{else} {print} '哦'\n```\n"
                story_text_2: "有`{if}`的代码中有些时候会很长，一行代码放不下。 <br> 你可以把代码分成两行，像这样以`{else}`开始第二行：\n"
            6:
                start_code: "{print}'5乘以5等于 5 * 5'"
                story_text: |
                    ## 1 + 1
                     这一级我们会学到一些新内容：现在你可以做计算啦。

                     加法运算很简单，和数学公式里一样，比如`5 + 5`。减法运算也一样，就是`5 - 5`。

                     乘法运算有点不同，因为键盘上面没有乘法符号。你可以找一下，真的没有！
                     所以我们用数字8上面的星号表示乘法： `5 * 5`。把它读作“5乘5”会有利于你记住它。
                example_code: "```\n{print} '5 加 5 是 ' 5 + 5\n{print} '5 减 5 是 ' 5 - 5\n{print} '5 乘 5 是 ' 5 * 5\n```\n"
                story_text_2: "我们还改变了在变量中存储词语的方式！现在，要在变量中保存名字或者数字时，你可以用`=`代替`{is}`，像这样：\n"
                example_code_2: "```\n名字 = 海迪\n答案 = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} '海迪很好玩！'"
                story_text: |
                    ## 第7级！第7级！
                    在第7级的学习内容里面增加了`{repeat}` 循环命令。   `{repeat}` 循环语句可以用来多次执行一段代码。
                example_code: "```\n{repeat} 3 {times} {print} '海迪很好玩！'\n```\n"
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} '大家好'
                        {print} '这句话将被打印5次'
                story_text: |
                    ## 缩进
                    `{ask}` 和 `{print}`  的使用方法依旧保持不变。但是 `{if}`，`{else}` 条件语句和 `{repeat}` 循环语句已经改变了！
                    你现在可以执行一组代码，但你必须使用*缩进*。
                    缩进的意思是在每一行代码开头空四格。即使你的代码块只包括一行代码，你也必须缩进。
                example_code: "`{repeat}`命令现在是这样用的：\n```\n{repeat} 5 {times}\n    {print} '大家好'\n    {print} '这些都会重复5遍'\n```\n\n`{if}`和`{else}`命令现在是这样用的：\n```\n名字 {is} {ask} '你叫什么？'\n{if} 名字 {is} 海迪\n    {print} '你好海迪'\n    {print} '你可以玩你的电脑了！'\n{else}\n    {print} '私闯民宅！'\n    {print} '你不能使用这台电脑！'\n```\n"
            9:
                start_code: |-
                    {repeat} 3 {times}
                        食物 = {ask} '你想吃什么？'
                        {if} 食物 {is} 披萨
                            {print} '好啊！'
                        {else}  
                            {print} '披萨更好吃'
                story_text: |
                    ## 现在可以一起用啦！
                    在这个级别中，你不仅可以一起使用`{if}`条件语句和`{repeat}`循环语句编写多行代码，还可以将它们嵌套在一起使用！
                    在范例中，你可以在 `{repeat}` 命令中嵌入一个 `{if}` 命令。反之亦然，你可以在 `{if}`命令中嵌入一个 `{repeat}` 命令。当然，你也可以在一个 `{if}`条件语句中嵌入一个`{if}`条件语句，在一个`{repeat}`循环语句中嵌入一个`{repeat}`循环语句。
                    试试吧！
                example_code: "```\n{repeat} 3 {times}\n    食物 = {ask} '你想吃什么？'\n    {if} 食物 {is} 披萨\n        {print} '好啊！'\n    {else}\n        {print} '披萨更好吃'\n```\n"
            10:
                start_code: |-
                    动物 {is} 狗，猫，泡泡鱼
                    {for} animal {in} 动物
                      {print} '我爱 ' animal
                story_text: |-
                    ## 对我的列表中的每一样东西……
                    在这一关中，我们要学习一个名为`{for}`的命令。你可以通过 `{for}` 一个列表，并使用其中所有元素。
                    同 `{repeat}` 和 `{if}` 一样，`{for}` 会创建一个块，所以块中的每一行都需要以空格开头。
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
            11:
                start_code: |-
                    {for} 计数器 {in} {range} 1 {to} 5
                        {print} 计数器
                story_text: "## 循环！\n`{print}` 的使用方法照旧不变但是我们增加了`{for}`的新形式。 你现在可以在你的程序中编写`{for} counter {in} {range} 1 {to} 5` 和使用 `counter`了。\n试试吧，看看会发生什么！ 记住在`{for}` and `{if}` 语句后使用缩进(这意味着以四个空格开始一个句子)"
                example_code: "```\n{for} 计数器 {in} {range} 1 {to} 5\n    {print} 计数器\n```\n"
            12:
                start_code: "{print} '十进制数字现在需要加上小数点'\n{print} 2.5 + 2.5"
                story_text: "## 数字和文本\n**十进制数**\n到目前为止，海迪不允许出现1.5这样的小数，但现在我们允许了。请注意，计算机使用`.`来表示小数点。"
                example_code_5: "```\n分数 = 25\n{print} '你得了' 分数\n```\n"
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**所有文本都要放在引号之间**\n这一关，在用 `=` 储存文本时，你需要使用引号：\n"
                example_code_2: "```\n名字 = '海迪机器人'\n{print} '你好，' 名字\n```\n"
                story_text_3: "**列表里的东西也需要引号**\n列表里的也是文本，所以他们也要引号。注意列表里的每一项都要加引号。\n这样就能把两个词保存为一项，比如 '你好，世界'\n"
                example_code_3: "```\n超级英雄 = '蜘蛛侠', '蝙蝠侠', '钢铁侠'\n{print} 超级英雄 {at} {random}\n```\n"
                story_text_4: "**在`{if}`中比较的所有文本也都需要引号**\n"
                example_code_4: "```\n名字 = {ask} '你叫什么？'\n{if} 名字 = '海迪机器人'\n    {print} '你好啊！'\n```\n"
                story_text_5: "**数字不需要引号**\n对于数字，你不需要在`=`中加上引号：\n"
                story_text_6: "**数学与文本**\n在此级别中，还允许将 + 号与文本一起使用。例如："
                example_code_6: "```\na = '你好 '\nb = '世界！'\n{print} a + b\n```\n"
            13:
                start_code: |-
                    名字 = {ask} '你叫什么名字?'
                    年龄 = {ask} '你的年龄是多少？ '
                    {if} 名字 {is} '海迪' {and} 年龄 {is} 2
                        {print} '你才是真正的海迪！'
                story_text: "## 且…或…？ \n我们将要学习 `{and}` 和 `{or}` ！如果你想判断两个语句，你不需要使用两个{if}语句，而是可以使用`{and}`和`{or}`。如果你用了`{and}`，那么`{and}`左右两边的语句都需要为真。我们也可以使用`{or}`，`{or}`左右两边的语句中只需要有一个是正确的。"
                #16:
                #    start_code: |-
                #        # 这是一个要问几个数学问题的程序
                #        for i in range(1,10):
                #            # 我们将要问一些有关五五乘法表的问题
                #            answer is input('' i ' 乘以 5等于几?')
                #            # 我们判断答案是否正确
                #            correct_answer is i * 5
                #            if answer is correct_answer:
                #                print(answer ' 是正确的')
                #            else:
                #                print('错了, 应该是: ' i*5)
                #    story_text: "当你在编写更大的程序时, 你将需要找到一种方法来记住每一段代码的作用. 我们使用 comments(注释)来实现这一点. 注释的格式如下:\n ` # 这是一个注释`. 在 # 后面的所有内容对代码来说都是不可见的."
                #    commands:
                #    -   name: "Comment注释"
                #        explanation: "我们可以把注释放在任何我们想放的地方."
                #        example: "# 这是一个注释"
                #        demo_code: |-
                #            # 这段代码是为了打印你好
                #            # 这是用海迪编写的
                #            # 除了打印 "你好"，它什么也没做
                #            print('你好!')
                #
                example_code: "```\n名字 = {ask} '你叫什么名字?'\n年龄 = {ask} '你的年龄是多少？ '\n{if} 名字 {is} '海迪' {and} 年龄 {is} 2\n    {print} '你才是真正的海迪！'\n```\n"
            14:
                start_code: |-
                    年龄 = {ask} '你今年几岁了？'
                    {if} 年龄 < 13
                        {print} '你比我年纪小！'
                    {else}
                        {print} '你比我年纪大！'
                story_text: "## 大，比较大，最大！\n我们将要学习更多新的内容! 你可能在数学课上已经学过这些内容了, 那就是小于号 `<` 和大于号 `>`。\n小于号 `<` 用来判断第一个数字是否小于第二个数字, 比如 年龄 `<` 12 判断是否年龄小于12。\n如果你想判断第一个数字是否小于或等于第二个数字，你可以使用`<=`，例如年龄`<=` 11。\n大于号`>` 用来判断第一个数字是否大于第二个数字, 比如 点数 `>`10判断是否点数大于10。\n如果你想判断第一个数字是否大于或等于第二个数字，你可以使用 `>=`, 例如 点数 `>=`= 11。\n你可以在一个`{if}`条件语句中使用这些比较运算符号，如下所示：\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "从这一关开始，如果你想精确比较，你需要写两个等号。大部分编程语言都是这样的：\n"
                example_code_2: "```\n名字 = {ask} '你叫什么？'\n{if} 名字 == '海迪'\n    {print} '你很酷！'\n```\n"
                story_text_3: "你也可以像这样，用 `!=`比较两个东西是否*不*相等：\n"
                example_code_3: "```\n名字 = {ask} '你叫什么？'\n{if} 名字 != '海迪'\n    {print} '你不是海迪'\n```\n"
            15:
                start_code: |-
                    答案 = 0
                    {while} 答案 != 25
                        答案 = {ask} '5乘以5等于几?'
                    {print} '已经给出了一个正确的答案'
                story_text: "## 更多的循环！\n我们将要学习一个新的循环, 就是`{while}` 循环！只要语句为真/有效，我们就不停的执行循环语句！\n所以别忘了改变循环语句中的变量值。\n\n因此在范例代码中，我们一直不停的执行循环语句直到一个正确的答案被给出。 \n如果正确答案一直没有被给出, 这个循环语句就不会结束!"
                example_code: "```\n答案 = 0\n{while} 答案 != 25\n    答案 = {ask} '5乘以5等于几？'\n{print} '已经给出了一个正确答案'\n```\n"
            16:
                start_code: |-
                    水果 = ['苹果', '香蕉', '樱桃']
                    {print} 水果
                story_text: "## 越来越像真正的代码了！\n我们将用Python的方式来制作列表，把列表(list)的内容用中括号括起来！我们现在也需要把列表里面的每一个元素都用单引号标示清楚，就像我们在前几级学到的那样。\n你也可以使用中括号来指出列表中的某个位置。"
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} '无论你是否准备好了，我都会来的!'
                story_text: "## 否则如果\n现在我们将对缩进进行一些改变。每当我们需要用缩进时，我们都需要在缩进前的那一行使用冒号`:` 。\n\n在此级别中，你还可以使用新命令：`{elif}`。 `{elif}` 是 {else} {if} 的缩写，当您想要在3 个（或更多！）选项中做出选择的时候需要用到它。\n看看吧！"
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
            18:
                start_code: "名字 = '海迪'\n{print}('我的名字是', 名字)"
                story_text: "## 最后一级！\n我们到达了真正的 Python 代码！这意味着从现在开始我们需要在 {print} 和 {range} 后使用括号。"
                example_code: "```\n{print}('你好！')\n{for} i {in} {range}(1, 10):\n    {print}('这是行'，i)\n```\n"
                story_text_2: 如果你想打印多个东西，你需要用逗号把它们分开。
                example_code_2: "```\n温度 = 25\n{print}('外面是', 温度, '度')\n```\n"
                story_text_3: "## 输入\n我们获得Python代码前的最后一步，是把`{ask}`换成`{input}`。"
                example_code_3: "```\n{print}('我叫海迪！')\nname = {input}('你叫什么？')\n{print}('那么你叫', name)\n```\n"
    story:
        levels:
            2:
                start_code: '{print} 你的故事'
                story_text: "## 故事\n在第2关，你可以让你的故事更有趣些。你的主人公的名字可以放在句子里的任何位置了。\n\n为此你确实需要多写一点代码。你需要先给主人公一个名字。\n\n然后就可以把名字放在句子里的任何位置。\n"
                example_code: "```\n名字 {is} {ask} 主角的名字是什么？\n{print} 名字 现在要去森林里散步了\n{print} 名字 有点害怕\n{print} 突然，他听到一个疯狂的声音……\n{sleep}\n{print} 名字 害怕这个森林里面闹鬼\n```"
            7:
                start_code: "{repeat} 5 {times} {print} '救命！'"
                story_text: "## 故事\n在故事里，有人会重复同一个词好几次。比如有人在呼救或者唱歌。\n在这一关，你可以通过`{repeat}`在故事中加入这种重复。\n"
                example_code: "```\n{print} '王子不断地呼救'\n{repeat} 5 {times} {print} '救命啊！'\n{print} '为什么没有人来救我？'\n```\n"
            5:
                start_code: "{print} '你的故事从这里开始！'"
                story_text: "## 故事\n在这一关，你可以写出多种结局，这会让你的故事更有趣。\n\n设想你的故事有两种结局，比如：\n\n- 公主徒步穿过森林\n- 她遇上了怪物\n\n- 好结局：她拔出剑，怪物立即逃跑了\n- 坏结局：怪物把公主吃掉了\n\n和之前几关一样，你仍然可以输入变量。你只要将输入和`{if}`结合起来使用，就能完成整个程序了！\n"
                example_code: "```\n名字 {is} {ask} 谁在森林里行走？\n{print} 名字 '走在森林里'\n{print} 名字 '遇到了一头怪物'\n结局 {is} {ask} '你想看好结局还是坏结局？'\n{if} 结局 {is} 好 {print} 名字 '拔出了剑，怪物立即逃跑了'\n{else} {print} '怪物吃掉了' 名字\n```\n"
            3:
                story_text: |
                    ## 故事
                    在第3关，你可以让你的故事更有趣些。你可以随机选择怪物、动物或者其它障碍，比如：

                example_code: |
                    ```
                    动物们 {is} 🦔, 🐿, 🦉, 🦇
                    {print} 他现在听到了一个的声音 动物们 {at} {random}
                    ```
                story_text_2: |
                    你的故事也用得上`{add}`命令。

                example_code_2: |
                    ```
                    {print} 他听到一个声音
                    动物们 {is} 🐿，🦔，🦇，🦉
                    某动物 {is} {ask} 你觉得它是什么？
                    {add} 某动物 {to_list} 动物们
                    {print} 它 是 动物们 {at} {random}
                    ```
                story_text_3: |
                    这是一个在故事里使用`{remove}`命令的例子
                example_code_3: |
                    ```
                    {print} 他的背包太重了。
                    {print} 包里有一瓶水，一个手电筒和一块砖。
                    包 {is} 水, 手电筒, 砖
                    扔掉的 {is} {ask} 他应该扔掉哪个东西？
                    {remove} 扔掉的 {from} 包
                    ```
                start_code: "{print} 你的故事"
            13:
                story_text: "## 故事\n通过使用`{and}`和`{or}`命令，你可以把故事写得更短。比如这个龙的故事。\n"
                example_code: "```\n剑 = '丢失'\n游戏 = '进行中'\n{print} '我们的英雄走在森林中'\n{print} '遇到了两条岔路'\n{for} i {in} {range} 0 {to} 2\n    {if} 游戏 {is} '进行中'\n        路 = {ask} '她选了哪条路？'\n        {if} 路 {is} '左' {and} 剑 {is} '找到'\n            {print} '我们的英雄遇上了一条龙！'\n            {print} '幸运的是她带着剑，可以消灭这个怪兽！'\n            游戏 = '结束'\n        {if} 路 {is} '左' {and} 剑 {is} '丢失'\n            {print} '我们的英雄找到了一条龙，但是她手里没有武器！'\n            {print} '我们的英雄被龙打败了……'\n            {print} '再试一次'\n            游戏 = '结束'\n        {if} 路 {is} '右' {and} 剑 {is} '找到'\n            {print} '你已经找打了剑。这里什么都没有。'\n            {print} '她走了回去'\n        {if} 路 {is} '右' {and} 剑 {is} '丢失'\n            {print} '我们的英雄找到了一把剑'\n            {print} '它可能派上大用场'\n            剑 = '找到'\n```\n"
                start_code: '# 在这里写你的代码'
            1:
                story_text: "## 创作故事动画\n在第1级中你可以自己添加角色创作一个有不同主角的故事动画。。\n\n在第一行，使用`{ask}`，问谁是故事的主角。\n\n在这第一行之后，如果需要打印这个句子，就用`{print}`开始这个句子。\n如果你想让你的主角的名字出现在句子的末尾，你可以用`{echo}`。\n"
                example_code: "```\n{ask} 这个故事的主人公是（谁）\n{print}主人公现在要到森林里去散步\n{echo} 他有点害怕，\n{print} 他听到到处都有疯狂的声音\n{print} 他害怕这是一片闹鬼的森林\n```\n"
                start_code: '{print} 你的故事从这里开始'
                story_text_2: "## Challenge\nCan you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?\n"
            10:
                story_text: "## 故事\n在这一关，你可以在你的故事里使用 {for} 命令。这样很容易就能写出儿童书里的“棕熊，棕熊，你看到了什么”的故事。\n"
                example_code: "```\n动物们 = 红鸟, 黑羊, 绿蛙, 黄鸭, 小孩\n{print} '棕熊'\n{print} '棕熊'\n{print} '你看到了什么？'\n{for} 动物 {in} 动物们\n    {print} '我看到' 动物 '在看我'\n    {print} 动物\n    {print} 动物\n    {print} '你看到了什么？'\n{print} '我看到所有动物们都在看我！'\n```\n"
                start_code: '# 在这里写你的代码'
            12:
                story_text: "## 故事\n在此级别中，您可以使用引号将多个单词保存在一个变量中。"
                example_code: "```\n名字 = '英国女王'\n{print} 名字'正在吃一块蛋糕，突然......'\n```\n"
                start_code: '# 在这里写你的代码'
            9:
                story_text: "## 故事\n在这一级，你可以通过嵌套，在一个 `{if}`，`{repeat}` 或 `{for}`命令里包含其它 `{if}`，`{repeat}`或`{for}` 命令。这让你有了很多选择，极大地提高了故事地互动性。\n"
                example_code: "```\n{print} '罗宾来到了市区'\n地点 = {ask} '罗宾是要去商店还是回家？'\n{if} 地点 {is} 商店\n    {print} '她走进了商店。'\n    {print} '罗宾发现了一本有趣的书'\n    书 = {ask} '罗宾买了这本书吗？'\n    {if} 书 {is} 是\n        {print} '罗宾买了这本书，回家了'\n    {else}\n        {print} '罗宾离开商店，回家了'\n{else}\n    {print} '罗宾回了家'\n```\n"
                story_text_2: "上面的示例非常简单，但是通过嵌套 {if}，您可以真正完善您的代码并将您的故事变成一个真正的游戏。看看这个例子！"
                example_code_2: "## Elaborate code\n```\n剑 = 丢失\n游戏 = 进行中\n{print} '我们的英雄走在森林中'\n{print} '遇到了两条岔路'\n{repeat} 2 {times}\n    {if} 游戏 {is} 进行中\n        路 = {ask} '她选了哪条路？'\n        {if} 路 {is} 左\n            {if} 剑 {is} 找到\n                {print} '我们的英雄遇上了一条龙！'\n                {print} '幸运的是她带着剑，可以消灭这个怪兽！'\n                游戏 = 结束\n            {else}\n                {print} '我们的英雄找到了一条龙，但是她手里没有武器！'\n                {print} '我们的英雄被龙打败了……'\n                {print} '再试一次'\n                游戏 = 结束\n        {if} 路 {is} 右\n            {if} 剑 {is} 丢失\n                {print} '我们的英雄找到了一把剑'\n                {print} '它可能派上大用场'\n                剑 = 找到\n            {else}\n                {print} '你已经找打了剑。这里什么都没有。'\n                {print} '她走了回去'\n```\n"
                start_code: '# 在这里写你的代码'
            8:
                story_text: "## 故事\n在这一关，你可以在{if}命令里使用多行代码，这样就能升级你的好结局和坏结局了！\n"
                example_code: "```\n{print} '哦，不！霸王龙来了！'\n结局 = {ask} '你想要好结局还是坏结局？'\n{if} 结局 {is} 好\n    {print} '理查德在千钧一发之际跳回了时光机里！'\n    {print} '迈克尔输入了指令，然后……'\n    {print} '\U0001F4A5刷！\U0001F4A5'\n    {print} '他们回到了他们的车库'\n{else}\n    {print} '迈克尔大喊：理查德快回来！跑快点！'\n    {print} '但是理查德太慢了……'\n    {print} '霸王龙追上来，一口把他吞了！\U0001F996'\n```\n"
                start_code: '# 在这里写你的代码'
            4:
                story_text: "## 故事\n你可能注意到了，在之前的关卡里还有个问题。你有没有试过打印“名字”这个词？\n在这一关里你可以解决这个问题。你必须给所有要打印的东西加上引号。\n"
                example_code: "```\n名字 {is} 汉斯\n{print} '主人公 的 名字 是' 名字\n{print} 名字 '正准备 走进 树林'\n{print} 名字 '有点害怕'\n动物们 {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} '他听到了一个' 动物们 {at} {random} '的声音'\n{print} 名字 '担心 这片森林 闹鬼'\n```\n"
                start_code: "{print} '你的故事会打印在这里！'"
            15:
                story_text: "## 故事\n运用`{while}`循环能让你的故事更有趣。比如，用`{while} game {is} 'on'``可以让游戏一直进行到结束为止。\n或者用{is}`{while} sword {is} 'lost'`来要求玩家必须先找到剑，才能继续游戏。\n"
                example_code: "```\n钥匙 = '丢失'\n{print} '你站在你的花园里，你的钥匙丢了。'\n{print} '你想去哪里找它们？'\n{print} '你可以选择：树、花坛、石头、邮筒'\n{while} 钥匙 == '丢失'\n    位置 = {ask} '你想去哪里找？'\n    {if} 位置 == '花坛'\n        {print} '它们在这里！'\n        钥匙 = '找到'\n    {else}\n        {print} '没有，他们不在'位置\n{print} '现在你可以进入房子了！'\n```\n"
                start_code: '# 在这里写你的代码'
        name: 故事
        description: 故事
        default_save_name: 故事
    songs:
        levels:
            8:
                story_text: "## 歌曲\n在前面的关卡，你编程了“99瓶啤酒”。你写了一段，然后需要复制99次。在第7关，你只需要简单地增加一行代码，就能重复这首歌99次！\n"
                example_code: "```\n段 = 99\n{repeat} 99 {times}\n    {print} 段 '瓶啤酒在墙上'\n    {print} 段 '瓶啤酒'\n    {print} '取下一瓶传下去'\n    段 = 段 - 1\n    {print} 段 '瓶啤酒在墙上'\n```\n"
                start_code: '# 在这里写你的代码'
            6:
                story_text: "## 歌曲\n歌曲中通常包含大量重复。有时重复是基于计数的。\n比如那首著名的“99瓶啤酒”（北美民谣）。你可以用一点数学知识编程出这首歌。\n"
                example_code: "```\n瓶 = 99\n{print} 瓶 '瓶啤酒在墙上'\n{print} 瓶 '瓶啤酒'\n{print} '取下一瓶传下去'\n瓶 = 瓶 - 1\n{print} 瓶 '瓶啤酒在墙上'\n```\n\n你可以通过反复复制粘贴来重复第2行到第6行。\n"
                start_code: "{print} '鲨鱼宝宝'"
                story_text_2: "## 5 Little Monkeys jumping on the bed\nThis children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\nprint number ' little monkeys jumping on the bed'\nprint 'One fell off and bumped his head'\nprint 'Mama called the doctor and the doctor said'\nprint 'NO MORE MONKEYS JUMPING ON THE BED!'\nsleep\n```\n"
            12:
                story_text: "## 唱一首歌吧!\n在这首歌中，我们可以使编程变得更加容易 '{if} 你很快乐，你意识到了，拍拍你的手'。因为我们可以把所有的动作放在一个变量中，看看吧。\n"
                example_code: "```\n一组动作 = '拍拍手', '跺跺脚', '喊万岁!'\n{for} 动作 {in} 一组动作\n    {for} i {in} {range} 1 {to} 2\n        {print} '如果你很高兴，你意识到它。'\n        {print} 动作\n    {print} '如果你很高兴，你意识到它，你真的想表现出来'\n    {print} '如果你快乐并意识到它'\n    {print} 动作\n```\n"
                start_code: '# 把你的代码放在这里'
            11:
                story_text: "## 歌曲\n在这一级，你可以使用`{for} i {in} {range}`命令使用计数来创作歌曲。\n"
                example_code: "## 5只小猴子们\n```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' 小猴子们在床上跳来跳去的。'\n    {print} '有一只掉下来，撞到了头'\n    {print} '妈妈叫来了医生，医生说'\n    {if} i {is} 1\n        {print} '把这些猴子们直接放到床上去！'\n    {else}\n        {print} '不再有猴子们在床上跳来跳去了！'\n```\n"
                start_code: '# 把你的代码放在这里'
            10:
                story_text: "## 歌曲\n在这一级中，你可以轻松地制作儿童歌曲《五只小猴子》。你能完成最后的合唱吗？\n你也可以只用6行就完成整首鲨鱼宝宝的歌曲（包括鲨鱼家族中所有其他种类的鲨鱼）！\n或者你可以用所有不同的动物制作《老麦当劳》。\n"
                example_code: "## 5只小猴子们在上跳来跳去\n```\n猴子们=5, 4, 3, 2\n{for} 猴子 {in} 猴子们\n    {print} 猴子 ' 小猴子们在床上跳来跳去'\n    {print} '有一只掉下来，撞到了头'\n    {print} '妈妈打电话给医生，医生说'\n    {print} '不能再有猴子们在床上跳了！'\n```\n\n## 鲨鱼宝宝\n```\n鲨鱼们=宝宝，妈妈，爸爸，奶奶，爷爷\n{for} 鲨鱼 {in} 鲨鱼们\n    {print} 鲨鱼 \"tutututudu\"\n    {print} 鲨鱼 \"tutututudu\"\n    {print} 鲨鱼 \"tutututudu\"\n    {print} 鲨鱼\n```\n## 老麦当劳\n```\n动物们=猪, 狗, 牛\n{for} 动物 {in} 动物们\n    {if} 动物 {is} 猪\n        声音 = 哼哼\n    {if} 动物 {is} 狗\n        声音 = 汪汪\n    {if} 动物 {is} 牛\n        声音 = 哞\n    {print} '老麦当劳有一个农场'\n    {print} '咦啊咦啊欧！'\n    {print} '在那个农场里，他有一只' 动物\n    {print} '咦啊咦啊欧！'\n    {print} '这里有一个'声音'的声音'\n    {print} '和一个'声音'的声音那里'\n    {print} '这里有一个'声音\n    {print} '那里有一个'声音\n    {print} '到处都是一个'声音\n```\n"
                start_code: '# 在这里写你的代码'
            7:
                story_text: "## 歌曲\n歌曲经常包含大量的重复。例如...鲨鱼宝宝!如果你唱这首歌，其实你就是一直在唱同一句歌词。\n\n鲨鱼宝宝 tututudutudu <br>\n鲨鱼宝宝tututududu <br>\n鲨鱼宝宝tututududu <br>\n鲨鱼宝宝\n\n你可以用`{repeat}` ，让这首歌变得更短!你能完成这个代码吗？\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n\nAfter Baby Shark you can of course also program other songs. There are many songs with repetition.\n"
                start_code: "{print} '鲨鱼宝宝'"
            16:
                story_text: "## 唱一首歌!\n在这一级中，你可以更快速地编排一首像《老麦当劳》这样的歌曲。你可以把正确的动物和正确的声音联系起来，只要把它们放在列表的同一位置。\n《醉酒的水手》在这一级别也能很快制作完成。你只需要8行就可以完成整首歌，看看吧!\n"
                start_code: '# 把你的代码放在这里'
                example_code: "## 老麦当劳\n```\n动物们 = ['猪', '狗', '牛']\n一组声音 = ['哼哼', '汪汪', '哞']\n{for} i {in} {range} 1 {to} 3\n    动物 = 动物们[i]\n    声音 = 一组声音[i]\n    {print} '老麦当劳有一个农场'\n    {print} '咦啊咦啊欧！'\n    {print} '在那个农场里，他有一个' 动物\n    {print} '咦啊咦啊欧！'\n    {print} '这里有一个'声音'的声音'\n    {print} '和一个'声音'的声音那里'\n    {print} '这里有一个'声音\n    {print} '那里有一个'声音\n    {print} '到处都是一个'声音 声音\n```\n\n## 醉酒的水手\n```\n一组句子 = ['我们该如何对待醉酒的水手', '用生锈的剃须刀刮光他的胡子', '把他放在大船上直到他清醒']\n{for} 句子 {in} 一组句子\n    {for} i {in} {range} 1 {to} 3\n        {print} 句子\n    {print} '一大清早'\n    {for} i {in} {range} 1 {to} 3\n        {print} '头昏脑涨的睁开眼'\n    {print} '一大清早'\n```\n"
        name: 唱支歌！
        description: 打印一首歌
        default_save_name: 歌
    turtle:
        levels:
            2:
                story_text: "## 海龟\n在这一级，你可以使用变量来使海龟互动。例如，你可以问玩家海龟必须走多少步。\n"
                start_code: "{print} 海龟赛跑！\n角度 {is} 90\n{turn} 角度\n{forward} 25"
                example_code: "```\n答案 {is} {ask} 海龟应该走多少步？\n{forward}答案\n```\n"
                example_code_2: "```\n{print} 正在画图\n角度 {is} 90\n{turn} 角度\n{forward} 25\n{turn} 角度\n{forward} 25\n```\n"
                story_text_2: "此外，在第1级，海龟只能左转或右转。这有点无聊！\n在第2级，它可以转向任何方向。\n\n用90来转1/4圈。我们管这个叫角度。完整转一圈是360度。\n你能用这段代码来画一个图案吗？比如三角形或者圆形？\n"
            1:
                story_text: "## 让我们来画画\n你也可以用海迪来画画。通过结合旋转和画线，你可以画出一个正方形或楼梯!\n\n使用`{forward}`你可以向前画一条线。它后面的数字决定了海龟会走多远。`{turn} {right}`是顺时针转四分之一圈，`{turn} {left}`是逆时针转。\n如果你想向后退，你可以使用`{forward}`命令，但要用一个负数。因此，比如说`{forward} -100`\n\n让我们开始画一个小楼梯。你能使它有5个台阶吗？\n"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            3:
                story_text: "## 寻找海龟\n在这个级别中，您可以将 `{at} {random}` 与海龟绘图一起使用。使用随机选择使乌龟每次走不同的路径。\n使用 `{at} {random}` 从列表中选择一个值。您可以复制并粘贴第 2 行和第 3 行以创建更长的随机路径。\n"
                example_code: "```\n角度 {is} 10, 50, 90, 150, 250\n{turn} 角度 {at} {random}\n{forward} 25\n```\n"
                start_code: "角度 {is} 10, 50, 90, 150, 250\n{turn} 角度 {at} {random}\n{forward} 25"
            4:
                story_text: "## 让我们来画画\n在第4级，你必须在`{print}`和`{ask}`语句中使用引号。在画画时也一样！\n"
                example_code: "```\n{print} '正在画图'\n角度 {is} 90\n{turn} 角度\n{forward} 25\n{turn} 角度\n{forward} 25\n```\n"
                start_code: "{print} '绘图'\n角度 {is} 90\n{turn} 角度\n{forward} 25"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
                story_text_2: "## Colors\nYou can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
            5:
                story_text: "## 让我们来画画\n在第5级，你可以用`{if}`来做出选择。比如选择不同类型的图案。\n"
                example_code: "```\n{print} '正在画图'\n图案 {is} {ask} '你想要正方形还是三角形？'\n{if} 图案 {is} 三角形 角度 {is} 120\n{else} 角度 {is} 90\n{turn} 角度\n{forward} 25\n{turn} 角度\n{forward} 25\n{turn} 角度\n{forward} 25\n{turn} 角度\n{forward} 25\n```\n"
                start_code: |-
                    {print} '绘图'
                    图 {is} {ask} '你想要一个正方形还是三角形？'
                    {if} 图 {is} 三角形 角度 {is} 120 {else} 角度 {is} 90
                    {turn} 角度
                    {forward} 25
            8:
                story_text: "## 让我们来画画\n现在我们能重复多行了，可以更容易地画图。\n我们只需要设置一下角度，然后在`{repeat}`中使用这个变量。\n"
                example_code: "```\n角度 = 90\n{repeat} 10 {times}\n    {turn} 角度\n    {forward} 50\n```\n"
                example_code_2: "```\n边 = {ask} '你想要几边形？'\n角度 = 360 / 边\n{repeat} 角度 {times}\n    {turn} _\n    {forward} _\n```\n"
                story_text_2: "## 交互\n另外，我们现在还可以改进之前的能画不同图案的程序。\n你能看出这里海龟需要转多少度吗？完成这段代码，你就能画出任何你想要的多边形！\n"
                start_code: "边 = {ask} '我应该画几边形？'"
            7:
                story_text: "## 让我们来画画\n在这一级，你可以用`{repeat}`重复一行代码。\n"
                example_code: "```\n{print} '绘图'\n{repeat} 3 {times} {forward} 10\n```\n"
                start_code: "{print} '绘图'\n{repeat} 3 {times} {forward} 10"
            6:
                story_text: "## 让我们来画画\n在这一级，你可以使用算术来绘制不同的图案。\n你可能在学校里学过，旋转一圈是360度。如果没学过，那你现在知道了！\n这就是为什么你可以用90度来画方形。360除以4是90。\n现在我们可以用海迪做数学，我们就能画出所有想要的图案！\n"
                example_code: "```\n边 = {ask} '你想要画几边形？'\n角度 = 360 / 边\n{forward} 50\n{turn} 角度\n{forward} 50\n{turn} 角度\n{forward} 50\n{turn} 角度\n{forward} 50\n{turn} 角度\n{forward} 50\n{turn} 角度\n{forward} 50\n{turn} 角度\n```\n"
                start_code: "{print} '绘图'"
        name: 海龟
        description: 创作自己的绘画作品
        default_save_name: turtle
    dishes:
        levels:
            5:
                start_code: "{print} '谁负责洗碗？'"
                story_text: "## 洗碗\n你可以用`{if}`给程序加入选项，来让它更有趣。你可以让你的程序对电脑做出的选择进行回应。\n\n你能不能完成这段代码，让它在选中你的时候打印“太糟了”，其它情况下打印“好！”？\n别忘了引号！\n"
                example_code: "```\n人们 {is} 妈妈, 爸爸, 艾玛, 索菲\n洗碗的 {is} 人们 {at} {random}\n{if} 洗碗的 {is} 索菲 {print} _ 太糟了，轮到我洗碗 _\n{else} {print} '运气真好，' _ '把碗洗了'\n```\n"
            10:
                story_text: "## 洗碗\n在这一级，你可以制作一个更好的洗碗时间表。\n"
                example_code: "```\n日期列表 = 周一, 周二, 周三, 周四, 周五, 周六, 周日\n人们 = 妈妈, 爸爸, 艾玛, 索菲\n{for} 日期 {in} 日期列表\n    {print} 人们 {at} {random} '负责在' 日期 '洗碗'\n```\n"
                start_code: '# 在这里写你的代码'
            7:
                example_code: "```\n人们 = 妈妈, 爸爸, 艾玛, 索菲\n{repeat} _ _ {print} '洗碗的是' _\n```\n"
                start_code: "{print} '谁负责洗碗？'"
                story_text: "## 洗碗\n你可以用`{repeat}`重复一段代码。你可以以此来计算一周里谁负责洗碗。\n"
            6:
                story_text: "## 洗碗\n每个人洗了多少次碗？是否公平？在这一级你可以进行统计。\n"
                story_text_2: "## 让它公平\n如果你运气特别差，上一个程序可能每天都选你去洗碗！这不公平！\n为了创造一个更公平的系统，你可以用`{remove}`命令把选中的人从列表中移除。这样除非所有人都被轮到过一次，不然你不用再洗碗。\n\n周一和周二已经帮你写好了！你能把这周剩下的加上吗？\n另外……当列表里空了的时候，你有办法解决吗？\n"
                example_code: "```\n人们 = 妈妈, 爸爸, 艾玛, 索菲\n艾玛洗碗 = 0\n洗碗的 = 人们 {at} {random}\n{print} '洗碗的人是' 洗碗的\n{if} 洗碗的 {is} 艾玛 艾玛洗碗 = 艾玛洗碗 + 1\n{print} '艾玛这周要洗' 艾玛洗碗 '次碗'\n```\n\n现在你需要将第3到第5行复制几次（比如，复制7次表示一周）来计算一整周。\n你能写出一整周用的代码吗？\n"
                example_code_2: "```\n人们 = 妈妈, 爸爸, 艾玛, 索菲\n洗碗的 = 人们 {at} {random}\n{print} '周一洗碗的是：' 洗碗的\n{remove} 洗碗的 {from} 人们\n洗碗的 = 人们 {at} {random}\n{print} '周二洗碗的是：' 洗碗的\n{remove} 洗碗的 {from} 人们菲\n洗碗的 = 人们 {at} {random}\n```\n"
                start_code: "{print} '谁负责洗碗？'"
            4:
                story_text: "## 洗碗\n通过使用引号，你可以让你的洗碗计划更好看。\n这次的示例代码没有全部完成。\n\n你能否填上空白处，补全这段代码？每个空白处都必须填一个词或符号。\n\n提示：别忘了引号！\n"
                example_code: "```\n人们 {is} 妈妈, 爸爸, 艾玛, 索菲\n{print} _ 洗碗的人是 _\n{sleep}\n{print} 人们 {at} _\n```\n"
                start_code: "{print} '谁负责洗碗？'"
            3:
                story_text: "## 洗碗\n你家里是不是总是争论让谁来洗碗或者倒垃圾？\n那么你可以让电脑来做出公平的决定。你在这一级可以写出这个程序！\n先列出你的家庭成员列表。然后用“{at} {random}”从列表中选择。\n"
                example_code: "```\n人们 {is} 妈妈， 爸爸， 艾玛， 苏菲\n{print} 人们 {at} {random}\n```\n"
                start_code: '{print} 谁负责洗碗？'
                story_text_2: "## 破解洗碗程序！\n不想洗碗？破解洗碗程序，把你的名字从列表里去掉。\n"
                example_code_2: "```\n人们 {is} 妈妈，爸爸，艾玛，索菲\n你的名字 {is} {ask} 你是谁？\n{remove} 你的名字 {from} 人们\n{print} 人们 {at} {random} 负责洗碗\n```\n"
        name: 洗碗？
        description: 用电脑决定谁来洗碗（从第2级开始）
        default_save_name: 洗碗
    rock:
        levels:
            5:
                start_code: "{print} '欢迎来到属于你自己的石头剪刀布！'"
                story_text: "## 石头剪刀布\n在这一级，我们可以判定谁赢了。\n为此你需要使用新的`{if}`命令。\n\n将你的选择保存下来，并把电脑的选择也保存下来。\n然后你用`{if}`来判断他们是否相同。\n你能完成这段代码吗？\n"
                example_code: "```\n选项 {is} 石头，剪刀，布\n电脑选择 {is} _\n你选择 {is} {ask} 你选什么？\n{print} '你选了' _\n{print} '电脑选了' _\n{if} _ {is} _ {print} '平局！' {else} {print} '不是平局'\n```\n\n在空白处填上正确的代码，来判断是否是平局。\n"
            4:
                example_code: "```\n选择 {is} 石头，剪刀，布\n{print} _ 电脑选择了：_ _ {at} _\n```\n"
                start_code: "{print} '欢迎来到属于你自己的石头剪刀布！'"
                story_text: "## 石头剪刀布\n在这一关卡，我们可以进一步对石头剪刀布编程。但是 {if} 你想要添加文字，你同样需要使用引号。\n你能不能在划线处填入正确的命令，补全代码？\n"
            1:
                story_text: "## 石头剪刀布\n在第1级，你可以开始一个石头剪刀布游戏。\n\n你可以用`{ask}`做出选择，然后用`{echo}`复述这个选择。\n"
                example_code: "```\n{print} 你选哪一个？\n{ask} 从石头、剪刀和布中选一个\n{echo} 所以你选的是：\n```\n当然，你也可以不使用文字，而是使用表情符号：✊✋✌\n"
                start_code: '{print} 欢迎来到属于你自己的石头剪刀布！'
                story_text_2: "## Challenge\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
            9:
                example_code: "```\n选项 {is} 石头，剪刀，布\n你选择 {is} {ask} '你选择什么？'\n{print} '你选择了' 你选择\n计算机选择 {is} 选项 {at} {random}\n{print} '计算机选择了' 计算机选择\n{if} 计算机选择 {is} 你选择\n    {print} '平手'\n{if} 计算机选择 {is} 石头\n    {if} 你选择 {is} 布\n        {print} '你赢了！'\n    {if} 你选择 {is} 剪刀\n        {print} '你输了！'\n# 完成这段代码\n```\n"
                story_text: "## 石头剪刀布\n在这一级，你可以用嵌套的{if}命令来编程石头剪刀布。你能完成这段代码吗？\n"
                start_code: '# 在这里写你的代码'
            10:
                story_text: "## 石头剪刀布\n有没有感觉懒得玩这个游戏？让海迪替你玩！\n"
                example_code: "```\n选项 = 石头，剪刀，布\n玩家们 = 马琳，迈克尔\n{for} 玩家 {in} 玩家们\n     {print} 玩家 '选择' 选项 {at} {random}\n```\n"
                start_code: '# 在这里写你的代码'
            3:
                story_text: "## 石头剪刀布\n\n在这一级，我们可以输入列表并从列表中选择。\n你要先用`{is}`制作一个列表。然后你可以用`{at} {random}`让电脑从列表里选一个。\n例如，你可以让电脑选择石头、剪刀或布。\n"
                start_code: '{print} 欢迎来到属于你自己的石头剪刀布！'
                example_code: "```\n选择 {is} 石头，剪刀，布\n{print} 选择 {at} {random}\n```\n"
                story_text_2: "## Challenge\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
            2:
                story_text: "## 石头剪刀布\n在这一级，你可以练习使用变量，这样你就能在下一级中完成石头剪刀布游戏！\n"
                example_code: "```\n选择 {is} _\n{print} 我选择 选择\n```\n"
                start_code: '# 在这里写你的代码'
            15:
                story_text: "## 石头剪刀布\n玩到你打败电脑为止！但首先，你要补全示例代码……\n"
                example_code: "```\n赢 = '否'\n选项 = '石头', '剪刀', '布'\n{while} 赢 == '否'\n    你的_选择 = {ask} '你选择了什么？'\n    计算机_选择 = 选项 {at} {random}\n    {print} '你选择了 ' 你的_选择\n    {print} '计算机选择了' 计算机_选择\n    {if} 计算机_选择 == 你的_选择\n        {print} '平手！'\n    {if} 计算机_选择 == '石头' {and} 你的_选择 == '剪刀'\n        {print} '你输了！'\n    {if} 计算机_选择 == '石头' {and} 你的_选择 == '布'\n        {print} '你赢了！'\n        赢 = '是'\n```\n"
                start_code: '# 在这里写你的代码'
            13:
                story_text: "## 石头剪刀布\n你可以用`{and}`命令缩短你的石头剪刀布代码！阅读下面的示例代码，并尝试完成它。\n"
                example_code: "```\n选项 = '石头', '剪刀', '布'\n你选 = {ask} '你选什么？'\n电脑选 = 选项 {at} {random}\n{print} '你选了' 你选\n{print} '电脑选了' 电脑选\n{if} 电脑选 {is} 你选\n    {print} '平局'\n{if} 电脑选 {is} '石头' {and} 你选 {is} '布'\n    {print} '你赢了！'\n{if} 电脑选 {is} '石头' {and} 你选 {is} '剪刀'\n    {print} '电脑赢了！'\n```\n"
                start_code: '# 在这里写你的代码'
        description: 制作你自己的石头剪刀布游戏
        name: 石头剪刀布
        default_save_name: 石头
    calculator:
        name: 计算器
        levels:
            14:
                example_code: "```\n{print} '猜猜哪个数字'\n数字们 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n数字 = 数字们 {at} {random}\n游戏 = '开始'\n{for} i {in} {range} 1 {to} 10\n    {if} 游戏 == '开始'\n        猜测 = {ask} '你认为是哪一个数字?'\n        {if} 猜测 > 数字\n            {print} '低一点！ '\n        {if} 猜测 < 数字\n            {print} '更高！'\n        {if} 猜测 == 数字r\n            {print} '你赢了！ '\n            game = '结束'\n```\n"
                story_text: "## 猜数 \n在这关中你可以编写一个“猜数”游戏\n"
                start_code: '# 在这里写你的代码'
            12:
                story_text: "## 计算器\n现在您可以编写一个用于小数计算的计算器。\n"
                example_code: "```\n数字1 = {ask} '第一个数字是几？'\n数字2 = {ask} '第二个数字是几？'\n答案 = 数字1 + 数字2\n{print} 数字1 ' 加 ' 数字2 '等于 ' 答案\n```\n"
                start_code: '# 在这里写你的代码'
            10:
                story_text: "## 计算器 \n这个计算器游戏帮助您练习你的乘法口诀表！ \n如果您添加更多数到这个列表，你可以练习到所有的乘法。\n"
                example_code: "```\n数字 = 1, 2, 3\n{for} 数1 {in} 数字\n    {for} 数2 {in} 数字\n        答案 = {ask} 数1 '乘以' 数2 '是多少？'\n        正确答案 = 数1 * 数2\n        {if} 答案 {is} 正确答案\n            {print} '做得好！'\n        {else}\n            {print} '回答错误。正确答案是' 正确答案\n```\n"
                start_code: '# 在这里写你的代码'
            9:
                story_text: "## 计算器 \n在前面的级别中您已经学会如何编写一个计算器，在这个等级里你可以扩写这些代码并把它写成一个小小的数学游戏，就像这样...\n"
                example_code: "```\n分数 = 0\n{repeat} 10 {times}\n    数字 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    数1 = 数字 {at} {random}\n    数2 = 数字 {at} {random}\n    正确答案 = 数1 * 数2\n    {print} 数1 '乘以' 数2 '是多少？'\n    答案 = {ask} '在这里输入答案……'\n    {print} '你的答案是' 答案\n    {if} 答案 {is} 正确答案\n        分数 = 分数 + 1\n{print} '做得好！你的分数是' 分数 '分，满分是10分！'\n```\n"
                start_code: "{print} '欢迎来到这个计算器!'"
            6:
                story_text: "## 计算器 \n现在你可以计算了，你也可以创建一个程序来练习数学计算。你可以自己编造一个计算题，例如：\n"
                example_code: "```\n正确答案 = 11 * 27\n答案 = {ask} '11乘以27是多少？'\n{if} 答案 {is} 正确答案 {print} '做得好！'\n{else} {print} '错了！是' 正确答案\n```\n"
                story_text_2: "## 随机数 \n您也可以让计算机自己用随机函数做一个随机求和。 \n这就是您选择多个表格进行练习的方式，而且您将总是得到一个不一样的和：\n"
                example_code_2: "```\n被乘数表 = 4, 5, 6, 8\n乘数表 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n被乘数 = 被乘数表 {at} {random}\n乘数 = 乘数表 {at} {random}\n正确答案 = 被乘数 * 乘数\n答案 = {ask} 被乘数 '乘以' 乘数 '是多少？'\n{if} 答案 {is} 正确答案 {print} '正确'\n{else} {print} '错误！是' 正确答案\n```\n"
                start_code: "{print} '欢迎来到这个计算器!'"
                story_text_3: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_3: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
            15:
                story_text: "## 计算器 \n您可以添加 `{while}` 循环到您已经在上一关中学过的计算器游戏中去。 \n这可以确保{if}玩家在没有回答正确的情况下不会进行下一个问题。\n"
                example_code: "```\n分数 = 0\n{for} i {in} {range} 0 {to} 9\n    数字 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    数1 = 数字 {at} {random}\n    数2 = 数字 {at} {random}\n    正确 = 数1 * 数2\n    答案 = 0\n    {while} 答案 != 正确\n        {print} 数1 '乘以' 数2 '是多少？'\n        答案 = {ask} '填写答案'\n        {print} '你的答案是' 答案\n    {print} '做得好！'\n{print} '你赢了！'\n```\n"
                start_code: '# 在这里写你的代码'
        description: 创建一个计算器
        default_save_name: 计算器
    restaurant:
        name: "餐厅"
        description: "创建你自己的虚拟餐厅"
        default_save_name: "餐厅"
        levels:
            1:
                story_text: |
                    ## 餐厅 
                    在第一关中您可以编写一个你自己的虚拟餐厅并接受客人的点单。
                example_code: |
                    ```
                    {print} 欢迎来到海迪餐厅 🍟
                    {ask} 你想点什么？
                    {echo} 你想点
                    {print} 谢谢你的点单！
                    {print} 已经在做了！
                    ```
                story_text_2: |
                    ## 挑战 
                    你可以想出更多行代码添加到你的餐厅的代码里吗？例如，你可以{ask}客人他们想要喝些什么，告诉他们价格，或者祝他们用餐愉快？
                start_code: "# 在这里写你的代码"
            2:
                story_text: |
                    ## 餐厅
                    在第 2 关你可以使用变量来扩展你的餐厅。在第 1 关 Hedy 只能 {echo} 订单一次，并记住最后一个点的东西。
                    现在你可以使用变量来让 Hedy 同时记住食物和饮料！
                example_code: |
                    ```
                    {print} 欢迎来到海迪餐厅！
                    {print} 今天我们提供披萨和千层面。
                    食物 {is} {ask} 您想吃什么？
                    {print} 选得好！这是我最爱的食物！
                    配料 {is} {ask} 您想要加肉的还是蔬菜的？
                    {print} 加了 配料 的 食物 已经在做了！
                    饮料 {is} {ask} 您想喝点什么？
                    {print} 谢谢您的点单。
                    {print} 您的 食物 和 饮料 马上就来！
                    ```
                start_code: "# 将代码写在这里"
                story_text_2: "## Challenge\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
                example_code_2: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\ndrinks {is} _\n```\n"
            3:
                story_text: |
                    ## 随机餐厅
                    在选择晚饭吃什么时选择困难了吗？你可以让海迪帮你选！
                    只要将你最喜欢（或者最不喜欢）的食物加入列表，海迪就可以随机帮你选择晚饭。
                    你也可以让海迪帮你选择晚饭的价格，来获得更多乐趣！你会得到什么？

                example_code: |
                    ```
                    {print} 欢迎来到海迪餐厅！
                    {print} 唯一会为您随机选择餐食和价格的餐厅！
                    前菜 {is} 沙拉, 汤, 肉片
                    主菜 {is} 披萨, 布鲁塞尔芽菜, 意面
                    甜点 {is} 布朗尼, 冰淇淋, 法国奶酪
                    饮料 {is} 可乐, 啤酒, 水
                    价格 {is} 1元, 10元, 100元
                    {print} 您会先吃到 前菜 {at} {random}
                    {print} 然后我们会上 主菜 {at} {random}
                    {print} 然后甜点是 甜点 {at} {random}
                    {print} 您可以喝 饮料 {at} {random}
                    {print} 一共是 价格 {at} {random}
                    {print} 谢谢，祝您用餐愉快！
                    ```
                story_text_2: |
                    ## 过敏
                    你的客人是否有食物过敏，或者讨厌某道菜？那么你可以用`{remove}`命令将它从你的菜单中去除。

                example_code_2: |
                    ```
                    {print} 神秘奶昔
                    口味 {is} 草莓, 巧克力, 香草
                    过敏 {is} {ask} 你对什么口味过敏吗？
                    {remove} 过敏 {from} 口味
                    {print} 你得到了一杯 口味 {at} {random} 味的奶昔
                    ```
                start_code: "# 在这里写你的代码"
            4:
                story_text: |
                    ## Restaurant
                    In this level you have to use quotation marks when using the `{print}` command.
                    Can you make your code from the previous levels work in this level too by adding the quotation marks?

                    Be careful! In the previous levels apostrophes were allowed in the text, but in this level Hedy will confuse them for quotation marks and the code will not work!
                    So instead of typing  `{print} Today we're serving pizza` , you should type `{print} 'Today we are serving pizza'`
                example_code: |
                    ## 海迪餐厅示例
                    ```
                    {print} '欢迎来到海迪餐厅！'
                    {print} '今天我们提供披萨和千层面。'
                    食物 {is} {ask} '您想吃什么？'
                    {print} '选得好！这是我最爱的食物！'
                    配料 {is} {ask} '您想要加肉的还是蔬菜的？'
                    {print} '加了' 配料 '的' 食物 '已经在做了！'
                    饮料 {is} {ask} '您想喝点什么？'
                    {print} '谢谢您的点单。'
                    {print} '您的' 食物 '和' 饮料 '马上就来！'
                    ```
                start_code: "# 在这里写你的代码"
            5:
                story_text: |
                    ## 餐厅
                    在这一关，{if}命令让你可以对你的客人{ask}，并对其回答做出不同的反应。
                    在下面的例子里，你能看到你可以{ask}你的客人是否想听推荐，海迪会根据回答做出相应的回应。

                example_code: |
                    ```
                    {print} '欢迎来到海迪餐厅！'
                    推荐 {is} {ask} '您想听我们今天的推荐吗？'
                    {if} 推荐 {is} 是 {print} '今天的推荐是考级' {else} {print} 'No problem.'
                    食物 {is} {ask} '您想吃什么？'
                    {print} '一份' 食物 '，马上就来！'
                    饮料 {is} {ask} '您想配点什么喝的？'
                    {if} 饮料 {is} 可乐 {print} '对不起，可乐卖完了！' {else} {print} '选得好！'
                    别的 {is} {ask} '您还想要别的吗？'
                    {print} '我复述一下您的点单'
                    {print} '一份' 食物
                    {if} 饮料 {is} 可乐 {print} '以及……' {else} {print} '一杯' 饮料
                    {if} 别的 {is} 不用 {print} '就是这些' {else} {print} '一份' 别的
                    {print} '谢谢您的点单。祝您用餐愉快！'
                    ```
                story_text_2: |
                    ## 挑战
                    你能想出更多的问题，在顾客点餐时`{ask}` ，并通过使用`{if}` 命令对他们不同的应答做出合适的答复吗？

                start_code: "# 在这里写你的代码"
            6:
                story_text: |
                    ## 餐厅
                    在这一关，你可以用数学计算客人的订单总价，这会让你的虚拟餐厅更真实。

                example_code: |4

                    你可以写一段简单的餐厅代码，像这样：
                    ```
                    {print} '欢迎来到海迪餐厅'
                    {print} '这是我们的菜单：'
                    {print} '我们的主菜有披萨、千层面、意面'
                    主菜 = {ask} '您想要哪道主菜？'
                    价格 = 0
                    {if} 主菜 {is} 披萨 价格 = 10
                    {if} 主菜 {is} 千层面 价格 = 12
                    {if} 主菜 {is} 意面 价格 = 8
                    {print} '您点了' 主菜
                    {print} '请付' 价格 '元'
                    {print} '谢谢，祝您用餐愉快！'
                    ```
                story_text_2: |
                    但你也可以给你的虚拟餐厅加上更多东西，比如更多的菜。

                    ## 挑战
                    你可以给你的虚拟餐厅加上很多东西。比如，你能否……
                    - {ask} 来了几个人，并将价格乘以人数？
                    - 增加另一道菜？
                    - 如果有人用了（秘密的）优惠码，给他一个折扣？
                    - 增加一个儿童菜单？
                    - 想想还能加什么有趣的东西？
                example_code_2: |4

                    你可以写一段简单的餐厅代码，像这样：
                    ```
                    {print} '欢迎来到海迪餐厅'
                    {print} '这是我们的菜单：'
                    {print} '我们的前菜有沙拉、汤和肉片'
                    {print} '我们的主菜有披萨、千层面和意面'
                    {print} '我们的甜点有布朗尼、冰淇淋和奶昔'
                    前菜 = {ask} '您想吃什么前菜？'
                    主菜 = {ask} '您想要哪道主菜？'
                    甜点 = {ask} '您选哪个甜点？'
                    价格 = 0
                    {if} 前菜 {is} 汤 价格 = 价格 + 6 {else} 价格 = 价格 + 7
                    {if} 主菜 {is} 披萨 价格 = 价格 + 10
                    {if} 主菜 {is} 千层面 价格 = 价格 + 12
                    {if} 主菜 {is} 意面 价格 = 价格 + 8
                    {if} 甜点 {is} 布朗尼 价格 = 价格 + 7
                    {if} 甜点 {is} 冰淇淋 价格 = 价格 + 5
                    {if} 甜点 {is} 奶昔 价格 = 价格 + 4
                    {print} '您点了' 前菜 '、' 主菜 '和' 甜点
                    {print} '请付' 价格 '元'
                    {print} '谢谢，祝您用餐愉快！'
                    ```
                start_code: "# 在这里写你的代码"
            7:
                story_text: |
                    ## 餐厅
                    在这一关，你需要学习如何使用 {repeat} 命令重复一行代码数次。
                    你可以以此在你的餐厅里向多个人 {ask} 他们喜欢吃什么。比如这样：
                example_code: |
                    ```
                    {print} '欢迎来到海迪餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {repeat} 人数 times 食物 = {ask} '您想吃什么？'
                    {print} '谢谢您的点单！马上就来！'
                    ```
                start_code: "# 在这里写你的代码"
            8:
                story_text: |
                    ## 餐厅
                    在这一关，你可以通过重复多行代码，让你的虚拟餐厅更加细化。像这样：
                example_code: |
                    ```
                    {print} '欢迎来到海迪餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                    {print} '谢谢您的点单！'
                    {print} '祝您用餐愉快！'
                    ```
                story_text_2: |
                    ## 挑战
                    当然，这代码还可以拓展，在菜单上加更多东西，提供饮料和多道菜，所以你可以按照自己的喜好随便增加多少选项！
                start_code: "# 在这里写你的代码"
            9:
                story_text: |
                    ## 餐厅
                    在这一关，你可以用嵌套让你的餐厅更真实更有趣！
                    比如如果有人点了薯条，你可以 {ask} 他要不要酱，但是点披萨的就不用！
                    看看例子，然后在你自己的虚拟餐厅里试一下。
                example_code: |
                    ```
                    {print} '欢迎来到海迪餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    价格 = 0
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                        {if} 食物 {is} 薯条
                            价格 = 价格 + 3
                            酱汁 = {ask} '您的薯条要配什么酱？'
                            {if} 酱汁 {is} 不要
                                {print} '不要酱'
                            {else}
                                价格 = 价格 + 1
                                {print} '配' 酱汁
                        {if} 食物 {is} 披萨
                            价格 = 价格 + 4
                    {print} '一共' 价格 '元'
                    {print} '祝您用餐愉快！'
                    ```
                start_code: "# 在这里写你的代码"
            10:
                story_text: |
                    ## 餐厅
                    在这一关，你会学到如何用 {ask} 命令加上一些简单的代码，就能向你的客人询问点单。
                example_code: |
                    ```
                    上菜顺序 = 前菜, 主菜, 甜点
                    {for} 上菜 {in} 上菜顺序
                        食物 = {ask} '您想要吃什么' 上菜 '？'
                        {print} '您的' 食物 '会是' 上菜
                    ```
                story_text_2: |4

                    当然，你也可以帮多个人点单！
                example_code_2: |
                    ```
                    上菜顺序 = 前菜, 主菜, 甜点
                    客人们 = 丁满, 彭彭
                    {for} 客人 {in} 客人们
                        {for} 上菜 {in} 上菜顺序
                        食物 = {ask} 客人 '，你想要吃什么' 上菜 '？'
                        {print} 客人 '点了' 食物 '作为' 上菜
                    ```
                start_code: "上菜顺序 = 前菜, 主菜, 甜点"
            11:
                story_text: |
                    ## 餐厅
                    我们可以用`{for} i {in} {range} 1 {to} 5`来按顺序`{print}`多个客人的点单。
                example_code: |
                    ```
                    {print} '欢迎来到海迪餐厅！'
                    人数 = {ask} '您想为多少人点单？'
                    {for} i {in} {range} 1 {to} 人数
                        {print} i '号订单'
                        食物 = {ask} '您想吃什么？'
                        {print} 食物
                        {if} 食物 {is} 薯条
                            酱料 = {ask} '您想要什么酱？'
                            {print} 酱料
                        饮料 = {ask} '您想要喝什么？'
                        {print} 饮料
                    价格 = 4 * 人数
                    {print} '请付' 价格 '元！'
                    ```
                start_code: "# 在这里写你的代码"
            12:
                story_text: |
                    ## 餐厅
                    从这关起，你可以用十进制数字来让你的菜单更真实。
                example_code: |
                    ```
                    价格 = 0
                    食物 = {ask} '您要点什么？'
                    饮料 = {ask} '您想喝什么？'
                    {if} 食物 {is} '汉堡包'
                        价格 = 价格 + 6.50
                    {if} 食物 {is} '披萨'
                        价格 = 价格 + 5.75
                    {if} 饮料 {is} '水'
                        价格 = 价格 + 1.20
                    {if} 饮料 {is} '苏打水'
                        价格 = 价格 + 2.35
                    {print} '请付' 价格 '元'
                    ```
                start_code: "# 在这里写你的代码"
            13:
                story_text: |
                    ## 餐厅
                    在这一关，我们可以用新的命令来升级我们的餐厅。
                    我们用`{and}`来判断 {if} 命令中的两个条件是否同时成立。

                example_code: |
                    ```
                    价格 = 10
                    食物 = {ask} '您想吃什么？'
                    饮料 = {ask} '您想喝什么？'
                    {if} 食物 {is} '三明治' {and} 饮料 {is} '果汁'
                        {print} '这是我们的优惠套餐'
                        价格 = 价格 - 3
                    {print} '一共' 价格 '元'
                    ```
                story_text_2: |
                    我们用`{or}`来判断 {if} 命令中的两个条件是否至少有一个成立。

                example_code_2: |
                    ```
                    饮料 = {ask} '您想喝什么？'
                    {if} 饮料 {is} '水' {or} 饮料 {is} '果汁'
                        {print} '真是个健康的选择'
                    ```
                start_code: "# 在这里写你的代码"
            15:
                story_text: |
                    ## 餐厅
                    通过`{while}`命令，你可以确保你的客人能不断追加点单，直到点完。

                example_code: |
                    ```
                    {print} '欢迎来到麦海迪'
                    还有 = '是'
                    {while} 还有 == '是'
                        点单 = {ask} '您要点什么？'
                        {print} 点单
                        还有 = {ask} '您还要点别的吗？'
                    {print} '谢谢惠顾！'
                    ```
                start_code: "# 在这里写你的代码"
    fortune:
        name: "算命"
        description: "让海迪帮你算命"
        default_save_name: "算命"
        levels:
            1:
                story_text: |
                    ## 算命
                    你有没有在天桥下让算命的给你算过命？或者有没有抽过签？
                    那你想必也知道，它们并不能真正预言你的未来。但是它们玩起来仍然很有趣！

                    在接下来的关卡中，你会学到如何制作你自己的算命机器！
                    在第1关，一开始可以简单一些，只让海迪介绍自己会算命，然后用{echo}命令让它复述玩家的回答。
                    像这样：
                example_code: |
                    ```
                    {print} 你好，我是海迪半仙！
                    {ask} 你叫什么？
                    {print} 让我掐指算一算
                    {print} 赵钱孙礼……
                    {echo} 你的名字叫
                    ```
                story_text_2: |
                    ## 挑战
                    现在海迪只能说出你的名字。你能否扩充这段代码，让海迪可以算出其它东西？
                    显然，海迪现在海不如一个好的算命师，因为它只能重复玩家给出的答案！
                    到第2关看看怎么改进你的算命。
                start_code: "# 在这里写你的代码"
            3:
                story_text: |
                    ## 算命
                    在上一关，你创造了你的第一台算命机器，但海迪不会算任何东西，只会“{echo}”。
                    在这一关，你可以用变量和`{at} {random}`命令来真正让海迪为你选择一个答案。比如看看这段代码：
                example_code: |4

                    在这个例子里，玩家可以向海迪{ask}一个是非题，然后海迪会任意选择一个答案。
                    ```
                    {print} 我是海迪半仙！
                    问题 {is} {ask} 你想算什么？
                    {print} 你想算：问题
                    回答 {is} 是, 否, 有可能
                    {print} 让我算一卦……
                    {sleep} 2
                    {print} 回答 {at} {random}
                    ```
                story_text_2: |
                    ## 挑战
                    现在海迪只能回答是、否和有可能。你能否给海迪更多回答选项，比如“肯定”或者“换个问题”。
                start_code: "# 在这里写你的代码"
            4:
                story_text: |
                    ## Fortune Teller
                    This level has no new functions, but allows you to practice with using the quotation marks.
                    You can remake your level 3 code, and make sure to add the quotation marks in the right places!

                    Mind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.
                    The quotation marks in level 3 make this possible!

                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to Im or Whats.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    question {is} {ask} 'What do you want to know?'
                    {print} 'This is your question: ' question
                    answers {is} yes, no, maybe
                    {print} 'My crystal ball says...'
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                start_code: "# place your code here"
            5:
                story_text: |
                    ## Fortune Teller
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone {else} will win!😭'
                    ```
                story_text_2: |
                    ## Hack the program
                    Replace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!
                    Of course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.
                    But of course, still gives you a positive answer and the other players a negative one.
                example_code_2: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} you will win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    goodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!
                    badanswer {is} Bad luck! Try again!, Another person will win, You lose!
                    {if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}
                    ```
                story_text_3: |
                    ## Challenges
                    This concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!
                    Or you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!
                    Let your imagination do the work!

                start_code: "# place your code here"
            6:
                story_text: |
                    ## Fortune Teller
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.

                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    ## Example Silly Fortune Teller
                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: "# place your code here"
            7:
                story_text: |
                    ## Fortune Teller
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
                story_text_2: |
                    ## Challenge
                    As you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.
                    Every time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.
                    This means you can't print all the questions this way.

                    By using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.
                    This does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.
                    Can you do it?

                    In the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.
                start_code: "# place your code here"
            8:
                story_text: |
                    ## Fortune Teller
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: "# place your code here"
            10:
                story_text: |
                    ## Fortune Teller
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                story_text_2: We can also make a Harry Potter themed fortune teller.
                example_code_2: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    {for} name in names
                        {print} name ' is placed in ' houses {at} {random}
                        {print} name ' is great at ' subjects {at} {random}
                        {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: "# place your code here"
            12:
                story_text: |
                    ## Fortune Teller
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: "# place your code here"
    haunted:
        name: "Haunted House"
        description: "Escape from the haunted house"
        default_save_name: "Haunted House"
        levels:
            1:
                story_text: |
                    ## Haunted house
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but if not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and ask the player what monster they'll see in the haunted house.
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ## Challenge
                    Can you finish the scary story? Or make up your own haunted house story?
                start_code: "{print} How did I get here?"
            2:
                story_text: |
                    ## Haunted House
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: "monster1 {is} _"
                story_text_2: "## Challenge\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            3:
                story_text: |
                    ## Haunted house game
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    {print} Escape from the haunted house!
                    {print} There are 3 doors in front of you...
                    choice {is} {ask} Which door do you choose?
                    {print} You picked door ... choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} You see...
                    {sleep}
                    {print} monsters {at} {random}
                    ```
                story_text_2: |
                    ## Challenge
                    This story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.
                    Also you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!

                    ## Change the game into a tv gameshow!
                    Lastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it?
                start_code: "# place your code here"
                story_text_3: "## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\n{print} One of them contains _\n_\n```\n"
            4:
                story_text: |
                    ## Haunted house
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```

                start_code: "# place your code here"
            5:
                story_text: |
                    ## Haunted House
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```

                start_code: "# place your code here"
            9:
                story_text: |
                    ## Haunted House
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    ## Challenge
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            11:
                story_text: |
                    ## Haunted House
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            14:
                story_text: |
                    ## Haunted House
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: "# place your code here"
            16:
                story_text: |
                    ## Haunted House Game
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: "# place your code here"
    piggybank:
        name: Piggy Bank
        description: Count your pocketmoney!
        default_save_name: Piggy Bank
        levels:
            14:
                story_text: "## Piggybank\nIn this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "```\n{print} '数字存钱罐'\n愿望 = {ask} '你想买什么？'\n价格 = {ask} '这要花多少钱？'\n存款 = {ask} '你已经存了多少钱？'\n零花钱 = {ask} '你每周有多少零花钱？'\n需要_再存 = 价格 - 存款\n周数 = 需要_再存/ 零花钱\n{print} '你可以在'周数'周内买一个'愿望'。'\n```\n"
                start_code: '# place your code here'
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
        levels:
            14:
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# place your code here'
    language:
        name: Language
        description: Practice words in a foreign language
        default_save_name: language
        levels:
            5:
                story_text: "## 学习新的语言\n编写你自己的程序来练习新语言的词汇。\n"
                start_code: '# place your code here'
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
            16:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# place your code here'
    next:
        description: What's Next?
        name: What's next?
        default_save_name: next
        levels:
            1:
                start_code: "{print} Let's go!"
                story_text: "## 下一步是什么？\n恭喜！你已经到达了第1级的终点。希望你已经编写了一些很棒的代码，但是关于海迪还有很多东西值得探索。\n\n在第一个级别中，您可能已经注意到 `{echo}` 命令一次只能保存一个信息位。\n例如，在餐厅探险活动中，你可以{echo}消费者想吃什么，或者想喝什么，但不能用一句话同时重复这两个问题。\n"
                example_code: "```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\n"
                story_text_2: "如果玩家输入了一个汉堡和可乐，你不能说“那么你想要一个汉堡和可乐”，你必须分开两行。\n而且，`{echo}`命令只能把词语放在句子末尾。所以你没法说“你的汉堡马上就来！”。\n\n这在第2关中变了。在第2关，你会学到使用变量。这能让你保存多条信息，并且打印到任何你希望的地方。\n让我们前往下一关吧！\n"
            2:
                start_code: "{print} Let's go to the next level!"
                story_text: "## What's next?\nIn this level you've learned what a variable is and how you can use it to make your adventures more interactive.\nBut... that's not the only thing you can do with variables! You can also use variables to make lists.\nAnd you can even let Hedy pick a random word out of a list, which allows you to make real games!\nTake a quick look at the next level!\n"
            3:
                start_code: "{print} Let's go to the next level!"
                story_text: "## What's next?\nIn this level you've been practising with variables, but maybe you've come across this mistake.\n\nTry to run this code:\n```\nname {is} Sophie\n{print} My name is name\n```\nOf course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`. \nIn the next level this problem is fixed by using quotation marks.\n"
            4:
                story_text: "## What's next?\nIn the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.\nBut it's not really interactive, the player doesn't have any influence on what happens in the game.\n\nIn the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.\nSo let's take a peak!\n\n```\npassword {is} {ask} 'What is the correct password?'\n```\n"
                start_code: "{print} 'Lets go to the next level!'"
            5:
                story_text: "## 下一个级别是什么？\n现在你已经达到了这一级的终点，所以你已经学习了`{ask}`和`{if}`。例如，您可以{ask}客人想吃什么。\n但是，您还不能计算出每个人晚餐的费用。\n\n在下一级中，我们可以在程序中使用加法，减法和乘法。通过这种方式，您可以计算每个人每一餐的费用，但您也可以添加一个折扣码，为您的朋友和家人提供折扣。\n在下一个级别中，我们的另一个选择是编写自己的数学游戏，让你的弟弟或妹妹学习乘法。\n去看看下一个级别！\n"
                start_code: "{print} 'On to the next level!'"
                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
            8:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## 下一个级别是什么？\n干得好！你已经到达了另一个级别的终点！在此级别中，您已经学习了如何在 {if} 或 {repeat} 命令中使用多行代码。但是您还不能将两者结合起来...\n好消息！在下一级中，您将被允许将{if}命令嵌入{if}或{repeat}命令中。\n"
                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
            9:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## 接下来呢？\n你做得很好！这关还有个小问题，你学会了如何重复同一行，但是如果你想让每一行略有不同又该如何。\nFor example if you want to sing the song '{if} you're happy and you know it'. It would look like this:\n\nIf you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.\nIn the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!\nPlease take a look!\n"
                example_code: "```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
            10:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nYou have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.\nIn Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!\n"
            11:
                story_text: "## 接下来是什么？\n也许你已经在你的餐厅冒险活动中尝试使用小数。如果你这样做了，你可能注意到Hedy还不理解它们，总是把它们四舍五入。\n从下一级开始，你就可以使用小数啦。\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n汉堡是5\n饮料是2\n总计是汉堡+饮料\n打印 '你已经点了一个汉堡和一杯饮料'\n打印 '你一共花了 ' 总计 ' 元' 。\n```\n上面的代码有效，因为汉堡是5美元，饮料是2美元。但是，如果你多收50美分，程序就不能再工作了!就像下面的代码。\n```\n汉堡是5.50美元\n饮料是2.30美元\n总计是汉堡+饮料\n打印 '你已经点了一个汉堡和一杯饮料'\n打印 '你一共花了 ' total ' 元' 。\n```\n进入下一级，让这段代码发挥作用!\n"
            13:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## 下一步是什么？ \n通过下面的程序，你可以计算出{if} （是否）你已经通过了学校的一个科目（所以，六级或以上）。 \n你可以看到这段代码的效率非常低，因为第5行的代码非常长。 \n所有从1到5的不同等级都必须单独编程。幸运的是，在下一级中，你将学习如何在没有这段很长的代码的情况下做到这一点！\n"
                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
            14:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## 下一步是什么？\n在下面这个游戏中，已经有了一个代码，以确保玩家可以玩下去，只要他/她想...\n但这个代码是无效的，而且太长了。另外，{if} 玩家想玩101场而不是100场那会怎样？ \n你能玩无限场吗？ \n在下一级中，你将学习一个命令，使这一切变得更容易!\n"
                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
            15:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## 下一步是什么？\n在下一级中，我们将向真正的Python代码前进。你还将学习如何找到两个列表项匹配在一起。\n这样你就可以编写一个代码，其中正确的动物被匹配到正确的声音。\n因为下面的两个代码...显然是无稽之谈!\n"
                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
            16:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## 下一步是什么？\n在下一个级别中，是时候使用新命令了。您可能已经注意到，在前面的一级中，只用`{if}` 和 `{else}` 有时还不够。\n例如，在此代码中：\n"
                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
            6:
                story_text: "## 下一步是什么？\n 干得好！你已经到达了这个级别的终点，这意味着你已经练习了`{if}`和`{else}`命令。你可能已经注意到你编写的代码越来越长。\n 例如，{if}您想要编写“祝你生日快乐”这首歌的程序。\n\n这是一遍又一遍地为大致相同的句子编写大量的代码。幸运的是，在下一个级别中，可以用`{repeat}`命令的解决这个问题，它允许您多次重复一行代码。\n"
                start_code: "{print} 'On to the next level!'"
                example_code: "```\n{print} '祝你生日快乐'\n{print} '祝你生日快乐'\n{print} '祝亲爱的Hedy生日快乐'\n{print} '祝你生日快乐'\n```\n"
            7:
                story_text: "## 接下来是什么？\n现在你已经学会了如何重复一行代码。这很方便，但这并不总是足够。有时你想一次重复多行代码。\n在下一级，允许你将几行代码组成一组，并一次性重复这一组代码！\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
            12:
                story_text: "## 下一步是什么？ \n在前面的级别中，你学会了如何将两个`{if}`命令互相嵌套。这很好用，但它确实让你编写了非常长的、不方便的代码，比如这个： \n\n在这个系统中，你必须同时给出正确的用户名和正确的密码。 \n在下一关中，你将学习`{and}` 命令，这将使这段代码变得更短，更容易理解! \n来看看吧!\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
            18:
                start_code: "{print} ('Great job!!!')"
                story_text: "## 下一步是什么？ \n恭喜你！你已经到达了Hedy的最后一级。你在这里创建的代码可以被复制到真正的Python环境中，比如replit或PyCharm，你可以在那里继续学习！ \n但是请注意，Python只能读取英文命令，所以如果你一直在使用其他语言，你现在需要切换到英文。\n"
            17:
                story_text: "## What's next?\nIn the next level you will learn a real Python way to use `{print}`.\n"
                start_code: "{print} 'Lets go to the next level!'"
    parrot:
        name: 鹦鹉
        description: 创造属于你的在线宠物鹦鹉，它会学你说话！
        default_save_name: 鹦鹉
        levels:
            1:
                story_text: "## 鹦鹉\n创造属于你的在线宠物鹦鹉，它会学你说话！\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                start_code: '{print} 我是鹦鹉海迪'
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
                story_text_2: "## Challenge\nCan you make the parrot ask a different question? Fill in the blanks in the example!\n"
            2:
                story_text: "## 鹦鹉\n创造属于你的在线宠物鹦鹉，它会学你说话！\n"
                example_code: "```\n{print} 我是鹦鹉海迪\n名字 {is} {ask} 你的名字叫什么？\n{print} 名字\n{sleep}\n{print} 叽叽喳喳\n{sleep}\n{print} 名字\n```\n"
                start_code: '{print} 我是鹦鹉海迪！'
                story_text_2: "## Challenge\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
                example_code_2: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} name\nsurname {is} {ask} whats your surname?\n_\n{sleep}\n_\n```\n"
            3:
                story_text: "## 鹦鹉\n用`{add}`教你的鹦鹉一个新词。\n"
                example_code: "```\n单词表 {is} 叽叽喳喳, 海迪\n{print} 训练你的鹦鹉！\n新单词 {is} {ask} 你想让他们学哪个词？\n{add} 新单词 {to_list} 单词表\n{print} \U0001F9D2 海迪，说 新单词！\n{print} \U0001F99C 单词表 {at} {random}\n```\n"
                start_code: '# 在这里写你的代码'
            5:
                story_text: "## 鹦鹉\n如果你的鹦鹉说出了正确的词，给它一些奖励！\n"
                example_code: "```\n单词表 {is} 叽叽喳喳, 海迪\n{print} '训练你的鹦鹉！'\n新单词 {is} {ask} '你想让他们学哪个词？'\n{add} 新单词 {to_list} 单词表\n说了 {is} 单词表 {at} {random}\n{print} '\U0001F9D2 海迪，说' 新单词 '！'\n{print} '\U0001F99C ' 说了\n{if} 说了 {is} 新单词 {print} '\U0001F9D2 干得好！海迪！\U0001F36A'\n{else} {print} '\U0001F9D2 不对，海迪！说' 新单词\n```\n"
                start_code: '# 在这里写你的代码'
    dice:
        name: 骰子
        description: 制作你自己的骰子
        default_save_name: 骰子
        levels:
            7:
                example_code: "```\n选项 = 1, 2, 3, 4, 5, 蚯蚓\n{repeat} _ _ {print} _ _ _\n```\n"
                story_text: "## 骰子\n在第5级，你又可以做一个骰子。通过运用`{repeat}`命令，你可以轻松投出一大把骰子。\n试着补全示例代码！划线部分应该包含多个命令或字符。\n\n但可能你想做一个完全不同的骰子。这当然可以！\n"
                start_code: "{print} '骰子这次会投出什么？'"
            10:
                story_text: "## 骰子\n大家投骰子是不是要花太长时间？在这一级，你可以让海迪一次投出所有骰子！\n"
                example_code: "```\n玩家们 = 安, 约翰, 杰西\n选项 = 1, 2, 3, 4, 5, 6\n{for} 玩家 {in} 玩家们\n    {print} 玩家 '投出了' 选项 {at} {random}\n    {sleep}\n```\n"
                start_code: '# 在这里写你的代码'
            6:
                story_text: "## 骰子\n你这次可以再做一个蚯蚓骰子，但是这次你可以计算你总共投了多少点数。\n你可能知道，投出蚯蚓算5点。现在每一轮过后你都能立即算出你投了多少点。\n这段代码会对一个骰子统计点数：\n"
                example_code: "```\n选项 = 1, 2, 3, 4, 5, 蚯蚓\n点数 = 0\n投 = 选项 {at} {random}\n{print} '你投出了' 投\n{if} 投 {is} 蚯蚓 点数 = 点数 + 5 {else} 点数 = 点数 + 投\n{print} '现在是' 点数 '点'\n```\n你能修改这段代码，让它统计8个骰子的总分吗？为此，你必须复制粘贴代码里的某几行。\n"
                example_code_2: "## 向前看\n\n你计算出8个骰子的点数了吗？这需要大量复制粘贴，对吗？在第7级，我们会让它更简单！\n"
                start_code: "{print} '骰子这次会投出什么？'"
            5:
                example_code: "```\n选项 {is} 1, 2, 3, 4, 5, 蚯蚓\n投 {is} _\n{print} '你投出了' _\n{if} _ {is} 蚯蚓 {print} '你不用再投了' _ {print} '你需要再来一次！'\n```\n"
                story_text: "## 骰子\n在这一级，你可以用`{if}`再制作一个骰子。\n补全示例代码，让它在你投出蚯蚓的时候说“你不用再投了”。\n\n不过也许你想要重新搞一个别的游戏里的完全不同的骰子。那也没关系！你只要做出对应的回应，比如在投出6的时候说“好”，在{else}中说“遗憾”。\n"
                start_code: "{print} '骰子这次会投出什么？'"
            4:
                story_text: "## 骰子\n在这一级，我们可以用骰子的点数来造句，当然要用引号。\n这次的示例代码没有全部完成。你能把代码补全吗？\n"
                example_code: "```\n选项 {is} 1, 2, 3, 4, 5, 蚯蚓\n{print} _ 你投出了 _\n{print} _ _ _ <- 你需要在这里写出选项\n```\n"
                start_code: "{print} '骰子这次会投出什么？'"
            3:
                example_code: "```\n选项 {is} 1, 2, 3, 4, 5, 蚯蚓\n{print} 选项 {at} {random}\n```\n"
                start_code: '{print} 骰子这次会投出什么？'
                story_text: "## 骰子\n在这一级我们可以从列表中选择。通过这种方式，我们能让电脑选择骰子哪一面朝上。\n看看你家里柜子里的游戏。\n有没有用骰子玩的游戏？你也可以用这段代码来复制它。\n比如，蚯蚓游戏用的骰子上印着1到5和一条蚯蚓。\n\n![蚯蚓游戏的骰子，有1到5和一条蚯蚓](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                story_text_2: "## Challenge\nThe dice in the example above are dice for a specific game. Can you make normal dice?\nOr other special dice from a different game?\n"
                example_code_2: "```\nchoices {is} _\n```\n"
            15:
                story_text: "## 骰子\n在这个游戏里，你需要用尽可能少的次数投出6。\n"
                example_code: "```\n选项 = 1, 2, 3, 4, 5, 6\n{print} '用最快的速度投出6！'\n投 = 0\n次数 = 0\n{while} 投 != 6\n    投 = 选项 {at} {random}\n    {print} '你投了' 投\n    次数 = 次数 + 1\n{print} '很好！你在' 次数 '次里投出了6！'\n```\n"
                start_code: '# 在这里写你的代码'
    secret:
        name: SuperSpy
        description: Make your own spy code
        default_save_name: language
        levels:
            12:
                start_code: '## place your code here'
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
            13:
                start_code: '## place your code here'
                story_text: "## Superspy\nThe code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        levels:
            13:
                story_text: "## 三连棋游戏\n在这个探险活动中，你可以编写一个三连棋游戏的程序。你可以和两个人一起玩，两个人轮流在印有九格方盘上划“x”或“o”字。\n谁先把三个同一记号排成横线、直线、或斜线, 谁就赢了！\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## place your code here'
            15:
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
            14:
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## place your code here'
        description: Play a game of Tic Tac Toe!
    blackjack:
        name: Blackjack
        description: Try to get as close to 21 as you can
        default_save_name: Blackjack
        levels:
            17:
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# place your code here'
    pressit:
        levels:
            14:
                start_code: '# place your code here'
                story_text: "Now that you learned how to use operators, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump every 5 steps or every 4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
            15:
                story_text: "Now that you have learned about the ```while``` loops, you can start using it on the turtle!\nThe turtle is now only allowed to take only 15 steps or turn 15 times, before he gets tired!\nTry to get as far as possible before the turtle gets tired! You can use your superjump after 2 turns\nor 5 steps.\n"
                start_code: '# place your code here'
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\nwhile tired_in > 0\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
            16:
                start_code: '# place your code here'
                story_text: "Lets move a little with a game of Twister!\nWhen everyone is ready, press the x key for the next move!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\nrepeat 20 times\n    l = limbs[random]\n    c = colours[random]\n    {if} x is {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
            12:
                example_code: "```\nchoose = 'You chose option: '\nprint 'A wild mouse appeared!'\nprint 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n is {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    sleep\n    {print} 'Congratulations you did it!'\n{if} c is {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    sleep\n    {print} 'The mouse got scared and ran away!'\n{if} b is {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r is {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
                start_code: '# place your code here'
                story_text: "Are you familiar with videogames? You walk into tall grass and are suddenly approached by\na very suspicious mouse. What will you do?\nIn this level we will make a small menu with different kinds of options.\nStoring text into a variable is quite handy for repeated uses.\nOption, I choose you!\n"
            13:
                story_text: "Now that you learned how to use ```and``` and ```or```, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump if he turns left and right first!\n"
                start_code: '# place your code here'
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        looked_left = 1\n    {if} d is {pressed}\n        turn right\n        looked_right = 1\n    {if} p is {pressed}\n        {if} looked_left is 1 and looked_right is 1\n            forward 40\n            looked_left = 0\n            looked_right = 0\n```\n"
            17:
                story_text: "Now that you learned how to use ```elif```, we can use it with ```pressed```too! Be aware,\n```elif ... is pressed ``` is not possible! That is why we are going to nest some ```elif```\nstatements into the ```pressed``` options. We also had to add ```:``` to the code to make\neverything work! imagine the turtle being able to do a superjump forward. by pressing ```p``` the\nturtle can make a superjump! However, the turtle can only do this jump every 5 steps or every\n4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}:\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}:\n        turn around\n    {if} a is {pressed}:\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}:\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}:\n        {if} jumptime <= 0 or spins <= 0:\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            print \"you need to take more steps or turns before you can superjump!\"\n```\n"
                start_code: '# place your code here'
            11:
                story_text: "Now that you have learned of the ```for ... in range ... to ...``` rule, you can use it for ```pressed```\ntoo! for example, try moving the turtle! The turtle grows everytime you press a linked button.\nThis way the turtle can move further every step!\n"
                example_code: "```\nleft = -90\nright = 90\naround = 180\nfor counter in range 1 to 15\n    stepsize = counter * 5\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
                start_code: '# place your code here'
            9:
                example_code_2: "```\nstepsize = 25\nleft = -90\nright = 90\naround = 180\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
                start_code: '# place your code here'
                story_text: "Now that you know how to nest multiple statements, you can also do this with {pressed}!\nBy nesting a pressed in a {repeat} loop, you can repeatedly press buttons and make something happen.\nNow we know you could do this before, but by using the indents you have much more overview!\nTry it counting to 5, for example!\n"
                example_code: "```\ntotal = 1\n{repeat} 5 times\n    {if} x is {pressed}\n        {print} total\n        {print} 'keep pressing!'\n        total = total + 1\n```\n"
                story_text_2: "Besides counting, you can now also move the turtle in many more ways than only forward or backwards!\nTry making some figures by walking the turtle around!\n"
            10:
                story_text: "In this level you can make the turtle draw you a figure. The turtle is raring to go.\nGive the turtle the starting signal by pressing the x or y key on your keyboard.\nCan you let the turtle draw you another figure?\n"
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} -90\n{if} y is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} 90\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "## Press it!\nIn the introduction you were also told about the new keyword ```pressed```! Using ```pressed```\ncan make coding much more interactive, and you can have live control of what is executed!\nIn the upcoming levels you will learn how ```pressed``` makes this possible and what uses ```pressed```\nhas.\nBesides printing text, there is a whole other variety of uses for ```pressed```\nFor example, you can also link turtle commands to keys! Try it!\n"
                example_code: "```\nif x is {pressed} forward 50\n```\n"
                story_text_2: "## If Else Pressed\nYou can also assign an else statement to ```pressed```. The else statement will be executed\nwhenever you press a key other than the key you assigned.\n"
                example_code_2: "```\nif y is {pressed} {print} 'Amazing! You pressed the y key!'\nelse {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# place your code here'
            6:
                story_text: "Did you know you can also make a calculator using ```pressed```?\nGive the calculator two numbers and press the m key to multiply.\nNow you don't have to bring your own!\nTry other keys and see what happens! Do you get a different result?\n"
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\nprint 'press a to add, s to substract, d to divide, m to multiply'\nif a is {pressed} result = first + second\nif s is {pressed} result = first - second\nif d is {pressed} result = first / second\nif m is {pressed} result = first * second\nprint 'The answer is ' result\n```\n"
                start_code: '# place your code here'
            7:
                story_text: "You might have tried it in level 5 and 6, pressing the key linked to ```pressed``` multiple\ntimes. If you did, you noticed that this did nothing. but now that you have learned about repeat, we\ncan press keys multiple times! Make the turtle walk forward!\n"
                example_code: "```\nrepeat 3 times if x is {pressed} forward 15\n```\n"
                start_code: '# place your code here'
            8:
                story_text: "## Press It!\nNow that you need to use indents for the {if} and {else} statements,\nyou will also have to indent code when using {pressed}! Don't worry,\nit works te same as with the other statements, see the example!\nPress another key instead of x and see what happens.\n"
                example_code: "```\n{if} x is {pressed}\n    {print} 'Only the cool kids press the x key.'\n{else}\n    {print} 'The adventurous kids press something else.'\n```\n"
                start_code: '# place your code here'
        default_save_name: Pressit
        name: Press it!
        description: Try linking a keyboard key to a command!
