adventures:
    default:
        name: "Introduction"
        description: "Level explanation"
        default_save_name: "intro"
        levels:
            1:
                story_text: "## Velkommen til Hedy\nPå Nivå 1 kan du bruke kommandoene `{print}`, `{ask}` og `{echo}`.\nSkriv koden i programmeringsfeltet, eller trykk på den grønne boksen i eksempelkodeblokken og koden vil bli skrevet for deg!\nPrøv koden selv med den grønne 'Kjør kode' knappen under programmeringsfeltet.\n\nDu kan skrive tekst til skjermen ved å bruke `{print}` kommandoen.\n"
                example_code: "```\n{print} Hallo!\n{print} Velkomen til Hedy!\n```\n"
                story_text_2: "Du kan også spørre etter inndata med `{ask}` og gjenta det tilbake med en `{echo}`kommando.\n"
                story_text_3: "La oss begynne! Er du ikke sikker på hva du vil lage? I de andre fanene finner du ideer til programmer å bygge.\n"
                example_code_2: "```\n{ask} Hva er navnet ditt?\n{echo} hallo\n```\n"
                start_code: '{print} hallo verden!'
            2:
                story_text: "## Variabler\nPå nivå 2 lærer vi to nye kommandoer: `{is}` og `{sleep}`.\nDu kan navngi et ord med `{is}`. Dette kalles en variabel. I dette eksempelet har vi laget en variabel kalt 'navn' og en variabel kalt 'alder'. Du kan bruke ordet 'navn' hvor som helst i koden og det vil bli erstattet av Hedy, som dette:\n\nPå denne måten trenger du ikke lenger `{echo}`kommandoen!\n"
                example_code: "```\nnavn {is} Hedy\nalder {is} 15\n{print} navn is alder år gammel\n```\n"
                story_text_2: "`{print}` fungerer fortsatt som før, men `{ask}` kommandoen har endret seg. Fra nå må du bruke en variabel når du bruker `{ask}` kommandoen. Det ser slik ut:\n"
                example_code_2: "```\nsvar {is} {ask} Hva heter du?\n{print} Hallo svar\n```\n"
                story_text_3: "Enda en ny kommando på dette nivået er `{sleep}`. Denne kommandoen setter programmet ditt på pause i et sekund. Hvis du skriver et tall bak {sleep} kommandoen, vil programmet settes på pause i så mange sekunder.\n"
                example_code_3: "```\n{print} Min favorittfarge er...\n{sleep} 2\n{print} grønn!\n```\n"
                start_code: '{print} hallo verden!'
            3:
                story_text: "## Lag en liste!\nPå nivå 3 kan du lage lister. Du kan la datamaskinen velge noe tilfeldig fra listen, du gjør det med `{at} {random}`.\n"
                example_code: "\n```\ndyr {is} hund, katt, hest\n{print} dyr {at} {random}\n```\n"
                story_text_2: Du kan også legge til ting i listen med `{add}` og fjerne ting fra listen med `{remove}`.
                example_code_2: "\n```\ndyr {is} hund, katt, hest\n{add} pingvin {to_list} dyr\n{remove} katt {from} dyr\n{print} dyr {at} {random}\n```\n"
                start_code: '{print} hallo verden!'
            4:
                start_code: "{print} 'Hallo verden'"
                story_text: "## 'Quotation marks'\nPå nivå 4 har `{ask}` og`{print}` blitt endret.\n\nDu må fra nå av legge tekst du vil skrive ut mellom fnutter.\n\nDette er nyttig, fordi nå kan du skrive ut alle ordene du vil. Også de ordene du har brukt til å lagre noe med `{is}`.\n\nDe fleste programmeringsspråk bruker også fnutter når de skriver ut ting, så vi går altså enda et steg nærmere ekte programmering!\n"
                example_code: "```\n{print} 'Du må bruke fnutter fra nå av!'\nsvar {is} {ask} 'Hva må vi bruke fra nå av?'\n{print} 'Vi må bruke' svar\n```\n"
                story_text_2: "## Eventyrene blir mer og mer vanskelig\nEventyrene blir mer og mer vanskelig nå i de rosa fanene.\nSå det er lurest å starte til venstre med Fortellingen, og jobbe seg mot høyre. På denne måten får du mer og mer utfordring for hvert eventyr.\n"
            5:
                start_code: "navn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'kult!' {else} {print} 'meh'"
                story_text: "## Hvis... ellers...\nPå nivå 5 er det noe nytt å lære seg, `{if}`! Med `{if}` kommandoen kan du velge mellom to forskjellige valg.\nDenne koden skriver ut 'nice' hvis du skriver inn Hedy som navn, og 'buu!' hvis du skriver noe annet.\n`{ask}` and `{print}` vil fungere på samme måte som de gjorde i nivå 4.\n"
                example_code: "```\nnavn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'wow!' {else} {print} 'fysj!'\n```\n"
                story_text_3: "## Lister\nHvis vi skal sjekke om noe er i en liste så kan vi nå bruke `{in}` kommandoen.\nDenne koden skriver ut 'Vakkert!' hvis du velger grønn eller gul, og 'meh' hvis du skriver noe annet.\n"
                example_code_3: "```\nvakre_farger {is} grønn, gul\nfarge{is} {ask} 'Hva er din favorittfarge?'\n{if} farge {in} vakre_farger {print} 'Vakert!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "Noen ganger kan kode som bruker `{if}` bli veldig lang. <br>Du kan splitte koden over to linjer og begynne neste linje med `{else}` slik som dette:\n"
                example_code_2: "```\nnavn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
            6:
                start_code: "{print} '5 ganger 5 er ' 5 * 5"
                story_text: "## 1 + 1\nPå dette nivået skal du få lære noe nytt! Du kan nå bruke Hedy til å gjøre matte.\n\nÅ plusse sammen to tall er enkelt, du bare gjør som du ville gjort i mattetimen, for eksempel: `5 + 5`. Minus funker også: `5 - 5`.\n\nÅ gange er litt anederledes, fordi det ikke er et gangesymbol på tastaturet ditt. Bare se hvis du vil, der er virkelig ikke et gangeteng.\nDerfor bruker vi vanligvis en stjerne `*` når vi ganger. `5 * 5`kan leses som \"5 ganger 5\". Det kan være du må holde inne SHIFT knappen for å kunne skrive *-tegnet.\n"
                example_code: "```\n{print} '5 pluss 5 er ' 5 + 5\n{print} '5 minus 5 er ' 5 - 5\n{print} '5 ganger 5 er ' 5 * 5\n```\n"
                story_text_2: "Vi skal også gjøre en liten endring i hvordan vi lagrer et ord i en variabel! Du kan nå bruke `=` istedenfor `{is}` når du lagrer en tekst eller et tall i en variabel, slik:\n"
                example_code_2: "```\nnavn = Hedy\nsvar = 4 + 20\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy er morro!'"
                story_text: "## Nivå 7! Nivå 7!\nNivå 7 legger til `{repeat}` kommandoen. {repeat} kan brukes til å kjøre en kodelinje flere ganger.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy {is} morro!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hallo folkens'\n    {print} 'Dette vil bli skrevet ut 5 ganger'"
                story_text: "## Innrykk\n`{ask}` {and} `{print}` fungerer fortsatt slik du er vandt til, men `{if}` {and} `{repeat}` har endret seg litt!\nDu kan nå kjøre små blokker med kode sammen, men du må gi koden korrekt *innrykk*.\nDet betyr at du må legge til fire mellomrom på starten av kodelinjen. Du må også ha nytt innrykk når du skal lage en blokk på en linje.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hallo alle sammen'\n    {print} 'Dette blir gjentatt 5 ganger'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    matrett = {ask} 'Hva vil du ha?'\n    {if} matrett {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza er bedre'"
                story_text: "## Alt på en gang nå!\nPå dette nivået kan du bruke både `{if}` med kodeblokker {and} `{repeat}` sammen!\nI eksempelet kan du se en `{if}` kommando inni en `{repeat}` kommando. Det er også mulig å gjøre det motsatte (`{repeat}` inni en `{if}`).\nDu kan også legge en `{if}` inni en annen `{if}` og en `{repeat}` inni en `{repeat}`.\nPrøv å se om du får det til!\n"
                example_code: "```\n{repeat} 3 {times}\n    matrett = {ask} 'Hva vil du ha?'\n    {if} matrett {is} pizza\n        {print} 'bra!'\n    else\n        {print} 'pizza er bedre'\n```\n"
            10:
                start_code: "dyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr"
                story_text: "## For hver ting i listen min\nPå dette nivået skal vi lære et nytt nøkkelord `{for}`. Med `{for}` kan du lage en liste og bruke alle elementene i listen.\n`{for}` lager en kodeblokk, på samme måte som `{repeat}` og `{if}`, så alle linjene i kodeblokken må starte med 4 mellomrom (innrykk).\n"
                example_code: "```\ndyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr\n```\n"
            11:
                start_code: "{for} teller {in} {range} 1 {to} 5\n    {print} teller"
                story_text: "## Løkker!\n`{print}` fungerer på samme måten som før, men vi legger til en ny versjon av `{for}`. Nå kan du skrive`{for} teller {in} {range} 1 {to} 5` and og bruke `teller` i programmet ditt. En {range} er bare noen tall som kommer etter hverandre på tall-linjen.\nPrøv det ut og se hva som skjer! Husk å ha innrykk på linjen etter `{for}` og `{if}` uttrykkene (det betyr at du må starte setningen med fire mellomrom)\n"
                example_code: "```\n{for} teller {in} {range} 1 {to} 5\n    {print} teller\n```\n"
            12:
                start_code: "{print} 'desimaltall må bruke et punktum nå'\n{print} 2.5 + 2.5"
                story_text: "## Tall og tekst\n**Desimaltall**\nFør dette nivået har det ikke vært mulig å bruke desimaltall som 1.5 i Hedy, men fra nå av kan du det! Legg merke til at datamaskiner bruker punktum `.` som skilletegn i desimaltall.\n"
                example_code: "```\n{print} 'To og en halv pluss to og en halv er lik...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**All tekst må være inni fnutter**\nFra dette nivået må du nå ha fnutter rundt tekst som du lagrer ved hjelp av `=`:\n"
                example_code_2: "```\nnavn = 'Roboten Hedy'\n{print} 'Hallo ' navn\n```\n"
                story_text_3: "**All tekst i lister krever nå fnutter også**\nTekst i lister er også tekst, de må også ha fnutter rundt seg. Med dette mener vi at hver element i listen krever fnutter.\nDette lar deg lagre to ord som et element i listen, for eksempel 'Iron Man'.\n"
                example_code_3: "```\nsuperhelter = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_4: "**All tekst etter `{if}` sammenligninger krever også fnutter nå**\n"
                example_code_4: "```\nnavn = {ask} 'Hva heter du?'\n{if} navn= 'Roboten Hedy'\n    {print} 'Hei hei!'\n```\n"
                story_text_5: "**Tall trenger ikke fnutter**\nNår du lagrer tall med `=` trenger du ikke å bruke fnutter:\n"
                example_code_5: "```\npoeng = 25\n{print} 'Du fikk ' poeng\n```\n"
                story_text_6: "**Matte med ord** Fra dette nivået kan du også bruke `+` tegnet til å legge sammen tekster. For eksempel:\n"
                example_code_6: "```\na = 'Hallo '\nb = 'verden!'\nprint a + b\n```\n"
            13:
                start_code: "navn = {ask} 'Hva heter du?'\nalder = {ask} 'Hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er den ekte Hedy!'"
                story_text: "## Og... Eller?\nNå skal vi lære om `{and}` og`{or}`! Hvis du har lyst til å sjekke to påstander trenger du ikke å bruke to `{if}`, du kan bruke `{and}` og `{or}`. Hvis du bruker `{and}` må begge påstandene være sann. Vi kan også bruke `eller`, da trenger kun en av påstandene å være sann.\n"
                example_code: "```\nnavn = {ask} 'Hva heter du?'\nalder = {ask} 'Hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er den ekte Hedy'\n```\n"
            14:
                start_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder < 13\n    {print} 'Du er yngre enn meg!'\n{else}\n    {print} 'Du er eldre enn meg!'"
                story_text: "## Stor, Større, Størst!\nVi skal lære enda flere nye ting. Det kan være du allerede kjenner til disse fra mattetimen, `<`og `>`.\n`<` kaller vi 'mindre enn'-tegnet. Dette bruker vi for å sjekke om det første tallet er *mindre enn* det andre, f.eks: `alder < 12`kan leses som `alder er mindre enn 12`.\nHvis du vil sjekke om det første tallet er mindre eller like stort som det andre, kan du bruke `<=`, f.eks: `alder <= 11`.\n`>` kaller vi `større enn`-tegnet. Dette bruker vi for å sjekke om det første tallet er *større enn* det andre, f.eks: `poeng > 10` kan leses som `poeng er større enn 10`.\nHvis du vil sjekke om det første tallet er større eller like stort som det andre, kan du bruke `>=`, f.eks: `poeng >= 11`.\nDu kan bruke disse sammenligningene i en `hvis`, for eksempel slik:\n"
                example_code: "```\nalder = {ask} 'Hvor gammel er du?'\n{if} alder > 12\n    {print} 'Du er eldre enn meg!'\n```\n"
                story_text_2: "Fra dette nivået, hvis du vil sjekke om to ting er like, kan du nå bruke to er-lik tegn. Dette er måten å sjekke om ting er lik i de fleste programmeringsspråk:\n"
                example_code_2: "```\nnavn = {ask} 'Hva heter du?'\n{if} navn == 'Hedy'\n    {print} 'Du er kul!'\n```\n"
                story_text_3: "Du kan også sjekke om ting *ikke* er lik noe annet ved å bruke `!=`, for eksempel slik:\n"
                example_code_3: "```\nnavn = {ask} 'Hva heter du?'\n{if} navn != 'Hedy'\n    {print} 'Du er ikke Hedy!'\n```\n"
            15:
                start_code: "svar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'Det svaret var riktig'"
                story_text: "## Flere løkker!\nVi skal lære en ny løkke, `{while}` løkken! Denne løkken fortsetter å kjøre så lenge påstanden er sann.\nDet er derfor veldig viktig å endre verdien i løkken.\n\nI eksempelkoden lar vi løkken kjøre til vi får det riktige svaret.\nHvis ikke vi aldri får det riktige svaret, så fortsetter løkken for alltid!\n"
                example_code: "```\nsvar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'A korrekt svar ble gitt'\n```\n"
            16:
                start_code: "frukt = ['eple', 'banan', 'kirsebær']\n{print} frukt"
                story_text: "## Mer og mer likt virkelig kode\nVi skal nå lage lister på Python måten, med firkantparanteser rundt listene! Vi beholder fnuttene rundt tekstene i listen slik som vi lærte på et tidligere nivå.\nDu kan bruke firkanparantesene til å peke på en plass i listen.\n"
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Klar eller ei, her kommer jeg!'"
                story_text: "Nå gjør vi en liten endring i koden når vi bruker innrykk. Hver gang vi trenger innrykk, må vi nå skrive `:` på linjen før innrykket.\n\nPå dette nivået kan du også bruke en ny kommando `{elif}`. `{elif}` er en forkortelse for {else} {if} og du trenger det når du har lyst til å lage kode med 3 (eller fler!) alternativer.\nSjekk hvordan det blir!\n```\npremier = ['1 million kroner', 'en eplekake', 'ingenting']\ndin_premie = premier[{random}]\n{print} 'Du vinner ' din_premie \n{if} din_premie == '1 million kroner':\n    {print} 'Hurra! Du er rik!'\n{elif} din_premie == 'en eplekake':\n    {print} 'Digg, eplekake!'\n{else}:\n    {print} 'Bedre lykke neste gang..'\n```\n"
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
            18:
                start_code: "navn = 'Hedy'\n{print}('Mitt navn er ', navn)"
                story_text: "## Level 18\nVi har ankommet nivået hvor vi skriver virkelig pythonkode! Python er riktignok ikke på norsk, men du kan bruke knappen oppe i høyre hjørne av kodefeltet hvis du vil se hvordan koden ser ut på engelsk.\nNå når vi har nådd ekte pythonkode må vi bruke paranteser når vi bruker {print} og {range}.\nDette ser slik ut:\n```\n{print}('Mitt navn er Hedy!')\n```\nFor å skrive ut mer enn en ting må du bruke et komma mellom tingene.\n```\nnavn = 'Hedy'\n{print}('Mitt navn er ', navn)\n```"
                example_code_3: "```\n{print}('My name is Hedy!')\nname = {input}('What is your name?')\n{print}('So your name is ', name)\n```\n"
                example_code: "```\n{print}('my name is Hedy!')\n```\n"
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: "```\ntemperature = 25\n{print}('Is is ', temperature, 'degrees outside')\n```\n"
                story_text_3: "##  Input\nThe final change we will need to make to get Python code is changing `{ask}` into `{input}`."
    story:
        name: Fortelling
        levels:
            5:
                start_code: "{print} 'Her starter fortellingen din!'"
                story_text: "## Fortelling\nPå dette nivået kan du programmere forskjellige avsluttninger, som vil gjøre fortellingen din enda gøyere.\n\nTenk på to avslutninger på fortellingen, for eksempel:\n\n- Prinsessen går gjennom skogen\n- Hun treffer på et monster\n\n- Lykkelig slutt: Hun tar sverdet sitt og monsteret løper sin vei\n- Ulykkelig slutt: Monsteret spiser prinsessen\n\nDu kan også sørge for at et navn kan bli skrevet inn på nytt. Det fungerer akkurat som på de forrige nivåene. Du kan kombinere det med en `{if}`, så har du allerede laget et helt program!\n"
                example_code: "```\nnavn {is} {ask} 'Hvem er det som går i skogen?'\n{print} navn 'går i skogen'\n{print} navn 'støter på et monster'\nslutt {is} {ask} 'Vil du ha en glad eller trist slutt?'\n{if} slutt {is} glad {print} navn 'tar sverdet og monsteret løper sin vei'\n{else} {print} 'Monsteret spiser' navn\n```\n"
            4:
                start_code: "{print} 'Fortellingen din vil bli skrevet her!'"
                story_text: "## Fortelling\nDu kan ha lagt merke til at det fremdeles er et problem med forrige nivå. Prøvde du å skrive ut en settning som inneholdt ordet navn?\nDu kan fikse det på dette nivået. Du må bruke hermetegn rundt alt som du vil skrive ut.\n"
                example_code: "```\nnavn {is} Ola\n{print} 'Navnet på hovedpersonen er' navn\n{print} navn 'skal nå gå en tur i skogen'\n{print} navn 'er litt redd'\ndyrene {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} 'Han hører lyden av en' dyrene {at} {random}\n{print} navn 'er redd for at det spøker i skogen'\n```\n"
            1:
                story_text: "## Lag en fortelling\nPå nivå 1 kan du lage en fortelling med en hovedperson som du velger selv.\n\nSom første linje, bruk denne koden:\n\n```\n{ask} hvem er stjernen i fortellingen din?\n```\n\nEtter den første linjen, start med `{print}` hvis du vil at setningen skal skrives ut. \nDu bruker `{echo}` hvis du vil ha hovedpersonen din skal være på slutten av setningen.\n"
                example_code: "\n```\n{ask} Hovedpersonen i fortellingen er\n{print} Hovedpersonen skal nå på tur i skogen\n{echo} Han er litt redd,\n{print} Han hører skumle lyder overalt\n{print} Han er redd dette er en forhekset skog\n```\n"
                start_code: '{print} Fortellingen din starter her'
                story_text_2: "## Challenge\nCan you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?\n"
            2:
                story_text: "## Fortelling\nPå nivå 2 kan du gjøre fortellingen din gøyere. Hovedpersonen sitt navn kan nå være overalt i setningen.\n\nDu må programmere litt ekstra for det. Du må nå navngi hovedpersonen din først.\n\nDa kan du bruke navnet hvor som helst i en setning.\n"
                example_code: "\n```\nnavn {is} {ask} Hva heter hovedpersonen?\n{print} navn skal nå løpe i skogen\n{print} navn er litt redd\n{print} Plutselig hører han en skummel lyd...\n{sleep}\n{print} navn er redd dette er en forhekset skog\n```\n"
                start_code: '{print} fortellingen din'
            12:
                story_text: "## Fortelling\nPå dette nivået kan du bruke hermetegn for å lagre flere ord i en variabel.\n"
                example_code: "\n```\nnavn = 'Dronningen av England'\n{print} navn ' spiste kake, da plutselig ...'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "## Fortelling\nPå dette nivået kan du bruke {for} kommandoen i fortellingen din. På denne måten kan du enkelt programmere barneboken 'brunbjørn, brunbjørn, hva ser du'.\n"
                example_code: "```\ndyreliste = rød fugl, svart sau, grønn frosk, gul and, lite barn\n{print} 'brunbjørn'\n{print} 'brunbjørn'\n{print} 'Hva ser du?'\n{for} dyr {in} dyreliste\n    {print} 'Jeg ser et ' dyr ' som ser på meg'\n    {print} dyr\n    {print} dyr\n    {print} 'Hva ser du?'\n{print} 'Jeg ser alle dyrene som ser på meg!'\n```\n"
                start_code: '# skriv koden din her'
            9:
                story_text: "## Fortelling\nPå dette nivået kan du bruke nøsting til å putte {if}, {repeat} eller {for}kommandoer inne i andre {if}, {repeat} eller {for}kommandoer. Dette gir deg mange muligheter og virkelig gjør fortellingen din interaktiv.\n"
                example_code: "```\n{print} 'Robin er på tur i byen'\nplassering = {ask} 'Skal Robin gå inn i en butikk eller går hun hjem?'\n{if} plassering {is} butikk\n    {print} 'Hun går inn i butikken.'\n    {print} 'Robin ser en bok som ser interessant ut'\n    bok = {ask} 'Kjøper Robin boken?'\n    {if} bok {is} ja\n        {print} 'Robin kjøper boken og går hjem'\n    {else}\n        {print} 'Robin forlater butikken og går hjem'\n{else}\n    {print} 'Robin går hjem'\n```\n"
                story_text_2: "Eksempelet over er ganske rett frem, men med `{if}` inni `{if}` kan du virkelig utdype koden og gjøre fortellingen din om til et skikkelig spill. Sjekk ut dette eksempelet!\n"
                example_code_2: "## Forseggjort kode\n```\nsverd = tapt\nspill = kjører\n{print} 'Helten vår går gjennom skogen'\n{print} 'Veien deler seg i to'\n{repeat} 2 {times}\n    {if} spill {is} kjører\n        vei = {ask} 'Hvilken vei skal hun velge?'\n        {if} vei {is} venstre\n            {if} sverd {is} funnet\n                {print} 'Helten vår treffer på en drage!'\n                {print} 'Heldigvis har helten vår et sverd til å beseire monsteret!'\n                spill = ferdig\n            {else}\n                {print} 'Helten vår treffer på en drage, men hun har ingen våpen!'\n                {print} 'Helten vår blir tatt av dragen...'\n                {print} 'Prøv igjen'\n                spill = ferdig\n        {if} vei {is} høyre\n            {if} sverd {is} tapt\n                {print} 'Helten vår finner et sverd'\n                {print} 'Dette kan være veldig nyttig'\n                sverd = funnet\n            {else}\n                {print} 'Hun har allerede funnet sverdet. Det er ikke noe mer der.'\n                {print} 'Hun går tilbake'\n```\n"
                start_code: '# skriv koden din her'
            8:
                story_text: "## Fortelling\nPå dette nivået kan du bruke flere linjer i din {if} kommando. På denne måten kan du oppgradere din lykkelige eller triste slutt!\n"
                example_code: "```\n{print} 'Å NEI! T-rexen haler innpå!'\nslutt = {ask} 'Vil du ha en lykkelig eller en trist slutt?'\n{if} slutt {is} lykkelig\n    {print} 'Akkurat i tide hopper Rolf tilbake i tidsmaskinen!'\n    {print} 'Mikal skriver inn koden og...'\n    {print} '\U0001F4A5PANG!\U0001F4A5'\n    {print} 'De er tilbake i garasjen sin'\n{else}\n    {print} 'Mikal roper KOM IGJEN ROLF! LØP RASKERE!'\n    {print} 'Men Rolf løper for sakte...'\n    {print} 'T-rexen haler innpå og spiser ham i ett stort jafs!\U0001F996'\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "## Fortelling\nI en fortelling sier noen ord flere ganger. For eksempel når noen roper etter hjelp eller synger en sang.\nDu kan putte inn slike repetisjoner i historien din på dette nivået med `{repeat}`.\n"
                example_code: "```\n{print} 'Prinsen ropte og ropte etter hjelp'\n{repeat} 5 {times} {print} 'Hjelp!'\n{print} 'Hvorfor hjelper ingen meg?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Hjelp!'"
            3:
                story_text: "## Fortelling\nPå nivå 3 kan du gjøre historien din enda mer gøy. Du kan bruke tilfeldighet for å velge et hvilket som helst monster, dyr eller hindring slik:\n"
                example_code: "```\ndyrene {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} Han hører nå lyden av en dyrene {at} {random}\n```\n"
                story_text_2: "Kommandoen `{add}` kan også være nyttig i historien din.\n"
                example_code_2: "```\n{print} Han hører en lyd\ndyrene {is} \U0001F43F, \U0001F994, \U0001F987, \U0001F989\ndyret {is} {ask} Hva tror du det er?\n{add} dyret {to_list} dyrene\n{print} det var en dyrene {at} {random}\n```\n"
                story_text_3: "Dette er et eksempel på `{remove}` kommandoen i historien din\n"
                example_code_3: "```\n{print} Ryggsekken hans ble alt for tung.\n{print} Inni den var en vannflaske, en lommelykt og en murstein.\nryggsek {is} vannflaske, lommelykt, murstein\ndump {is} {ask} Hvilken ting skal han legge igjen?\n{remove} dump {from} ryggsekk\n```\n"
                start_code: '{print} Fortellingen din'
            15:
                story_text: "## Fortelling\nVed hjelp av `{while}` løkke kan man gjøre historier mer interessante. For eksempel kan du bruke `{while} spillet {is} 'i gang'`så du kan spille til spillet er over.\nEller så kan du bruke `{while} sverd {is} 'mistet'` så spilleren ikke kan fortsette før de har funnet noe.\n"
                example_code: "```\nkeys = 'mistet'\n{print} 'Du står i hagen din og har mistet nøklene dine.'\n{print} 'Hvor vil du lete etter de?'\n{print} 'Du kan velge mellom: tre, blomsterbed, stein, postboks'\n{while} keys == 'mistet'\n    location = {ask} 'Hvor vil du lete?'\n    {if} location == 'blomsterbed'\n        {print} 'Der var de ja!'\n        keys = 'funnet'\n    {else}\n        {print} 'Nei, de er ikke ved ' location\n{print} 'Nå kan du gå inn i huset!'\n```\n"
                start_code: '# skriv koden din her'
            13:
                story_text: "## Fortelling\nVed å bruke `{and}` og `{or}` kommandoene, kan du korte ned historier. For eksempel, sjekk ut historien om dragen.\n"
                example_code: "```\nsverd = 'tapt'\nspill = 'i gang'\n{print} 'Helten vår går gjennom skogen'\n{print} 'Veien deler seg i to'\n{for} i {in} {range} 0 {to} 2\n    {if} spill {is} 'i gang'\n        vei = {ask} 'Hvilken vei skal hun velge?'\n        {if} vei {is} 'venstre' {and} sverd {is} 'funnet'\n            {print} 'Helten vår støter på en drage!'\n            {print} 'Heldigvis har helten et sverd til å beseire beistet'\n            spill = 'ferdig'\n        {if} vei {is} 'venstre' {and} sverd {is} 'tapt'\n            {print} 'Helten vår støter på en drage, men hun har ingen våpen!'\n            {print} 'Helten vår blir tatt av monsteret...'\n            {print} 'Prøv igjen'\n            spill = 'ferdig'\n        {if} vei {is} 'høyre' {and} sverd {is} 'funnet'\n            {print} 'Du har allerede funnet sverdet, det er ikke noe mer her'\n            {print} 'Hun går tilbake'\n        {if} vei {is} 'høyre' {and} sverd {is} 'tapt'\n            {print} 'Helten vår finner et sverdy'\n            {print} 'Dette kan være veldig hendig'\n            sverd = 'funnet'\n```\n"
                start_code: '# skriv koden din her'
        description: Fortelling
        default_save_name: Fortelling
    turtle:
        levels:
            4:
                start_code: "{print} 'Tegner figurer'\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n"
                story_text: "## La oss tegne\nPå nivå 4 kan du bruke fnutter med `{print}` og `{ask}`. Også når du tegner!\n"
                example_code: "```\n{print} 'Tegner figurer'\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
                story_text_2: "## Colors\nYou can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
            1:
                story_text: "## La oss tegne\nDu ha også bruke Hedy til å tegne. Ved å kombinere svinger og linjer så kan du lage firkanter eller trapper!\n\nVed å bruke `{forward}` kan du tegne en linje fremover. Talle bak kommandoen bestemmer hvor langt skilpadden vil gå. `{turn} {right}` snur skilpadden en kvart runde med klokken, `{turn} {left}` snur skilpadden mot klokken.\n\nDette er starten på en liten trapp. Kan du få den til å ha 5 trinn?\n"
                example_code: "```\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "## Skilpadde\nPå nivå 1 kunne skilpadden kun snu seg til høyre eller venstre. Det er litt kjedelig!\nPå nivå 2 kan den peke nesen i alle retninger.\n\nBruk 90 til å snu en kvart omdreining. Vi kalle dette grader. En full rotasjon er 360 grader.\nKan du lage en liten figur med denne koden? Kanskje et triangel eller en sirkel?\n"
                example_code: "\n```\n{print} Tegner figurer\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                start_code: "{print} Skilpadderace!\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n"
                story_text_2: "Also, in level 1 the turtle could only turn left or right. That is a bit boring!\nIn level 2 he can point his nose in all directions.\n\nUse 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.\nCan you make a figure with this code? Maybe a triangle or a circle?\n"
                example_code_2: "```\n{print} Drawing figures\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
            3:
                story_text: "## Letende skilpadde\nPå dette nivået kan du bruke `{at} {random}` med den tegnende skilpadden. Et tilfeldig valg gjør at skilpadden går en ny rute hver gang.\nBruk `{at} {random}` for å velge en verdi fra listen. Du kan kopiere og lime inn line 2 og 3 for å lage en lenger tilfeldig sti.\n"
                example_code: "\n```\nvinkler {is} 10, 50, 90, 150, 250\n{turn} vinkler {at} {random}\n{forward} 25\n```\n"
                start_code: "vinkler {is} 10, 50, 90, 150, 250\n{turn} vinkler {at} {random}\n{forward} 25\n"
            5:
                story_text: "## La oss tegne\nPå nivå 5 kan du ta valg med `{if}`. For eksempel mellom forskjellige typer figurer.\n"
                example_code: "```\n{print} 'Tegner figurer'\nfigur {is} {ask} 'Vil du lage en firkant eller en trekant?'\n{if} figur {is} trekant vinkel {is} 120\n{else} vinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                start_code: "{print} 'Tegner figurer'\nfigur {is} {ask} 'Vil du lage en firkant eller en trekant?'\n{if} figur {is} trekant vinkel {is} 120 {else} vinkel {is} 90\n{turn} vinkel\n{forward} 25\n"
            8:
                story_text: "## La oss tegne\nNå som vi kan repetere flere linjer så kan vi lage figurer lettere.\nVi trenger bare å sette vinkelen en gang og så bruke den variabelen i en `{repeat}`.\n"
                example_code: "```\nvinkel = 90\n{repeat} 10 {times}\n    {turn} vinkel\n    {forward} 50\n```\n"
                story_text_2: "## Interaksjon\nVi kan også forbedre programmet som tegner forskjellige figurer.\nKan du finne ut hvor langt skilpadden må snu seg her? Fullfør koden og du kan tegne et hvilket som helst polygon!\n"
                example_code_2: "```\nhjørner = {ask} 'Hvor mange hjørner skal jeg tegne?'\ngrader = 360 / hjørner\n{repeat} grader {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "hjørner = {ask} 'Hvor mange hjørner skal jeg tegne?'\n"
            7:
                story_text: "## La oss tegne\nPå dette nivået kan du repetere en linje kode med `{repeat}`.\n"
                example_code: "```\n{print} 'Tegn figurer'\n{repeat} 3 {times} {forward} 10\n```\n"
                start_code: "{print} 'Tegn figurer'\n{repeat} 3 {times} {forward} 10\n"
            6:
                story_text: "## La oss tegne\nPå dette nivået kan du bruke regning for å tegne forskjellige figurer.\nDu kan ha lært på skolen at å snu en full sirkel er 360 grader. Hvis ikke så vet du det nå!\nDet er derfor du bruker 90 grader for en firkant. 360 grader delt på 4 er 90.\nNå som vi kan gjøre matte med Hedy så kan vi tegne alle figurene vi vil!\n"
                example_code: "```\nhjørner = {ask} 'Hvor mange hjørner vil du ha?'\ngrader = 360 / hjørner\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n```\n"
                start_code: "{print} 'Tegner figurer'\n"
        name: Skilpadde
        description: Lag din egen tegning
        default_save_name: Skilpadde
    rock:
        levels:
            9:
                start_code: '# skriv koden din her'
                story_text: "## Stein, saks, papir\nPå dette nivået kan du programmere hele stein, saks, papir ved å plassere `{if}`-kommandoer inni `{if}`-kommandoer. Kan du fullføre koden?\n"
                example_code: "```\nvalgene {is} stein, saks, papir\nditt_valg {is} {ask} 'Hva velger du?'\n{print} 'Du valgte ' ditt_valg\ndatamaskinens_valg {is} valgene {at} {random}\n{print} 'Datamaskinen valgte ' datamaskinens_valg\n{if} datamaskinens_valg {is} ditt_valg\n    {print} 'Uavgjort'\n{if} datamaskinens_valg {is} stein\n    {if} ditt_valg {is} papir\n        {print} 'Du vant!'\n    {if} ditt_valg {is} saks\n        {print} 'Du tapte!'\n```\n"
            1:
                story_text: "## Stein, saks, papir\nPå nivå 1 kan du starte med spillet stein, saks, papir.\n\nMed `{ask}` kan du ta et valg og med `{echo}` kan du gjenta det valget.\n"
                example_code: "\n```\n{print} hva velger du?\n{ask} velg mellom stein, saks, papir\n{echo} du valgte:\n```\nIstedenfor å bruke ord så kan du selvfølgelig bruke emoji: ✊✋✌\n"
                start_code: '{print} Velkommen til din egen stein saks papir!'
                story_text_2: "## Challenge\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
            10:
                story_text: "## Stein, saks, papir\nEr du for lat til å spille spillet selv? La Hedy spille det for deg!\n"
                example_code: "```\nvalgene = stein, saks, papir\nspillere = Maren, Magnus\n{for} spiller {in} spillere\n     {print} spiller ' velger ' valgene {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "## Stein, saks, papir\nPå dette nivået kan vi bestemme hvem som vant.\nTil det trenger vi den nye `{if}`-koden.\n\nTa vare på ditt valg og datamaskinens valg.\nSå kan du bruke `{if}` for å se om de er det samme eller forskjellig.\nKan du fullføre koden?\n"
                example_code: "```\nvalgene {is} stein, saks, papir\ndatamaskin_valg {is} _\nditt_valg {is} {ask} 'Hva velger du?'\n{print} 'du velger ' _\n{print} 'datamaskinen velger ' _\n{if} _ {is} _ {print} 'uavgjort!' {else} {print} 'ikke uavgjort'\n```\n\nFyll ut resten av koden der det er linjer for å se om det er uavgjort.\n"
                start_code: "{print} 'Velkommen til din egen stein saks papir!'"
            4:
                story_text: "## Stein, saks, papir\nPå dette nivået kan vi programmere videre på stein, saks, papir. Om du vil legge til tekst må du bruke fnutter her også.\nKan du fullføre koden ved å fylle ut de riktige kommandoene og tengene der det er streker?\n"
                example_code: "```\nvalgene {is} stein, saks, papir\n{print} _ Datamaskinen valgte: _ _ {at} _\n```\n"
                start_code: "{print} 'Velkommen til din egen stein saks papir!'"
            3:
                story_text: "## Stein, saks, papir\n\nPå dette nivået kan vi lage lister og velge ting fra de.\nDu kan først lage en liste med `{is}`. Så kan du la datamaskinen velge noe annet fra listen med `{at} {random}`.\nFor eksempel så kan du la datamaskinen velge mellom stein, saks og papir.\n"
                example_code: "\n```\nvalgene {is} stein, saks, papir\n{print} valgene {at} {random}\n```\n"
                start_code: '{print} Velkommen til din egen stein saks papir!'
                story_text_2: "## Challenge\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
            2:
                story_text: "## Stein, saks, papir\nPå dette nivået kan du øve deg på å bruke variabler så du kan lage stein, saks, papir-spillet på neste nivå!\n"
                example_code: "```\nvalg {is} _\n{print} Jeg velger valg\n```\n"
                start_code: '# skriv koden din her'
            15:
                story_text: "## Stein, saks, papir\nSpill til du klarer å slå datamaskinen! Men først, fullfør eksempelkoden...\n"
                example_code: "```\nvunnet = 'nei'\nvalgene = 'stein', 'saks', 'papir'\n{while} vunnet == 'nei'\n    ditt_valg = {ask} 'Hva velger du?'\n    datamaskinens_valg = valgene {at} {random}\n    {print} 'du valgte ' ditt_valg\n    {print} 'datamaskinen valgte ' datamaskinens_valg\n    {if} datamaskinens_valg == ditt_valg\n        {print} 'Uavgjort!'\n    {if} datamaskinens_valg == 'stein' {and} ditt_valg == 'saks'\n        {print} 'Du tapte!'\n    {if} datamaskinens_valg == 'stein' {and} ditt_valg == 'papir'\n        {print} 'Du vant!'\n        vunnet = 'yes'\n```\n"
                start_code: '# skriv koden din her'
            13:
                story_text: "## Stein, saks, papir\nMed `{and}`-kommandoen kan du korte ned stein, saks, papir-koden din! Sjekk ut eksempelkoden under og prøv å fullføre den.\n"
                example_code: "```\nvalgene = 'stein', 'saks', 'papir'\nditt_valg = {ask} 'Hva velger du?'\ndatamaskinens_valg = valgene {at} {random}\n{print} 'Du valgte ' ditt_valg\n{print} 'Datamaskinen valgte ' datamaskinens_valg\n{if} datamaskinens_valg {is} ditt_valg\n    {print} 'Uavgjort'\n{if} datamaskinens_valg {is} 'stein' {and} ditt_valg {is} 'papir'\n    {print} 'Du vant!'\n{if} datamaskinens_valg {is} 'stein' {and} ditt_valg {is} 'saks'\n    {print} 'Datamaskinen vant!'\n```\n"
                start_code: '# skriv koden din her'
        name: Stein, saks, papir
        description: Lag ditt eget stein, saks,papir-spill
        default_save_name: Stein
    calculator:
        levels:
            12:
                start_code: '# skriv koden din her'
                story_text: "## Kalkulator\nDu kan lage en kalkulator som fungerer med desimaltall.\n"
                example_code: "```\ntall1 = {ask} 'Hva er det første tallet?'\ntall2 = {ask} 'Hva er det andre tallet?'\nriktig_svar = tall1 + tall2\n{print} tall1 ' pluss ' tall2 ' er ' riktig_svar\n```\n"
            14:
                story_text: "## Gjett hvilket nummer\nPå dette nivået kan du programmere spillet \"Gjett hvilket nummer\"\n"
                example_code: "```\n{print} 'Gjett hvilket nummer'\ntallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntallet = tallene {at} {random}\nspill = 'i gang'\n{for} i {in} {range} 1 {to} 10\n    {if} spill == 'i gang'\n        gjetting = {ask} 'Hvilket tall tror du det er?'\n        {if} gjetting > tallet\n            {print} 'Lavere!'\n        {if} gjetting < tallet\n            {print} 'Høyere!'\n        {if} gjetting == tallet\n            {print} 'Du vant!'\n            spill = 'slutt'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "## Kalkulator\nDette kalkulatorspillet hjelper med å øve på multiplikasjonstabeller!\nOm du legger til flere tall på listen så kan du øve på alle gangetabellene.\n"
                example_code: "```\ntallene = 1, 2, 3\n{for} tall1 {in} tallene\n    {for} tall2 {in} tallene\n        ditt_svar = {ask} 'Hvor mye er ' tall1 ' ganger ' tall2 '?'\n        riktig_svar = tall1 * tall2\n        {if} ditt_svar {is} riktig_svar\n            {print} 'Godt jobbet!'\n        {else}\n            {print} 'Det er feil. Det riktige svaret er ' riktig_svar\n```\n"
                start_code: '# skriv koden din her'
            9:
                story_text: "## Kalkulator\nPå de forrige nivåene lærte du hvordan å lage en kalkulator. På dette nivået kan du utvide koden til å lage et lite mattespill. Slik som dette...\n"
                example_code: "```\npoengsum = 0\n{repeat} 10 {times}\n    tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    tall1 = tallene {at} {random}\n    tall2 = tallene {at} {random}\n    riktig_svar = tall1 * tall2\n    {print} 'Hva er ' tall1 ' ganget med ' tall2 '?'\n    ditt_svar = {ask} 'Skriv svaret ditt her...'\n    {print} 'Ditt svar er ' ditt_svar\n    {if} ditt_svar {is} riktig_svar\n        poengsum = poengsum + 1\n{print} 'Godt jobbet! Din poengsum er... ' poengsum ' av 10!'\n```\n"
                start_code: "{print} 'Velkommen til denne kalkulatoren!'"
            6:
                story_text: "## Kalkulator\nNå som du kan regne så kan du også lage et program til å øve på regnestykker. Du kan lage regnestykker til deg selv, for eksempel:\n"
                example_code: "```\nriktig_svar = 11 * 27\nditt_svar = {ask} 'Hvor mye er 11 ganger 27?'\n{if} ditt_svar {is} riktig_svar {print} 'godt jobbet!'\n{else} {print} 'Feil! Riktig svar er ' riktig_svar\n```\n"
                story_text_2: "## Tilfeldige tall\nDu kan også la datamaskinen lage tilfeldige regnestykker på egenhånd ved hjelp av `{at} {random}`.\nDette er hvordan du velger tall fra en tabell med tall å øve på og fra det vil du få forskjellige summer:\n"
                example_code_2: "```\ntabellene = 4, 5, 6, 8\ntallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntabell = tabellene {at} {random}\ntall = tallene {at} {random}\nriktig_svar = tabell * tall\nditt_svar = {ask} 'hvor mye er ' tabell ' ganget med ' tall '?'\n{if} ditt_svar {is} riktig_svar {print} 'riktig'\n{else} {print} 'feil! det var ' riktig_svar\n```\n"
                start_code: "{print} 'Velkommen til denne kalkulatoren!'"
                story_text_3: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_3: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
            15:
                story_text: "## Kalkulator\nDu kan legge til en `{while}`-løkke til kalkulatorspillet du lærte å lage på det forrige nivået.\nDette gjør det sånn at spilleren ikke kan fortsette til neste spørsmål om de har svart feil.\n"
                example_code: "```\npoengsum = 0\n{for} i {in} {range} 0 {to} 9\n    tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    tall1 = tallene {at} {random}\n    tall2 = tallene {at} {random}\n    riktig_svar = tall1 * tall2\n    ditt_svar = 0\n    {while} ditt_svar != riktig_svar\n        {print} 'Hvor mye er ' tall1 ' ganger ' tall2 '?'\n        ditt_svar = {ask} 'Skriv inn ditt svar:'\n        {print} 'Ditt svar er ' ditt_svar\n    {print} 'Godt jobbet!'\n{print} 'Du vant!'\n```\n"
                start_code: '# skriv koden din her'
        name: Kalkulator
        description: Lag en kalkulator
        default_save_name: Kalkulator
    restaurant:
        levels:
            2:
                start_code: '# skriv koden din her'
                story_text: "## Restaurant\nPå nivå 2 kan du utvide din restaurant ved å bruke variabler. På nivå 1 kunne Hedy bare svare med bestillingen 1 gang og den kunne bare huske siste ting som var bestilt.\nNå kan du bruke variabler og Hedy kan huske både mat og drikke!\n"
                example_code: "```\n{print} Velkommen til Hedys restaurant!\n{print} I dag har vi pizza og lasagne på menyen.\nmaten {is} {ask} Hva har du lyst til å spise?\n{print} Godt valg! maten er min favoritt!\ntilbehør {is} {ask} Foretrekker du vegetar eller med kjøtt?\n{print} maten med tilbehør skal bli!\ndrikken {is} {ask} Vil du ha noe å drikke med det?\n{print} Takk for bestillingen\n{print} maten og drikken kommer snart!\n```\n"
                story_text_2: "## Challenge\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
                example_code_2: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\ndrinks {is} _\n```\n"
            7:
                example_code: "```\n{print} 'Velkommen Hedys restaurant!'\nantall_personer = {ask} 'Hvor mange personer er dere i dag?'\n{repeat} antall_personer times mat = {ask} 'Hva vil du spise?'\n{print} 'Takk for bestillingen, den er på vei!'\n```\n"
                story_text: "## Restaurant\nPå dette nivået har du lært å bruke `{repeat}`-kommandoen til å repeterer en linje med kode et visst antall ganger.\nDu kan bruke det i din restaurant til å spørre flere gjester hva de har lyst på. Slik:\n"
                start_code: '# skriv koden din her'
            1:
                story_text: "## Restaurant\n På nivå 1 kan du lage din egne virtuelle restaurant og ta imot dine gjesters bestillinger.\n"
                example_code: "  ```\n {print} Velkommen til Hedys restaurant \U0001F35F\n {ask} Hva har du lyst å bestille?\n {echo} Så du vil bestille\n {print} Takk for din bestilling!\n {print} Den er på vei!\n ```\n"
                story_text_2: "## Utfordring\nKan du tenke deg flere linjer du kan legge til restaurantens kode? For eksempe, kan du spørre gjestene hva de har lyst å drikke, fortelle de prisen eller å ønske de et godt måltid?\n"
                start_code: '# skriv koden din her'
            12:
                story_text: "## Restaurant\nFra dette nivået av kan du bruke desimaltall for å gjøre menyen mer realistisk.\n"
                example_code: "```\npris = 0\nønsket_mat = {ask} 'What would you like to order?'\nønsket_drikke = {ask} 'What would you like to drink?'\n{if} ønsket_mat {is} 'hamburger'\n    pris = pris + 60.50\n{if} ønsket_mat {is} 'pizza'\n    pris = pris + 50.75\n{if} ønsket_drikke {is} 'vann'\n    pris = pris + 10.50\n{if} ønsket_drikke {is} 'brus'\n    pris = pris + 20.35\n{print} 'Det blir ' pris ' kroner, takk!'\n```\n"
                start_code: '# skriv koden din her'
            11:
                story_text: "## Restaurant\nVi kan bruke `{for} i {in} {range} 1 {to} 5`til å skrive ut ordrene fra flere kunder på en ordnet måte.\n"
                example_code: "```\n{print} 'Velkommen til Restaurant Hedy!'\nantall_personer = {ask} 'Hvor mange personer er dere i dag?'\n{for} i {in} {range} 1 {to} antall_personer\n    {print} 'Ordre nummer ' i\n    ønsket_mat = {ask} 'Hva vil du ha å spise?'\n    {print} ønsket_mat\n    {if} ønsket_mat {is} pommes frites\n        dressing = {ask} 'Ønsker dere dressing med det?'\n        {print} dressing\n    drikke = {ask} 'Hva vil du ha å drikke?'\n    {print} drikke\npris = 40 * antall_personer\n{print} 'Det blir ' pris ' kroner, takk!'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "## Restaurant\nPå dette nivået kan du lære hvordan å enkelt spørre om gjestenes ønsker i kort kode.\n"
                example_code: "```\nretter = forrett, hovedrett, dessert\n{for} rett {in} retter\n    ønsket_mat = {ask} 'Hva ønsker du til ' rett '?'\n    {print} ønsket_mat ' skal du få til ' rett\n```\n"
                story_text_2: "Selvfølgelig, du kan også bestille for flere personer!\n"
                example_code_2: "```\nretter = forrett, hovedrett, dessert\nnavnene = Timon, Onno\n{for} navn {in} navnene\n    {for} rett {in} retter\n        ønsket_mat = {ask} navn ', hva vil du ha til ' rett '?'\n        {print} navn ' bestiller ' ønsket_mat ' til ' rett\n```\n"
                start_code: retter = forrett, hovedrett, dessert
            9:
                story_text: "## Restaurant\nPå dette nivået kan du putte `{if}` inni `{if}` for å gjøre restauranten din mer realistisk og gøy!\nDu kan for eksempel spørre om saus om noen bestiller pommes frites, men det passer kanskje ikke om noen bestiller lasagne!\nSjekk ut eksempelet og prøv dette på din egne virtuelle restaurant!\n"
                example_code: "```\n{print} 'Velkommen til Hedys restaurant!'\nantall_personer = {ask} 'Hvor mange er dere i dag?'\n{print} 'Supert!'\npris = 0\n{repeat} antall_personer {times}\n    ønsket_mat = {ask} 'Hva ønsker dere å bestille?'\n    {print} ønsket_mat\n    {if} ønsket_mat {is} pommes frites\n        pris = pris + 30\n        dressing = {ask} 'Ønsker dere dressing med det?'\n        {if} dressing {is} no\n            {print} 'ingen dressing'\n        {else}\n            pris = pris + 10\n            {print} 'med ' dressing\n    {if} ønsket_mat {is} pizza\n        pris = pris + 40\n{print} 'Det blir ' pris ' kroner'\n{print} 'Vel bekomme!'\n```\n"
                start_code: '# skriv koden din her'
            8:
                story_text: "## Restaurant\nPå dette nivået kan du lage din virtuelle restaurant enda mer forseggjort ved å reptere flere linjer med kode. Slik:\n"
                example_code: "```\n{print} 'Velkommen til Hedys restaurant!'\nantall_personer = {ask} 'Hvor mange er dere i dag?'\n{print} 'Supert!'\n{repeat} antall_personer {times}\n    ønsker = {ask} 'Hva har dere lyst på?'\n    {print} ønsker\n{print} 'Takk for bestillingen!'\n{print} 'Vel bekomme!'\n```\n"
                story_text_2: "## Utfordring\nSelvfølgelig, denne koden kan utvides med flere tin i menyen, tilbud om drikke, og/eller flere retter så legg til så mye du ønsker!\n"
                start_code: '# skriv koden din her'
            6:
                story_text: "## Restaurant\nPå dette nivået kan du bruke matte til å regne ut totalprisen på kundens bestilling. Dette vil gjøre den virtuelle restauranten mer realistisk.\n"
                example_code: "Enkel\nDu kan lage koden for en enkel restaurant slik:\n```\n{print} 'Velkommen til Hedys restaurant'\n{print} 'Her er vår meny:'\n{print} 'Våre hovedretter er pizza, lasagne og spaghetti'\nhovedrett = {ask} 'Hvilken hovedrett vil du ha?'\npris = 0\n{if} hovedrett {is} pizza pris = 100\n{if} hovedrett {is} lasagne pris = 120\n{if} hovedrett {is} spaghetti pris = 80\n{print} 'Du har bestilt ' hovedrett\n{print} 'Det blir ' pris ' kroner, takk'\n{print} 'Takk, vel bekomme!'\n```\n"
                story_text_2: "Men du kan også legge til mange flere ting i din virtuelle restaurant, for eksempel flere retter.\n\n## Oppgave\nDu kan legge til mange flere ting til din virtuelle restaurant. For eksempel kan du...\n- spørre hvor mange som kommer og gange prisen med antallet?\n- legge til flere retter?\n- gi gjestene rabatter dersom de oppgir en hemmeling rabattkode?\n- legge til en barnemeny?\n- tenk på andre ting du kan legge til?\n"
                example_code_2: "Forseggjort\nI dette eksempelet er det tre retter, noe som krever mer kode og mer regning når man beregner prisen.\n```\n{print} 'Velkommen til Hedys restaurant'\n{print} 'Her er vår meny:'\n{print} 'Forrettene våre er salat, suppe og fiskepinner'\n{print} 'Til hovedrett har vi pizza, lasagne og spaghetti'\n{print} 'På dessertmenyen finner vi brownie, iskrem og milkshake'\nforrett = {ask} 'Hvilken forrett vil du ha?'\nhovedrett = {ask} 'Hvilken hovedrett ønsker du?'\ndessert = {ask} 'Hva har du lyst på til dessert?'\npris = 0\n{if} forrett {is} suppe pris = pris + 60 {else} pris = pris + 70\n{if} hovedrett {is} pizza pris = pris + 100\n{if} hovedrett {is} lasagne pris = pris + 120\n{if} hovedrett {is} spaghetti pris = pris + 80\n{if} dessert {is} brownie pris = pris + 70\n{if} dessert {is} iskrem pris = pris + 50\n{if} dessert {is} milkshake pris = pris + 40\n{print} 'Du har bestilt ' forrett ' , ' hovedrett ' og ' dessert\n{print} 'Det blir ' pris ' kroner, takk'\n{print} 'Takk, vel bekomme!'\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "## Restaurant\nPå dette nivået lar `{if}`-kommandoen deg å spørre kunder spørsmål og gi forskjellige ting til svar.\nI eksempelet under kan du se at du kan spørre kunden om de har lyst å høre om dagens rett og Hedy kan svare deretter.\n"
                example_code: "```\n{print} 'Velkommen til Hedys restaurant!'\nvil_høre {is} {ask} 'Vil du høre om dagens rett?'\n{if} vil_høre {is} ja {print} 'Dagens rett er kylling piri piri med ris.' {else} {print} 'Ikke noe problem.'\nmatønske {is} {ask} 'Hva har du lyst å spise?'\n{print} 'en ' matønske ' er på vei!'\ndrikke {is} {ask} 'Hva har du lyst å drikke til?'\n{if} drikke {is} cola {print} 'Beklager, vi er tom for cola!' {else} {print} 'Godt valg!'\nannet {is} {ask} 'Vil du ha noe annet?'\n{print} 'La meg lese opp bestillingen...'\n{print} 'En ' matønske\n{if} drikke {is} cola {print} 'og...' {else} {print} 'En ' drikke\n{if} annet {is} nei {print} 'Det var det!' {else} {print} 'En ' annet\n{print} 'Takk for bestillingen og vel bekomme!'\n```\n"
                story_text_2: "## Utfordring\nKan du komme på flere spørsmål du kan spørre kundene når de bestiller, og finne svar du kan gi til de ved hjelp av `{if}`-kommandoen?\n"
                start_code: '# skriv koden din her'
            4:
                story_text: "## Restaurant\nPå dette nivået må du bruke fnutter når du bruker `{print}`-kommandoen.\nKan du gjøre sånn at koden fra forrige nivå også fungerer ved å legge til fnutter?\n\nVær forsiktig! I forrige nivå var fnutter lov i tekst, men på dette nivået vil det forvirre Hedy om du har fnutter i teksten din.\nSå istedenfor å skrive `{print} I dag serverer vi pizza`, må du nå skrive `{print} 'I dag serverer vi pizza'`\n"
                example_code: "```\n{print} 'Velkommen til Hedys Restaurant!'\n{print} 'I dag er det pizza og lasagne på menyen.'\nmaten {is} {ask} 'Hva har du lyst til å spise?'\n{print} 'Godt valg! ' maten ' er min favoritt!'\ntilbehør {is} {ask} 'Foretrekker du vegetar eller med kjøtt?'\n{print} maten ' med ' tilbehør ' skal bli!'\ndrikken {is} {ask} 'Vil du ha noe å drikke til?'\n{print} 'Takk for bestillingen.'\n{print} maten ' og ' drikken ' kommer snart!'\n```\n"
                start_code: '# skriv koden din her'
            3:
                story_text: "## Random Restaurant\nHar du problemer med å bestemme hva du vil ha til middag? Du kan la Hedy bestemme for deg!\nLag en liste over dine favorittmåltid og Hedy kan tilfeldig plukke ut en middag til deg.\nDu kan også ha litt gøy ved å la Hedy velge prisen for middagen også. Hva blir det til middag i dag?`\n"
                example_code: "```\n{print} Velkommen til Hedys Tilfeldige Restaurant!\n{print} Den eneste restauranten som tilfeldig velger hva du får servert og hva det vil koste!\nforretter {is} salat, suppe, carpaccio\nhovedretter {is} pizza, rosenkål, spaghetti\ndesserter {is} brownies, iskrem, franske oster\ndrikker {is} cola, øl, vann\npriser {is} 10 kroner, 100 kroner, 1000 kroner\n{print} Du vil begynne med: forretter {at} {random}\n{print} Og så vil vi servere: hovedretter {at} {random}\n{print} Og til slutt: desserter {at} {random}\n{print} Til maten vil du få drikker {at} {random} å drikke\n{print} Det vil koste deg: priser {at} {random}\n{print} Takk og vel bekomme!\n```\n"
                story_text_2: "## Allergier\nHar dine gjester noen allergier eller noen retter de ikke liker? Da kan du bruke `{remove}`-kommandoen til å fjerne ting fra menyen.\n"
                example_code_2: "```\n{print} Mysteriemilkshake\nsmaker {is} jordbær, sjokolader, vanilje\nallergier {is} {ask} Er du allergisk til en av smakene?\n{remove} allergier {from} smaker\n{print} Du vil få en flavors {at} {random} milkshake\n```\n"
                start_code: '# skriv koden din her'
            15:
                story_text: "## Restaurant\nMed `{while}` kan du sørge for at kundene dine kan fortsette å bestille til de er ferdig.\n"
                example_code: "```\n{print} 'Velkommen til McHedy'\nmer = 'ja'\n{while} mer == 'ja'\n    ønsker = {ask} 'Hva vil du bestille?'\n    {print} ønsker\n    mer = {ask} 'Vil du ha noe mer?'\n{print} 'Takk!'\n```\n"
                start_code: '# skriv koden din her'
            13:
                story_text: "## Restaurant\nPå dette nivået kan vi bruke de nye kommandoen til å oppgradere restauranten vår.\nVi bruker `{and}`til å se om to ting begge stemmer.\n"
                example_code: "```\npris = 100\nønsket_mat = {ask} 'Hva vil du ha å spise?'\nønsket_drikke = {ask} 'Hva ønsker du å drikke til maten?'\n{if} ønsket_mat {is} 'toast' {and} ønsket_drikke {is} 'juice'\n    {print} 'Det er på tilbudsmenyen'\n    pris = pris - 30\n{print} 'Det blir ' pris ' kroner'\n```\n"
                story_text_2: "Vi bruker `{or}` til å sjekke om ihvertfall en av to ting stemmer.\n"
                example_code_2: "```\nønsket_drikke = {ask} 'Hva vil du ha å drikke?'\n{if} ønsket_drikke {is} 'vann' {or} ønsket_drikke {is} 'juice'\n    {print} 'Det er et sunt valg'\n```\n"
                start_code: '# skriv koden din her'
        name: Restaurant
        description: Lag din egen virtuelle restaurant
        default_save_name: Restaurant
    fortune:
        levels:
            10:
                story_text_2: We can also make a Harry Potter themed fortune teller.
                story_text: "## Fortune Teller\nIn this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                example_code_2: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n{for} name in names\n    {print} name ' is placed in ' houses {at} {random}\n    {print} name ' is great at ' subjects {at} {random}\n    {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            1:
                story_text: "## Fortune Teller\nHave you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?\nThen you probably know that they can't really predict your future, but it's still fun to play!\n\nIn the upcoming levels you can learn how to create your own fortune telling machine!\nIn level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.\nLike this:\n"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n"
                story_text_2: "## Challenge\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
                start_code: '# skriv koden din her'
            12:
                story_text: "## Fortune Teller\nIn this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            8:
                story_text: "## Fortune Teller\nIn the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the repeat command.\nIn the next example you can have your fortune teller {ask} 3 questions and also print them!\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "## Fortune Teller\nIn this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n"
                story_text_2: "## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
                start_code: '# skriv koden din her'
            6:
                story_text: "## Fortune Teller\nIn this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\n## Example Silly Fortune Teller\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!\U0001F929' {else} {print} 'Bad luck! Someone {else} will win!\U0001F62D'\n```\n"
                story_text_2: "## Hack the program\nReplace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!\nOf course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.\nBut of course, still gives you a positive answer and the other players a negative one.\n"
                example_code_2: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} you will win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\ngoodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!\nbadanswer {is} Bad luck! Try again!, Another person will win, You lose!\n{if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n"
                story_text_3: "## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
                start_code: '# skriv koden din her'
            4:
                story_text: "## Fortune Teller\nThis level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            3:
                story_text: "## Fortune Teller\nIn the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                example_code: "In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                story_text_2: "## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
                start_code: '# skriv koden din her'
        name: Spåkone
        description: La Hedy forutsi fremtiden
        default_save_name: Spåkone
    haunted:
        levels:
            11:
                story_text: "## Haunted House\nIn this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Flykt fra det forheksede huset!'"
            16:
                start_code: '# skriv koden din her'
                story_text: "## Haunted House Game\nThis haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[random]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
            1:
                story_text: "## Haunted house\nIn this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.\nIf you pick the right door you'll survive, but {if} not a terrible monster might...\n\nIn level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.\n"
                example_code: "\n```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "## Challenge\nCan you finish the scary story? Or make up your own haunted house story?\n"
                start_code: '{print} Hvordan kom jeg meg her?'
            2:
                story_text: "## Haunted House\nIn this haunted house you can choose your monsters with emojis. Of course you could also use words.\n"
                example_code: "```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
                story_text_2: "## Challenge\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            14:
                story_text: "## Haunted House\nIn this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# skriv koden din her'
            9:
                story_text: "## Haunted House\nIn this level you can use nesting, which allows you to make the haunted house even more interactive!\n\n## Challenge\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Flykt fra det forheksede huset!'"
            5:
                story_text: "## Haunted House\nUp until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n"
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            4:
                story_text: "## Haunted house\nIn this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
                start_code: '# skriv koden din her'
            3:
                story_text: "## Haunted house game\nIn the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                example_code: "```\n{print} Escape from the haunted house!\n{print} There are 3 doors in front of you...\nchoice {is} {ask} Which door do you choose?\n{print} You picked door ... choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} You see...\n{sleep}\n{print} monsters {at} {random}\n```\n"
                story_text_2: "## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                start_code: '# skriv koden din her'
                story_text_3: "## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\n{print} One of them contains _\n_\n```\n"
        name: Spøkelseshus
        description: flykt fra det forheksede huset
        default_save_name: Spøkelseshus
    piggybank:
        name: Sparebøsse
        description: Tell sparepengene dine!
        default_save_name: Sparebøsse
        levels:
            14:
                story_text: "## Piggybank\nIn this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# skriv koden din her'
            12:
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n```\n"
                start_code: '# skriv koden din her'
    parrot:
        name: Papegøye
        description: Lag din egen online papegøye som hermer etter det du sier!
        default_save_name: Papegøye
        levels:
            1:
                story_text: "## Papegøye\nLag din egen online papegøye som hermer etter deg!\n"
                example_code: "```\n{print} Jeg er papegøyen Hedy\n{ask} hva er ditt navn?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Jeg er papegøyen Hedy'
                story_text_2: "## Challenge\nCan you make the parrot ask a different question? Fill in the blanks in the example!\n"
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "## Papegøye\nLag din egen online papegøye som hermer etter deg!\n"
                example_code: "```\n{print} Jeg er papegøyen Hedy\nnavn {is} {ask} hva er ditt navn?\n{print} navn\n{sleep}\n{print} skrik!\n{sleep}\n{print} navn\n```\n"
                start_code: '{print} Jeg er papegøyen Hedy!'
                story_text_2: "## Challenge\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
                example_code_2: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} name\nsurname {is} {ask} whats your surname?\n_\n{sleep}\n_\n```\n"
            3:
                story_text: "## Papegøye\nLær papegøyen din et nytt ord med `{add}`.\n"
                example_code: "```\nordene {is} skrik, Hedy\n{print} Lær din papegøye!\nnytt_ord {is} {ask} Hvilket nytt ord vil du lære den?\n{add} nytt_ord {to_list} ordene\n{print} \U0001F9D2 Si nytt_ord , Hedy!\n{print} \U0001F99C ordene {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "## Papegøye\nBelønn papegøyen din om det sier det riktige ordet!\n"
                example_code: "```\nordene {is} skrik, Hedy\n{print} 'Tren papegøyen din!'\nnytt_ord {is} {ask} 'Hvilket nytt ord vil du lære den?'\n{add} nytt_ord {to_list} ordene\nuttalt_ord {is} ordene {at} {random}\n{print} '\U0001F9D2 Si ' nytt_ord ', Hedy!'\n{print} '\U0001F99C ' uttalt_ord\n{if} uttalt_ord {is} nytt_ord {print} '\U0001F9D2 Godt jobbet, Hedy! \U0001F36A'\n{else} {print} '\U0001F9D2 Nei, Hedy! Si ' nytt_ord\n```\n"
                start_code: '# skriv koden din her'
    songs:
        name: Syng en sang!
        description: Skriv ut en sang
        default_save_name: Sang
        levels:
            12:
                story_text: "## Syng en sang!\nI denne sangen kan vi gjøre det enda enklere å programmere  'Hvis du er lyklig og du vet det, klappe klapp'. Fordi vi kan putte alle handlingene i en variabel, sjekk ut dette:\n"
                example_code: "```\nhandlinger = 'klappe klapp', 'trampe tramp', 'rop hurra!'\n{for} handling {in} handlinger\n    {for} i {in} {range} 1 {to} 2\n        {print} 'Hvis du er lykkelig og du vet det'\n        {print} handling\n    {print} 'Hvis du er lykkelig og vet det må du la alle andre se det'\n    {print} 'Hvis du er lykkelig og du vet det'\n    {print} handling\n```\n"
                start_code: '# skriv koden din her'
            11:
                story_text: "## Sanger\nPå dette nivået kan du bruke `{for} i {in} {range}` kommandoen til å lage sanger som bruker telling.\n"
                example_code: "## 5 små aper\n```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' små aper hopper i en seng'\n    {print} 'En falt av og dunket hodet sitt'\n    {print} 'Så mamma ringte doktoren og doktoren sa'\n    {if} i {is} 1\n        {print} 'FÅ DE APENE RETT TIL SENGS!'\n    {else}\n        {print} 'INGEN FLERE APER FÅR HOPPE I EN SENG!'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "## Sanger\nPå dette nivået kan du lett lage barnesangen \"Fem små aper\". Kan du lage det siste refrenget?\nDu kan også lage hele \"baby shark\"-sangen (inkludert alle de andre haiene i familien) på bare 6 linjer!\nEller du kan lage \"Old McDonald\" med alle de forskjellige dyrene.\n"
                example_code: "## 5 små aper\n```\napene = 5, 4, 3, 2\n{for} ape {in} apene\n    {print} ape ' små aper hopper i en seng'\n    {print} 'En falt av og dunket hodet sitt'\n    {print} 'å mamma ringte doktoren og doktoren sa'\n    {print} 'INGEN FLERE APER FÅR HOPPE I EN SENG!'\n```\n\n## Baby Shark\n```\nhaiene = baby, mommy, daddy, grandma, grandpa\n{for} hai {in} haiene\n    {print} hai 'tututututudu'\n    {print} hai 'tututututudu'\n    {print} hai 'tututututudu'\n    {print} hai\n```\n## Old McDonald\n```\ndyrene = pig, dog, cow\n{for} dyret {in} dyrene\n    {if} dyret {is} pig\n        lyd = oink\n    {if} dyret {is} dog\n        lyd = woof\n    {if} dyret {is} cow\n        lyd = moo\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' dyret\n    {print} 'E I E I O!'\n    {print} 'with a ' lyd lyd ' here'\n    {print} 'and a ' lyd lyd ' there'\n    {print} 'here a ' lyd\n    {print} 'there a ' lyd\n    {print} 'everywhere a ' lyd lyd\n```\n"
                start_code: '# skriv koden din her'
            8:
                story_text: "## Sanger\nPå et tidligere nivå programmerte du sangen 'Bottles of beer'. Du lagde ett vers og så måtte du kopiere verset 99 ganger. På nivå 7 kan du repetere sangen 99 ganger, bare legg til en enkel linje!\n"
                example_code: "```\nvers = 99\n{repeat} 99 {times}\n    {print} vers ' bottles of beer on the wall'\n    {print} vers ' bottles of beer'\n    {print} 'Take one down, pass it around'\n    verse = vers - 1\n    {print} vers ' bottles of beer on the wall'\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "## Sanger\nSanger inneholder ofte en del repetisjon. For eksempel... Baby Shark! Om du synger den så kan du fortsette å synge det samme:\n\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark\n\nDu kan lage denne sangen mye kortere med en `{repeat}`! Kan du fullføre koden?\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n\nEtter Baby Shark kan du selvfølgelig programmere andre sanger. Det er mange sanger med repetisjon.\n"
                start_code: "{print} 'Baby Shark'"
            6:
                story_text: "## Sanger\nSanger inneholder ofte en del repetisjon. Noen ganger er repetisjonen også basert på telling.\nFor eksempel i den velkjente sangen 'Bottles of beer'. Du kan programmere den sangen med litt matte.\n"
                example_code: "```\nvers = 99\n{print} vers ' bottles of beer on the wall'\n{print} vers ' bottles of beer'\n{print} 'Take one down, pass it around'\nverse = vers - 1\n{print} vers ' bottles of beer on the wall'\n```\n\nDu kan repetere linjene 2 til 9 så mange ganger du vil ved å kopiere de linjene.\n"
                start_code: "{print} 'Baby shark'"
                story_text_2: "## 5 Little Monkeys jumping on the bed\nThis children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\nprint number ' little monkeys jumping on the bed'\nprint 'One fell off and bumped his head'\nprint 'Mama called the doctor and the doctor said'\nprint 'NO MORE MONKEYS JUMPING ON THE BED!'\nsleep\n```\n"
            16:
                story_text: "## Sing a song!\nPå dette nivået kan du programmere en sang som \"Old MacDonald\" enda raskere. Du kan knytte sammen det riktige dyret til den riktige lyden ved å putte de på den samme plassen i listen.\n\"The Drunken Sailor\" er også rask å lage på dette nivået. Du trenger bare 8 linjer for hele sangen, sjekk det ut!\n"
                example_code: "## Old MacDonald\n```\ndyrene = ['pig', 'dog', 'cow']\nlydene = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    dyret = dyrene[i]\n    lyden = lydene[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' dyret\n    {print} 'E I E I O!'\n    {print} 'with a ' lyden lyden ' here'\n    {print} 'and a ' lyden lyden ' there'\n    {print} 'here a ' lyden\n    {print} 'there a ' lyden\n    {print} 'everywhere a ' lyden lyden\n```\n\n## Drunken Sailor\n```\nlinjene = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} linjen {in} linjene\n    {for} i {in} {range} 1 {to} 3\n        {print} linjen\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# skriv koden din her'
    dishes:
        name: Retter?
        description: Bruk datamaskinen til å se hvem som skal ta oppvasken (Start på nivå 2)
        default_save_name: Retter
        levels:
            10:
                story_text: "## Oppvasken\nPå dette nivået kan du lage en enda bedre oppvaskeplan.\n"
                example_code: "```\ndager = Mandag, Tirsdag, Onsdag, Torsdag, Fredag, Lørdag, Søndag\nnavn = mamma, pappa, Emma, Sofie\n{for} day {in} dager\n    {print} navn {at} {random} ' tar oppvasken på ' day\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "## Oppvasken\nMed `{repeat}` kan du repetere deler av kode. Du kan bruke dette til å beregne hvem som skal ta oppvasken for hele uken.\n"
                example_code: "```\nfamilie = mamma, pappa, Emma, Sofie\n{repeat} _ _ {print} 'Den som tar oppvasken er ' _\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            6:
                story_text: "## Oppvasken\nHvor ofte må hver ta oppvasken? Er det rettferdig? Du kan telle det på dette nivået.\n"
                example_code: "```\nfamilie = mamma, pappa, Emma, Sofie\nemma_vasker = 0\noppvasker = familie {at} {random}\n{print} 'Den som tar oppvasken er ' oppvasker\n{if} oppvasker {is} Emma emma_vasker = emma_vasker + 1\n{print} 'Emma tar oppvasken ' emma_vasker ' ganger denne uken'\n```\n\nDu kan nå kopiere linjene 3 til 5 et par ganger (f.eks. 7 ganger for en hel uke) for å regne ut for hele uken.\nLager du koden for hele uken?\n"
                story_text_2: "## Gjør det rettferdig\nOm du er ekstremt uheldig så kan det forrige programmet velge deg til å gjøre oppvasken hele uken! Det er ikke rettferdig!\nFor å lage et mer rettferdig system så kan du bruke `{remove}`-kommandoen for å fjerne en gitt person fra listen. På denne måten trenger du ikke å ta oppvasken igjen før alle har tatt sin tur.\n\nMandag og tirsdag er klar for deg! Kan du legge til resten av uken?\nOg.. kan du komme på en løsning dersom listen er tom?\n"
                example_code_2: "```\nfamilie = mamma, pappa, Emma, Sofie\noppvasker = familie {at} {random}\n{print} 'Mandag blir oppvasken tatt av: ' dishwasher\n{remove} oppvasker {from} familie\noppvasker = people {at} {random}\n{print} 'Tirsdag blir oppvasken tatt av: ' dishwasher\n{remove} oppvasker {from} familie\noppvasker = familie {at} {random}\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            5:
                story_text: "## Oppvasken\nMed `{if}`kan du nå ha det mer gøy med valg i programmet. Du kan få programmet til å respondere med det valget maskinen har tatt.\n\nKan du fullføre koden så det skriver ut 'det var dumt' når det er din tur og 'jippi!' ellers?\nIkke glem fnutter!\n"
                example_code: "```\nfamilie {is} mamma, pappa, Emma, Sofie\noppvasker {is} familie {at} {random}\n{if} oppvasker {is} Sofie {print} _ det var dumt at jeg må ta oppvasken _ {else} {print} 'heldigvis ingen oppvask fordi' _ 'allerede tar oppvasken'\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            4:
                story_text: "## Oppvasken\nMed fnutter kan du gjøre oppvaskeplanleggingen penere.\nDenne gangen er eksempelkoden ikke helt ferdig.\n\nKan du fullføre koden ved å fylle inn det som mangler? Hver tomme plass må erstattes med et ord eller et symbol.\n\nTips: Ikke glem fnutter!\n"
                example_code: "```\nfamilie {is} mamma, pappa, Emma, Sofie\n{print} _ oppvasken blir tatt av _\n{sleep}\n{print} familie {at} _\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            3:
                story_text: "## Oppvasken\nEr dere alltid uenig hjemme om hvem som skal ta oppvasken eller hvem som skal rense kattedoen?\nDa kan du la datamaskinen velge helt rettferdig. Du kan programmere det på dette nivået!\nFørst må du lage en liste over folk i familien. Så velger du `{at} {random}` fra listen.\nDo you always disagree at home about who should wash the dishes or change the litter box today?\nThen you can let the computer choose very fairly. You can program that in this level!\nYou first make a list of the members of your family. Then choose '{at} {random}' from the list.\n"
                example_code: "```\nfamilie {is} mamma, pappa, Emma, Sofie\n{print} familie {at} {random}\n```\n"
                story_text_2: "## Hack oppvaskeprogrammet!\nFøler du ikke for å ta oppvasken selv? Hack programmet til å fjerne navnet ditt fra listen.\n"
                example_code_2: "```\nfamilie {is} mamma, pappa, Emma, Sofie\nditt_navn {is} {ask} Hvem er du?\n{remove} ditt_navn {from} familie\n{print} familie {at} {random} tar oppvasken\n```\n"
                start_code: '{print} Hvem tar oppvasken?'
    dice:
        name: Terninger
        description: Lag din egen terning
        default_save_name: Terninger
        levels:
            10:
                story_text: "## Terning\nBruker alle for lang tid på å trille terninger? På dette nivået kan du la Hedy trille alle terningene på en gang!\n"
                example_code: "```\nspillere = Anne, Jon, Jørgen\nvalg = 1, 2, 3, 4, 5, 6\n{for} spiller {in} spillere\n    {print} spiller ' triller ' valg {at} {random}\n    {sleep}\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "## Terning\nDu kan også lage en terning igjen på nivå 5. Med `{repeat}` kan du enkelt trille en hel håndfull med terninger.\nPrøv å fullføre eksempelkoden. Der det er streker skal det være flere kommandoer og tegn.\n\nMen kanskje du har lyst å lage en helt annen terning. Selvfølgelig kan du det!\n"
                example_code: "```\nvalgene = 1, 2, 3, 4, 5, makk\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            6:
                story_text: "## Terning\nDu kan også lage en Earthworm-terning igjen i dette, men nå kan du også kalkulere hvor mange poeng som har blitt trillet.\nDu vet kanskje at makken teller for 5 poeng i Earthworms. Etter hver trilling kan du umiddelbart kalkulere antall poeng du har trillet.\nDette er koden for å kalkulere poeng for 1 terning:\n"
                example_code: "```\nvalgene = 1, 2, 3, 4, 5, makk\npoeng = 0\nverdi = valgene {at} {random}\n{print} 'du trillet' verdi\n{if} verdi {is} makk poeng = poeng + 5 {else} poeng = poeng + verdi\n{print} 'det er' poeng ' poeng'\n```\nKan du gjøre det slik at koden gir deg den totale poengsummen for 8 terningkast? For å gjøre det må du kopiere og lime inn et par linjer kode.\n"
                example_code_2: "## Vi ser fremover\n\nKlarte du å beregne poeng for 8 terninger? Det krevde mye kopiering og liming, sant? Vi skal gjøre det lettere på nivå 7!\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            5:
                story_text: "## Terning\nDu ha også lage en terning igjen på dette nivået ved å bruke `{if}`.\nFullfør eksempelkoden slik at koden sier \"Du kan slutte å trille\" så snart du har trillet en makk.\n\nMen kanskje du har lyst å gjenskal en terning fra et annet spill. Det er også greit! Isåfall lager du din egen reaksjon. F.eks. 'ja' for 6 og 'det var synd' for alt annet.\n"
                example_code: "```\nvalgene {is} 1, 2, 3, 4, 5, makk\nkastet {is} _\n{print} 'du trillet ' _ 'med terningen'\n{if} _ {is} makk {print} 'Du kan slutte å trille.' _ {print} 'Prøv igjen!'\n```\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            4:
                story_text: "## Terning\nPå dette nivået kan vi lage setninger med terningens verdi i setningen, med fnutter så klart.\nDenne gangen er ikke eksempelkoden helt ferdig. Kan du fullføre koden?\n"
                example_code: "```\nvalgene {is} 1, 2, 3, 4, 5, makk\n{print} _ du trillet _\n{print} _ _ _ <- her må du programmere et valg\n```\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            3:
                story_text: "## Terninger\nPå dette nivået kan vi velge fra en liste. Med det kan vi la datamaskinen velge en side av en terning.\nTa en titt på spillene du har i skapet hjemme.\nEr det spill der med en (spesiell) terning? Du kan også kopiere den med denne koden.\nFor eksempel, en terning fra spillet Earthworms med tallene 1 til 5 og en makk på\n\n![Terning fra Earthworms med 1 til 5 og en makk på](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nvalgene {is} 1, 2, 3, 4, 5, makk\n{print} valgene {at} {random}\n```\n"
                start_code: '{print} Hva vil terningen vise denne gangen?'
                story_text_2: "## Challenge\nThe dice in the example above are dice for a specific game. Can you make normal dice?\nOr other special dice from a different game?\n"
                example_code_2: "```\nchoices {is} _\n```\n"
            15:
                story_text: "## Terning\nI dette spillet må du trille 6 på så få forsøk som mulig.\n"
                example_code: "```\nvalg = 1, 2, 3, 4, 5, 6\n{print} 'Trill 6 så raskt som du kan!'\ntrillet = 0\nforsøk = 0\n{while} trillet != 6\n    trillet = valg {at} {random}\n    {print} 'Du trillet ' trillet\n    forsøk = forsøk + 1\n{print} 'Jippi! Du trillet 6 på ' forsøk ' forsøk.'\n```\n"
                start_code: '# skriv koden din her'
    quizmaster:
        name: Quizmester
        description: Lag din egen quiz!
        default_save_name: Quizmester
        levels:
            14:
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# skriv koden din her'
    language:
        name: Språk
        description: Øv på ord fra andre språk
        default_save_name: språk
        levels:
            16:
                start_code: '# skriv koden din her'
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
            5:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# skriv koden din her'
    secret:
        name: SuperSpion
        description: Lag din egen spionkode
        default_save_name: språk
        levels:
            12:
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'Hva heter du??'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassord is ask 'Hva er passordet?'\nif passord is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '## skriv koden din her'
            13:
                story_text: "## Superspy\nThe code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'Hva heter du??'\npassord is ask 'Hva er ditt passord?'\nif name is 'Agent007' and passord is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '## skriv koden din her'
    next:
        levels:
            4:
                start_code: "{print} 'Videre til neste nivå!'"
                story_text: "## What's next?\nIn the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.\nBut it's not really interactive, the player doesn't have any influence on what happens in the game.\n\nIn the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret passord for your computer for example.\nSo let's take a peak!\n\n```\npassord {is} {ask} 'What is the correct passord?'\n```\n"
            5:
                start_code: "{print} 'Videre til neste nivå!'"
                story_text: "## What's next?\nNow you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can {ask} guests what they would like to eat.\nWhat you can't yet do though, is calculate the price for everyone's dinner.\n\nThe next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.\nAnother option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.\nGo see for yourself in the next level!\n"
                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
            11:
                start_code: "{print} 'Videre til neste nivå!'"
                story_text: "## What's next?\nMaybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.\nFrom the next level on you can use decimal numbers.\n\nAnother cool feauture in the next level is that you can use mulitiple words in a variable.\nFor intance, you could already do this...\n"
                example_code: "```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
            1:
                story_text: "## What's next?\nCongratulations! You've reached the end of level 1. Hopefully you've already made some awesome codes, but Hedy has a lot more to discover. \n\nIn the first level you might've notice that the `{echo}` command can only save one bit of information at a time. \nFor example in the restaurant adventure, you could {echo} what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence. \n"
                example_code: "```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\n"
                story_text_2: "If the player types a hamburger and coke, you can't say `so you would like a hamburger and coke`, but you have to make two separate line. \nAlso, the `{echo}` command only echoes the word at the end of the sentence. So you can't say `your hamburger is coming right up!`.\n\nThat changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.\nSo let's go to the next level!\n"
                start_code: "{print} La oss starte!"
            2:
                story_text: "## What's next?\nIn this level you've learned what a variable is and how you can use it to make your adventures more interactive.\nBut... that's not the only thing you can do with variables! You can also use variables to make lists.\nAnd you can even let Hedy pick a random word out of a list, which allows you to make real games!\nTake a quick look at the next level!\n"
                start_code: "{print} Videre til neste nivå!"
            3:
                story_text: "## What's next?\nIn this level you've been practising with variables, but maybe you've come across this mistake.\n\nTry to run this code:\n```\nname {is} Sophie\n{print} My name is name\n```\nOf course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`.\nIn the next level this problem is fixed by using quotation marks.\n"
                start_code: "{print} Videre til neste nivå!"
            6:
                story_text: "## What's next?\n Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.\n For example {if} you want to program 'Happy Birthday'.\n\nThat's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.\n"
                example_code: " ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n ```\n"
                start_code: "{print} 'Videre til neste nivå!'"
            7:
                story_text: "## What's next?\nNow you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.\nthe next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!\n"
                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
                start_code: "{print} 'Videre til neste nivå!'"
            8:
                story_text: "## What's next?\nGreat job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...\nGood news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.\n"
                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
                start_code: "{print} 'Videre til neste nivå!'"
            9:
                story_text: "## What's next?\nYou're doing great! In this level we still face a small problem. You have learned to repeat lines, but what if you'd want to slightly change the line.\nFor example if you want to sing the song '{if} you're happy and you know it'. It would look like this:\n\nIf you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.\nIn the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!\nPlease take a look!\n"
                example_code: "```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
                start_code: "{print} 'Videre til neste nivå!'"
            12:
                start_code: "{print} 'Videre til neste nivå!'"
                story_text: "## What's next?\nIn the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:\n\nIn this system you have to give both the correct brukernavn and the correct passord.\nIn the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!\nCheck it out!\n"
                example_code: "```\nbrukernavn {is} {ask} 'Hva er ditt brukernavn?'\npassord {is} {ask} 'Hva er ditt passord?'\n{if} brukernavn {is} 'Hedy'\n    {if} passord {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
            10:
                story_text: "## What's next?\nYou have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.\nIn Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!\n"
                start_code: "{print} 'Videre til neste nivå!'"
            13:
                story_text: "## What's next?\nWith the program below you can calulate {if} you've passed a subject at school (so, a grade of six or higher).\nYou can see this code is extremely inefficient, du to the very long code in line 5.\nAll the different grades from 1 to 5 had to be programmed seperately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!\n"
                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
                start_code: "{print} 'Videre til neste nivå!'"
            14:
                story_text: "## What's next?\nIn this game below a code has been made to make sure the player can play on as long as he/she wants...\nBut the code is ineffective and way too long. Also, what {if} the player wants to play 101 games instead of 100?\nYou can't play to infinity?\nIn the next level you will learn a command that makes all of this a lot easier!\n"
                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
                start_code: "{print} 'Videre til neste nivå!'"
            15:
                story_text: "## What's next?\nIn the next level we will grow a bit more towards real Python code. thon code. You will also learn how to match two lists together.\nThis way you can program a code in which the correct animal is matched to the right sound.\nBecause the two codes below... Are obviously nonsense!\n"
                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
                start_code: "{print} 'Videre til neste nivå!'"
            16:
                story_text: "## What's next?\nIn the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.\nFor example in this code:\n"
                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
                start_code: "{print} 'Videre til neste nivå!'"
            17:
                story_text: "## What's next?\nIn the next level you will learn a real Python way to use `{print}`.\n"
                start_code: "{print} 'Videre til neste nivå!'"
            18:
                story_text: "## What's next?\nCongratulations! You have reached the last level of Hedy! But no worries, we are working very hard to create more levels and new adventures. So please come back later to check out the newest levels!\n"
                start_code: "{print} ('Godt jobbet!!!')"
        name: Hva er neste?
        description: Hva er neste?
        default_save_name: neste
    tic:
        name: Tic Tac Toe
        description: Play a game of Tic Tac Toe!
        default_save_name: Tic
        levels:
            13:
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            14:
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                start_code: '## place your code here'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
                start_code: '## place your code here'
    blackjack:
        name: Blackjack
        description: Try to get as close to 21 as you can
        default_save_name: Blackjack
        levels:
            17:
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# place your code here'
    pressit:
        levels:
            9:
                example_code: "```\ntotal = 1\n{repeat} 5 times\n    {if} x is {pressed}\n        {print} total\n        {print} 'keep pressing!'\n        total = total + 1\n```\n"
                story_text_2: "Besides counting, you can now also move the turtle in many more ways than only forward or backwards!\nTry making some figures by walking the turtle around!\n"
                example_code_2: "```\nstepsize = 25\nleft = -90\nright = 90\naround = 180\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
                story_text: "Now that you know how to nest multiple statements, you can also do this with {pressed}!\nBy nesting a pressed in a {repeat} loop, you can repeatedly press buttons and make something happen.\nNow we know you could do this before, but by using the indents you have much more overview!\nTry it counting to 5, for example!\n"
                start_code: '# place your code here'
            10:
                story_text: "In this level you can make the turtle draw you a figure. The turtle is raring to go.\nGive the turtle the starting signal by pressing the x or y key on your keyboard.\nCan you let the turtle draw you another figure?\n"
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} -90\n{if} y is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} 90\n```\n"
                start_code: '# place your code here'
            11:
                story_text: "Now that you have learned of the ```for ... in range ... to ...``` rule, you can use it for ```pressed```\ntoo! for example, try moving the turtle! The turtle grows everytime you press a linked button.\nThis way the turtle can move further every step!\n"
                example_code: "```\nleft = -90\nright = 90\naround = 180\nfor counter in range 1 to 15\n    stepsize = counter * 5\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "Are you familiar with videogames? You walk into tall grass and are suddenly approached by\na very suspicious mouse. What will you do?\nIn this level we will make a small menu with different kinds of options.\nStoring text into a variable is quite handy for repeated uses.\nOption, I choose you!\n"
                example_code: "```\nchoose = 'You chose option: '\nprint 'A wild mouse appeared!'\nprint 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n is {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    sleep\n    {print} 'Congratulations you did it!'\n{if} c is {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    sleep\n    {print} 'The mouse got scared and ran away!'\n{if} b is {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r is {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "Now that you learned how to use ```and``` and ```or```, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump if he turns left and right first!\n"
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        looked_left = 1\n    {if} d is {pressed}\n        turn right\n        looked_right = 1\n    {if} p is {pressed}\n        {if} looked_left is 1 and looked_right is 1\n            forward 40\n            looked_left = 0\n            looked_right = 0\n```\n"
                start_code: '# place your code here'
            14:
                story_text: "Now that you learned how to use operators, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump every 5 steps or every 4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "Now that you have learned about the ```while``` loops, you can start using it on the turtle!\nThe turtle is now only allowed to take only 15 steps or turn 15 times, before he gets tired!\nTry to get as far as possible before the turtle gets tired! You can use your superjump after 2 turns\nor 5 steps.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\nwhile tired_in > 0\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "Lets move a little with a game of Twister!\nWhen everyone is ready, press the x key for the next move!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\nrepeat 20 times\n    l = limbs[random]\n    c = colours[random]\n    {if} x is {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
                start_code: '# place your code here'
            17:
                story_text: "Now that you learned how to use ```elif```, we can use it with ```pressed```too! Be aware,\n```elif ... is pressed ``` is not possible! That is why we are going to nest some ```elif```\nstatements into the ```pressed``` options. We also had to add ```:``` to the code to make\neverything work! imagine the turtle being able to do a superjump forward. by pressing ```p``` the\nturtle can make a superjump! However, the turtle can only do this jump every 5 steps or every\n4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}:\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}:\n        turn around\n    {if} a is {pressed}:\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}:\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}:\n        {if} jumptime <= 0 or spins <= 0:\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            print \"you need to take more steps or turns before you can superjump!\"\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "## Press it!\nIn the introduction you were also told about the new keyword ```pressed```! Using ```pressed```\ncan make coding much more interactive, and you can have live control of what is executed!\nIn the upcoming levels you will learn how ```pressed``` makes this possible and what uses ```pressed```\nhas.\nBesides printing text, there is a whole other variety of uses for ```pressed```\nFor example, you can also link turtle commands to keys! Try it!\n"
                example_code: "```\nif x is {pressed} forward 50\n```\n"
                story_text_2: "## If Else Pressed\nYou can also assign an else statement to ```pressed```. The else statement will be executed\nwhenever you press a key other than the key you assigned.\n"
                example_code_2: "```\nif y is {pressed} {print} 'Amazing! You pressed the y key!'\nelse {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# place your code here'
            6:
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\nprint 'press a to add, s to substract, d to divide, m to multiply'\nif a is {pressed} result = first + second\nif s is {pressed} result = first - second\nif d is {pressed} result = first / second\nif m is {pressed} result = first * second\nprint 'The answer is ' result\n```\n"
                start_code: '# place your code here'
                story_text: "Did you know you can also make a calculator using ```pressed```?\nGive the calculator two numbers and press the m key to multiply.\nNow you don't have to bring your own!\nTry other keys and see what happens! Do you get a different result?\n"
            7:
                story_text: "You might have tried it in level 5 and 6, pressing the key linked to ```pressed``` multiple\ntimes. If you did, you noticed that this did nothing. but now that you have learned about repeat, we\ncan press keys multiple times! Make the turtle walk forward!\n"
                example_code: "```\nrepeat 3 times if x is {pressed} forward 15\n```\n"
                start_code: '# place your code here'
            8:
                story_text: "## Press It!\nNow that you need to use indents for the {if} and {else} statements,\nyou will also have to indent code when using {pressed}! Don't worry,\nit works te same as with the other statements, see the example!\nPress another key instead of x and see what happens.\n"
                example_code: "```\n{if} x is {pressed}\n    {print} 'Only the cool kids press the x key.'\n{else}\n    {print} 'The adventurous kids press something else.'\n```\n"
                start_code: '# place your code here'
        name: Press it!
        description: Try linking a keyboard key to a command!
        default_save_name: Pressit
