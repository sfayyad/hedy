adventures:
    default:
        name: "Вступление"
        description: "Объяснение уровня"
        default_save_name: "intro"
        levels:
            6:
                start_code: "{print} '5 раз по 5 это ' 5 * 5"
                story_text: "## 1 + 1\n На этом уровне вы узнаете кое-что новое: теперь вы также можете вычислять.\n\n Плюс - это просто, вы пишете его как в математике: `5 + 5`, например. Минус также работает хорошо, это `5 - 5`.\n\n Со временем все немного иначе, потому что на клавиатуре нет символа времени. Просто поищите, его действительно нет!\n Поэтому мы умножаем со звездочкой над 8: `5 * 5`. Читайте это как \"5 умножить на 5\", это поможет вам лучше запомнить.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
                story_text_2: "Мы также вносим изменения в хранение слова в переменной! Теперь вы можете использовать `=` вместо `{is}`, когда мы храним имя или число в переменной, например, так:\n"
                example_code_2: "```\nname = Хеди\nanswer = 20 + 4\n```\n"
            12:
                story_text_5: "**Числа не нуждаются в кавычках**.\nДля чисел не используются кавычки на странице `=`:\n"
                start_code: "{print} 'В десятичных числах теперь нужно использовать точку'\n{print} 2.5 + 2.5"
                story_text: "## Числа и тексты\n**Десятичные числа**\nДо сих пор Hedy не позволял использовать десятичные числа, такие как 1,5, но теперь мы это делаем. Обратите внимание, что компьютеры используют `.` для десятичных чисел."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Все тексты должны быть заключены в кавычки**.\nНа этом уровне вам также придется использовать кавычки при сохранении текста с `=`:\n"
                example_code_2: "```\nимя = 'Hedy the Robot'\n{print} 'Hello ' имя\n```\n"
                story_text_3: "**Все элементы в списках также нуждаются в кавычках**.\nСписки - это тексты, поэтому им тоже нужны кавычки. Обратите внимание, что каждый отдельный элемент списка заключен в кавычки.\nЭто позволяет сохранить два слова как один элемент в списке, например, \"Железный человек\"\n"
                example_code_3: "```\nсупергерои = 'Человек-паук', 'Бэтмен', 'Железный человек'\n{print} superheroes {at} {random}\n```\n"
                story_text_4: "**Весь текст после сравнений `{if}` также нуждается в кавычках**.\n"
                example_code_4: "```\nname = {ask} 'Как тебя зовут?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
                example_code_5: "```\nсчет = 25\n{print} 'Вы получили ' score\n```\n"
                story_text_6: "**Математика со словами** \nНа этом уровне также разрешается использовать знак + с текстами. Например:"
                example_code_6: "```\na = 'Hello'\nb = 'Мир!'\n{print} a + b\n```\n"
            1:
                story_text: "## Добро пожаловать в Hedy!\nНа Уровне 1 вы можете использовать команды `{print}`, `{ask}` и `{echo}`.\nВведите свой код в поле программирования. Или нажмите зеленую кнопку в блоке примера кода, и код будет набран за вас!\nПопробуйте выполнить код самостоятельно с помощью зеленой кнопки \"Выполнить код\" под полем программирования.\n\nВы можете распечатать текст на экране с помощью команды `{print}`.     \n"
                example_code: "```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
                story_text_2: "Вы также можете запросить ввод с помощью команды `{ask}`и повторить его с помощью команды `{echo}` .\n"
                story_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
                example_code_2: "```\n{ask} What is your name?\n{echo} hello\n```\n"
                start_code: '{print} hello world!'
            2:
                story_text: "## Variables\nIn level 2 we learn two new commands: `{is}` and `{sleep}`.\nYou can name a word with `{is}`. This is called a variable. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n\nThis way you no longer need the `{echo}` command!\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
                example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
                story_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
                example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
                start_code: '{print} hello world!'
            3:
                story_text: "## Make a list!\nIn level 3 you can make a list. You can let the computer choose something random from the list. You do that with `{at} {random}`.\n"
                example_code: "```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
                story_text_2: Вы также можете добавить элементы в список с `{add}` и удалить элементы с `{remove}`.
                example_code_2: "```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
                start_code: '{print} Здравствуй мир!'
            4:
                start_code: "{print} 'Привет, мир'"
                story_text: "## 'Кавычки'\nНа уровне 4 `{ask}` и `{print}` изменились.\n\nВы должны заключить текст, который хотите напечатать, в кавычки.\n\nЭто полезно, потому что теперь вы можете печатать все слова, которые хотите. Также слова, которые вы использовали для хранения чего-либо с помощью `{is}`.\n\nБольшинство языков программирования также используют кавычки при печати, так что мы становимся на шаг ближе к настоящему программированию!\n"
                example_code: "```\n{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer\n```\n"
                story_text_2: "## Приключения становятся все сложнее и сложнее\nПриключения становятся все сложнее и сложнее на следующих вкладках.\nПоэтому лучше всего начинать слева и двигаться вправо, чтобы все больше и больше усложнять себе задачу.\n"
            18:
                start_code: |-
                    имя = 'Хеди'
                    {print}('Меня зовут ', имя)
                story_text: |-
                    ## The last level!
                    We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.

                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                       {print}('Это строка ', i)
                    ```

                story_text_2: |-
                    Если вы хотите вывести более одного элемента, их нужно разделить запятыми.

                example_code_2: |
                    ```
                    температура = 25
                    {print}('На улице ', температура, ' градусов')
                    ```

                story_text_3: |-
                    ## Ввод
                    Последнее изменение, которое нам нужно сделать для получения кода Python, - это замена `{ask}` на `{input}`.

                example_code_3: |
                    ```
                    {print}("Меня зовут Хеди!")
                    name = {input}('What is your name?')
                    {print}('Так тебя зовут ', имя)
                    ```

            5:
                start_code: "имя {is} {ask} 'как тебя зовут?'\n{if} имя {is} Хеди {print} 'круто!' {else} {print} 'meh'"
                story_text: "## If... else....\nНа 5 уровне есть что-то новенькое, `{if}`! С помощью `{if}` ты можешь выбирать между двумя разными опциями.\nЭтот код выводит \"nice\" если ты введешь \"Hedy\" в качестве имени, а если ты введешь что-либо другое, выведется \"boo!\"\n`{ask}` {и} `{print}` работают также, как они работали на 4 уровне.\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
                story_text_3: "## Списки\nКогда мы хотим проверить, есть ли что-то в списке, мы можем использовать команду `{in}`.\nЭтот код выводит \"Красиво!\", если вы выбрали зеленый или желтый цвет, и \"Meh\" в противном случае.\n"
                example_code_3: "```\nкрасивые_цвета {is} зеленый, желтый\nцвет {is} {ask} 'Какой ваш любимый цвет?'\n{if} цвет {in} красивые_цвета {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "Иногда код с `{if}` становится очень длинным и не помещается на строке. <br> Вы также можете разделить код на две строки, начав вторую строку с `{else}` следующим образом:\n"
                example_code_2: "```\nимя {is} {ask} 'как тебя зовут?'\n{if} имя {is} Хеди {print} 'мило'\n{else} {print} 'boo!'\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy is fun!'"
                story_text: "## Уровень 7! Уровень 7!\nУровень 7 добавляет команду `{repeat}`. `{repeat}` можно использовать для многократного выполнения одной строки кода.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello folks'\n    {print} 'Это будет напечатано 5 раз'"
                story_text: "## Отступы\n`{ask}` и `{print}` по-прежнему работают так, как вы их знаете. Но `{if}`, `{else}` и `{repeat}` изменились!\nТеперь вы можете выполнять группы кода вместе, но вам придется *отступать* код.\nЭто означает, что в начале строки нужно поставить четыре пробела. Вы также должны делать отступ, когда хотите создать блок из одной строки.\n"
                example_code: "Вот как теперь работает команда `{repeat}`:\n```\n{repeat} 5 {times}\n    {print} 'Привет всем'\n    {print} 'Это все повторяется 5 раз'\n```\nВот как теперь работают команды `{if}` и `{else}`:\n\n```\nname {is} {ask} 'Как вас зовут?'\n{if} name {is} Hedy\n    {print} 'Добро пожаловать, Хеди'\n    {print} 'Вы можете играть на своем компьютере!'\n{else}\n    {print} 'INTRUDER!'\n    {print} 'Вы не можете использовать этот компьютер!'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    еда = {ask} 'Что вы хотите?'\n    {if} еда {is} пицца\n        {print} 'отлично!'\n    {else}\n        {print} 'пицца лучше'"
                story_text: "## Теперь все вместе!\nНа этом уровне вы можете не только использовать несколько строк с `{if}` и `{repeat}`, но и соединять их вместе!\nВ примере вы видите команду `{if}` внутри команды `{repeat}`. Допускается и обратное, и `{if}` также разрешено вводить в `{if}`, а `{repeat}` - в `{repeat}`.\nПопробуйте!\n"
                example_code: "```\n{repeat} 3 {times}\n    еда = {ask} 'What do you want?'\n    {if} еда {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
            10:
                start_code: "животные {is} собака, кошка, рыба-глобус\n{for} животное {in} животные\n  {print} 'Я люблю' животное"
                story_text: "## Для каждого пункта в моем списке...\nНа этом уровне мы изучаем новый код под названием `{for}`. С помощью `{for}` вы можете создать список и использовать все элементы.\n`{for}` создает блок, как `{repeat}` и `{if}`, поэтому все строки в блоке должны начинаться с пробелов."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} счетчик {in} {range} 1 {to} 5\n    {print} счетчик"
                story_text: "## Loops!\n`{print}` работает точно так же, но мы добавляем новую форму `{for}`. Теперь вы можете написать `{for} counter {in} {range} 1 {to} 5` вместо `{repeat} 5 {times}` и использовать `counter` в своей программе.\nПопробуйте это сделать и посмотрите, что получится! Не забывайте использовать отступы после утверждений `{for}` и `{if}` (Это означает начинать предложение с четырех пробелов)."
                example_code: "```\n{for} counter {in} {range} 1 {to} 5\n    {print} counter\n```\n"
            13:
                start_code: "имя = {ask} 'как вас зовут?'\nвозраст = {ask} 'каков ваш возраст?'\n{if} имя {is} 'Хеди' {and} возраст {is} 2\n    {print} 'Ты настоящая Хеди!'"
                story_text: "## И... Или...?\nСейчас мы изучим `{and}` и `{or}`! Если вы хотите проверить два утверждения, вам не обязательно использовать два {if}, но можно использовать `{and}` и `{or}`. Если вы используете `{and}`, оба утверждения, слева и справа от `{and}`, должны быть истинными. Можно также использовать `{or}`. Тогда только одно утверждение должно быть верным."
                example_code: "```\nимя = {ask} 'как вас зовут?'\nвозраст = {ask} 'какой ваш возраст?'\n{if} имя {is} 'Хеди' {and} возраст {is} 2\n    {print} 'Ты настоящая Хеди!'\n```\n"
            14:
                start_code: "возраст = {ask} 'Сколько тебе лет?'\n{if} возраст < 13\n    {print} 'Ты младше меня!'\n{else}\n    {print} 'Ты старше меня!'"
                story_text: "## Великий, Величайший, Самый Великий!\nСейчас мы познакомимся с новыми предметами. Возможно, вы уже знаете их из математики: `<` и `>`.\nС помощью `<` проверяется, меньше ли первое число второго, например, возраст `<` 12 проверяется, меньше ли возраст 12.\nЕсли вы хотите проверить, меньше или равно ли первое число второму, вы можете использовать `<=`, например, возраст `<=` 11.\n `>` проверяет, больше ли первое число второго, например points `>` 10 проверяет, больше ли points 10.\nЕсли вы хотите проверить, больше или равно ли первое число второму, вы можете использовать `>=`, например points `>=` 11.\nЭти сравнения используются в `{if}`, например, так:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "Начиная с этого уровня, если вы хотите сравнить точно, вы можете использовать два знака равенства. Так поступает большинство языков программирования:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} имя == 'Хеди'\n    {print} 'Ты крут!'\n```\n"
                story_text_3: "Вы также можете сравнивать, если что-то *не* равно чему-то другому, используя `!=`, как это:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'Вы не Хеди'\n```\n"
            15:
                start_code: "ответ = 0\n{while} ответ != 25\n    ответ = {ask} 'Сколько будет 5 раз по 5?'\n{print} 'Был дан правильный ответ'"
                story_text: "## Больше петель!\nМы изучим новый цикл - цикл `{while}`! Мы продолжаем цикл до тех пор, пока утверждение истинно.\nПоэтому не забывайте менять значение в цикле.\n\nВ коде примера мы продолжаем цикл до тех пор, пока не будет получен правильный ответ.\nЕсли правильный ответ так и не будет получен, цикл не завершится!"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'Сколько будет 5 раз по 5?'\n{print} 'Был дан правильный ответ'\n```\n"
            16:
                start_code: "фрукты = ['яблоко', 'банан', 'вишня']\n{print} фрукты"
                story_text: "## Все больше и больше похоже на настоящий код!\nМы будем создавать списки, как в Python, с квадратными скобками вокруг списков! Мы также сохраним кавычки вокруг каждого элемента, как мы учили на предыдущих уровнях.\nВы также можете использовать квадратные скобки, чтобы указать место в списках."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Готов или нет, но я иду!'
                story_text: |-
                    ## Elif
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.

                    In this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    story:
        name: История
        levels:
            3:
                example_code_2: "```\n{print} Он слышит звук\nживотные {is} \U0001F43F, \U0001F994, \U0001F987, \U0001F989\nживотные {is} {ask} Как ты думаешь, что это?\n{add} животное {to_list} животные\n{print} это было животное {at} {random}\n```\n"
                story_text_3: "Вот пример команды `{remove}` в вашей истории\n\n## Задача\nМожете ли вы использовать 3 новые команды `{at} {random}`, `{add} {to}` и `{remove} {from}` в своей собственной истории?\n"
                start_code: '{print} Ваша история'
                story_text: "## История\nНа уровне 3 вы можете сделать свою историю более увлекательной. Вы можете использовать случайность для любого монстра, животного или другого препятствия, например, так:\n"
                example_code: "```\nживотные {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} Теперь он слышит звук животные {at} {random}\n```\n"
                story_text_2: "Команда `{add}` также может пригодиться в вашей истории.\n"
                example_code_3: "```\n{print} His backpack got way too heavy.\n{print} Inside were a bottle of water, a flashlight and a brick.\nbag {is} water, flashlight, brick\ndump {is} {ask} Which item should he dump?\n{remove} dump {from} bag\n```\n"
            1:
                story_text: "## Создайте историю\nНа уровне 1 вы можете создать историю с другим главным героем, которого вы вводите сами.\n\nВ первой строке используйте `{ask}` и спросите, кто будет главным героем истории.\n\nПосле этой первой строки начните с `{print}`, если предложение нужно напечатать.\nВы используете `{echo}`, если хотите, чтобы главный герой был в конце предложения.\n"

                example_code: "```\n{ask} The main character of this story is\n{print} The main character is now going to walk in the forest\n{echo} He's a bit scared,\n{print} He hears crazy noises everywhere\n{print} He's afraid this is a haunted forest\n```\n"
                start_code: '{print} Ваша история начинается здесь'
                story_text_2: "## Задача\nМожете ли вы создать свою собственную историю в Hedy, используя `{print}`, `{ask}` и `{echo}`?\n"
            2:
                story_text: "## История\nНа уровне 2 вы можете сделать свой рассказ более интересным. Теперь имя вашего главного героя может находиться в любом месте предложения.\n\nПравда, для этого вам придется немного доработать программу. Теперь вы должны сначала назвать имя своего главного героя.\n\nЗатем вы можете поместить это имя в любое место в предложении.\n\n## Вызов\nМожете ли вы сами составить рассказ, используя переменную? Можете ли вы добавить еще больше переменных?\n"
                example_code: "```\nname {is} {ask} What is the name of the main character?\n{print} name is now going to run in the woods\n{print} name is a bit scared\n{print} Suddenly he hears a crazy noise...\n{sleep}\n{print} name is afraid this is a haunted forest\n```"
                start_code: '{print} Ваша история'
            4:
                story_text: "## История\nВозможно, вы заметили, что в предыдущих уровнях все еще существует проблема. Вы пытались напечатать предложение, содержащее слово name? Например, `{print}` my name is name.\nВы можете решить эту проблему в этом уровне. Вы должны использовать кавычки для всего, что собираетесь напечатать.\n"
                example_code: "```\nимя {is} Ганс\n{print} Имя главного героя - _ имя\n{print} имя _ сейчас собирается гулять по лесу _\n{print} имя _ немного боится _\nживотные {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987.\n{print} Он слышит звуки _ животных {at} {random}\n{print} имя _ боится, что это лес с привидениями.\n```\n"
                start_code: "{print} 'Ваша история будет напечатана здесь!'"
            5:
                story_text: "## История\nНа этом уровне вы можете запрограммировать различные концовки, которые сделают вашу историю еще более увлекательной.\n\n## Задача\nПридумайте две концовки для вашей истории, например:\n\n- Принцесса гуляет по лесу.\n- Она сталкивается с чудовищем\n\n- Счастливый конец: Она берет свой меч, и чудовище быстро убегает.\n- Плохая концовка: Монстр съедает принцессу\n\nВы также можете сделать так, чтобы имя можно было вводить повторно. Это работает так же, как и в предыдущих уровнях. Вы можете объединить это с `{if}`, и тогда у вас уже получится целая программа!\n"
                example_code: "```\nname {is} {ask} 'Who is walking in the forest?'\n{print} name 'walks through the forest'\n{print} name 'encounter a monster'\nend {is} {ask} 'Would you like a good or a bad ending?'\n{if} end {is} good {print} name 'takes the sword and the monster quickly runs away'\n{else} {print} 'The monster eats' name\n```\n"
                start_code: "{print} 'Здесь начнется ваша история!'"
            7:
                story_text: "## История\nВ рассказе кто-то произносит слова несколько раз. Например, когда кто-то зовет на помощь или поет песню.\nВы можете вставить такие повторы в свой рассказ, на этом уровне с `{repeat}`.\n\n## Задача\nМожете ли вы создать свою собственную историю с повторами?\n"
                example_code: "```\n{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            8:
                story_text: "## История\nВ этом уровне вы можете использовать несколько строк в командах {if}, таким образом вы можете улучшить счастливый или грустный конец!\n\n## Задача\nСможете ли вы создать свою собственную историю с двумя разными концовками?\n"
                example_code: "```\n{print} 'OH NO! The T-rex is closing in!'\nend = {ask} 'Do you want a happy or a sad ending?'\n{if} end {is} happy\n    {print} 'Just in time Richard jumps back into the time machine!'\n    {print} 'Michael types in the code and...'\n    {print} '\U0001F4A5ZAP!\U0001F4A5'\n    {print} 'They are back in their garage'\n{else}\n    {print} 'Michael yells COME ON RICHARD! RUN FASTER!'\n    {print} 'But Richard is too slow...'\n    {print} 'The T-rex closes in and eats him in one big bite!\U0001F996'\n```\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "## История\nНа этом уровне вы можете использовать вложенность, чтобы поместить команды `{if}`, `{repeat}` или `{for}` внутри других команд `{if}`, `{repeat}` или `{for}`. Это дает вам множество возможностей и действительно помогает сделать вашу историю интерактивной.\n"
                example_code: "```\n{print} 'Robin is walking downtown'\nlocation = {ask} 'Is Robin going into a shop, or does she go home?'\n{if} location {is} shop\n    {print} 'She enters the shop.'\n    {print} 'Robin sees an interesting looking book'\n    book = {ask} 'Does Robin buy the book?'\n    {if} book {is} yes\n        {print} 'Robin buys the book and goes home'\n    {else}\n        {print} 'Robin leaves the shop and goes home'\n{else}\n    {print} 'Robin goes home'\n```\n"
                story_text_2: "Приведенный выше пример довольно прост, но, вложив в него {if}, вы можете действительно усовершенствовать свой код и превратить свою историю в настоящую игру. Посмотрите на этот пример!"
                example_code_2: "## Сложный код\n```\nмеч = потерян\nигра = включена\n{print} 'Наш герой идет через лес'\n{print} 'Путь разделяется на две части'\n{repeat} 2 {times}\n    {if} игра {is} on\n        путь = {ask} 'Какой путь она должна выбрать?\n        {if} путь {is} налево\n            {if} меч {is} найден\n                {print} 'Наш герой встречает дракона!'\n                {print} 'К счастью, у нашего героя есть меч, чтобы победить чудовище!'\n                игра = конец\n            {else}\n                {print} 'Наш герой находит дракона, но у него нет никакого оружия!'\n                {print} 'Наш герой побежден драконом...'\n                {print} 'Попробуйте еще раз'\n                игра = окончена\n        {if} путь {is} направо\n            {if} меч {is} потерян\n                {print} 'Наш герой находит меч'\n                {print} 'Это может очень пригодиться'\n                меч = найден\n            {else}\n                {print} 'Вы уже нашли меч. Здесь больше ничего не осталось'.\n                {print} 'Она идет обратно'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## История\nНа этом уровне вы можете использовать команду {for} в своем рассказе. Таким образом, вы можете легко запрограммировать детскую книгу \"Бурый медведь, бурый медведь, что ты видишь\"\n"
                example_code: "```\nanimals = red bird, black sheep, green frog, yellow duck, little child\n{print} 'brown bear'\n{print} 'brown bear'\n{print} 'What do you see?'\n{for} animal {in} animals\n    {print} 'I see a ' animal ' looking at me'\n    {print} animal\n    {print} animal\n    {print} 'What do you see?'\n{print} 'I see all the animals looking at me!'\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "## История\nНа этом уровне вы можете использовать кавычки для сохранения нескольких слов в переменной."
                example_code: "```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "## История\nИспользуя команды `{and}` и `{or}`, вы можете сократить свои истории. Например, посмотрите историю о драконе.\n\n## Задача\nСможете ли вы создать свою собственную приключенческую мини-игру, подобную этой?\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## История\nИспользование цикла `{while}` может сделать ваши истории более интересными. Например, вы можете использовать `{while} game {is} 'on'`, чтобы можно было играть до тех пор, пока игра не закончится.\nИли вы можете использовать `{while} sword {is} 'lost'`, чтобы игрок не мог продолжить игру, пока не найдет что-нибудь.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
                start_code: '# разместите здесь свой код'
        description: История
        default_save_name: История
    parrot:
        levels:
            3:
                story_text: "## Попугай\nНаучите своего попугая новому слову с помощью `{add}`.\n## Задача\nКак заставить попугая произносить несколько слов?\n"
                start_code: '# разместите здесь свой код'
                example_code: "```\nслова {is} squawk, Hedy\n{print} Дрессируйте своего попугая!\nnew_word {is} {ask} Какому слову вы хотите их научить?\n{add} новое_слово {to_list} слова\n{print} \U0001F9D2 Скажи новое_слово, Хеди!\n{print} \U0001F99C слова {at} {random}\n```\n"
            1:
                story_text: "## Попугай\nСоздайте своего собственного онлайн-попугая, который будет копировать вас!\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Это попугай Хеди'
                story_text_2: "## Вызов\nМожете ли вы заставить попугая задать другой вопрос? Заполните пробелы в примере!\n"
                example_code_2: "```\n{print} Это попугай Хеди.\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "## Попугай\nСоздайте своего собственного онлайн-попугая, который будет копировать вас!\n"
                example_code: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} squawk\n{sleep}\n{print} name\n```\n"
                start_code: '{print} Это попугай Хеди!'
                story_text_2: "## Вызов\nВы можете использовать переменные, чтобы заставить попугая произносить не только ваше имя. Можете ли вы завершить этот код?\n"
                example_code_2: "```\n{print} Я попугай Хеди\nимя {is} {ask} как тебя зовут?\n{print} имя\n{sleep}\n{print} имя\nфамилия {is} {ask} какая у вас фамилия?\n_\n{sleep}\n_\n```\n"
            5:
                story_text: "## Попугай\nВознаградите своего попугая, если он произнесет правильное слово!\nЗакончите код, заполнив 4 пропущенные команды.\n"
                example_code: "```\nслова {is} squawk, Hedy\n{print} 'Дрессируйте своего попугая!'\nnew_word {is} {ask} 'Какому слову вы хотите их научить?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '\U0001F9D2 Скажи новое_слово, Хеди!'\n{print} '\U0001F99C ' said_word\n_ said_word {is} new_word _ '\U0001F9D2 Отличная работа, Хеди! \U0001F36A'\n_ _ '\U0001F9D2 Нет, Хеди! Скажи новое_слово\n```\n"
                start_code: '# разместите свой код здесь'
        name: Попугай
        description: Создайте своего собственного онлайн-попугая, который будет копировать вас!
        default_save_name: Попугай
    dishes:
        name: Блюда?
        description: Используйте компьютер, чтобы узнать, кто моет посуду (Начните с уровня 2)
        default_save_name: Блюда
        levels:
            3:
                story_text: "## Мытье посуды\nВы всегда расходитесь во мнениях дома по поводу того, кто должен сегодня мыть посуду или менять туалет?\nТогда вы можете позволить компьютеру выбирать очень справедливо. Вы можете запрограммировать это в этом уровне!\nСначала вы составляете список членов вашей семьи. Затем выберите `{at} {random}` из списка.\n"
                example_code: "```\nлюди {is} mom, dad, Emma, Sophie\n{print} люди {at} {random}\n```\n"
                story_text_2: "## Взломайте программу для мытья посуды!\nНе хочется самому мыть посуду? Взломайте программу, удалив свое имя из списка с помощью команды `{remove}` `{from}`.\n"
                example_code_2: "```\nлюди {is} мама, папа, Эмма, Софи\nваше_имя {is} {ask} Кто вы?\n_ ваше_имя _ люди\n{print} _ _ _ _ моет посуду\n```\n"
                start_code: '{print} Кто моет посуду?'
            4:
                story_text: "## Мытье посуды\nС помощью кавычек вы можете сделать планирование мытья посуды более красивым.\nНа этот раз пример кода не совсем полный.\n\nМожете ли вы завершить код, заполнив пропуски? Каждый пробел должен быть заменен одним словом или символом.\n\nСовет: Не забывайте о кавычках!\n"
                example_code: "```\nлюди {is} mom, dad, Emma, Sophie\n{print} _ the dishes are done by _\n{sleep}\n{print} люди {at} _\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            5:
                story_text: "## Посудомоечная машина\nС помощью сайта `{if}` вы можете получить больше удовольствия от выбора в программе. Вы можете сделать так, чтобы ваша программа реагировала на выбор, который сделал компьютер.\n\nМожете ли вы дописать код так, чтобы он печатал \"жаль\", когда наступает ваша очередь, а в противном случае - \"да!\"?\nНе забывайте о кавычках!\n"
                example_code: "```\nлюди {is} мама, папа, Эмма, Софи\nпосудомоечная машина {is} люди {at} {random}\n{if} посудомоечная машина {is} Софи {print} _ слишком плохо, что я должна мыть посуду _ \n{else} {print} 'к счастью, посуды нет, потому что' _ 'уже моет посуду'\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            6:
                story_text: "## Мытье посуды\nКак часто каждый будет мыть посуду? Справедливо ли это? Вы можете посчитать это на этом уровне.\n"
                example_code: "```\nлюди = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = люди {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                story_text_2: "## Будьте справедливы\nЕсли вам крайне не повезло, предыдущая программа может выбрать вас для мытья посуды на всю неделю! Это несправедливо!\nЧтобы создать более справедливую систему, вы можете использовать команду `{remove}`, чтобы удалить выбранного человека из списка. Таким образом, вам не придется снова мыть посуду до тех пор, пока все не отмоют свою очередь.\n\nПонедельник и вторник готовы! Можете ли вы добавить остальные дни недели?\nИ... можете ли вы придумать решение для случая, когда список пуст?\n"
                example_code_2: "```\nлюди = мама, папа, Эмма, Софи\nпосудомоечная машина = люди {at} {random}\n{print} 'В понедельник посуду моет: ' посудомоечная машина\n{remove} посудомоечная машина {from} люди\nпосудомоечная машина = люди {at} {random}\n{print} 'Вторник посуду моет: ' посудомоечная машина\n{remove} посудомоечная машина {from} люди\nпосудомоечная машина = люди {at} {random}\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            7:
                story_text: "## Посудомоечная машина\nНа сайте `{repeat}` вы можете повторять фрагменты кода. С его помощью можно рассчитать, кто будет мыть посуду в течение всей недели.\n"
                example_code: "```\nлюди = mom, dad, Emma, Sophie\n{repeat} _ _ {print} 'the dishwasher is' _\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            10:
                story_text: "## Мытье посуды\nНа этом уровне вы сможете сделать еще более совершенный сарай для мытья посуды.\n"
                example_code: "```\nдни = понедельник, вторник, среда, четверг, пятница, суббота, воскресенье\nимена = мама, папа, Эмма, Софи\n_ день _ дни\n    {print} имена {at} {random} ''моет посуду в '' день\n```\n"
                start_code: '# разместите здесь свой код'
    dice:
        levels:
            6:
                start_code: "{print} 'Что покажет кубик на этот раз?'"
                story_text: "## Кубик\nЗдесь вы можете снова сделать кубик земляного червя, но теперь вы также можете подсчитать, сколько очков выпало.\nВы, наверное, знаете, что червь считает 5 очков для земляных червей. Теперь после броска вы можете сразу подсчитать, сколько очков вы выбросили.\nВот код для подсчета очков для одного кубика:\n\n## Challenge\nМожете ли вы сделать код так, чтобы получить общее количество очков для 8 кубиков? Для этого нужно вырезать и вставить несколько строк кода.\n"
                example_code: "```\nварианты = 1, 2, 3, 4, 5, земляной\nочки = 0\nбросок = варианты {at} {random}\n{print} 'вы бросили' бросок\n{if} бросок {is} земляной очки = очки + 5 {else} очки = очки + бросок\n{print} 'это' очки ' точка'\n```\n"
                example_code_2: "## Заглядывая вперед\n\nУдалось ли вам рассчитать счет для 8 кубиков? Это потребовало много вырезания и вставки, верно? В 7 уровне мы сделаем это еще проще!\n"
            3:
                story_text: "## Кубики\nНа этом уровне мы можем выбирать из списка. С помощью этого мы можем позволить компьютеру выбрать одну сторону кубика.\nПосмотрите на игры, которые есть у вас дома в шкафу.\nЕсть ли среди них игры с (специальным) кубиком? Вы также можете скопировать его с помощью этого кода.\nНапример, кубик игры Earthworms с цифрами от 1 до 5 и земляным червем на нем.\n\n![Кубик игры \"Земляные черви\" с цифрами от 1 до 5 и земляным червем на нем](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Что покажет кубик на этот раз?'
                story_text_2: "## Вызов\nКубики в примере выше - это кубики для конкретной игры. Можете ли вы сделать обычные игральные кости?\nИли другие специальные кубики из другой игры?\n"
                example_code_2: "```\nвыбор {is} _\n```\n"
            4:
                story_text: "## Кубик\nВ этом уровне мы можем составлять предложения со значением кубика в предложении, разумеется, с кавычками.\nНа этот раз пример кода не совсем полный. Сможете ли вы закончить код?\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} _ you threw _\n{print} _ _ _ <- here you have to program the choice\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            5:
                story_text: "## Кубик\nВ этом уровне вы также можете сделать кубик еще раз, используя сайт `{if}`.\nДополните код примера так, чтобы в коде было написано \"You can stop throwing\", как только вы бросите земляного червя.\n\nНо, возможно, вы хотите воссоздать кубик из совершенно другой игры. Это тоже прекрасно! Тогда придумайте свою собственную реакцию. Например, \"да\" для 6 и \"жаль\" для чего-то {else}.\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            7:
                story_text: "## Кубик\nНа пятом уровне вы также можете снова сделать кубик. С помощью кода `{repeat}` вы можете легко бросить целую руку игральных костей.\nПопробуйте закончить код примера! Тире должно содержать несколько команд и символов.\n\nНо, может быть, вы хотите сделать совершенно другой кубик? Конечно, вы можете!\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, earthworm\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            10:
                story_text: "## Игральные кости\nВсе слишком долго бросают кубики? В этом уровне вы можете позволить Хеди бросить все кубики сразу!\nСможете ли вы заполнить правильную строку кода на пустых местах?\n"
                example_code: "```\nигроки = Энн, Джон, Джесси\nварианты = 1, 2, 3, 4, 5, 6\n_\n    {print} игрок ' бросает ' выбор {at} {random}\n   {sleep}\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Кубики\nВ этой игре вам нужно бросить 6 костей за как можно меньшее количество попыток.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Кубики
        description: Сделайте свои собственные кубики
        default_save_name: Кубики
    rock:
        levels:
            5:
                start_code: "{print} 'Добро пожаловать в свой собственный камень-ножницы-бумага!'"
                story_text: "## Камень, бумага, ножницы\nВ этом уровне мы можем определить, кто победил.\nДля этого вам понадобится новый код `{if}`.\n\nСохраните свой выбор с именем choice и выбор компьютера как computer choice.\nЗатем вы можете использовать `{if}`, чтобы увидеть {if}, одинаковые они или разные.\nВы закончите код?\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
            1:
                story_text: "## Камень, бумага, ножницы\nНа уровне 1 вы можете начать с игры \"Камень, ножницы, бумага\"\n\nС помощью `{ask}` вы можете сделать выбор, а с помощью `{echo}` вы можете повторить этот выбор.\n"
                example_code: "```\n{print} что вы выберете?\n{ask} выбирай из камня, бумаги или ножниц\n{echo} Так что твой выбор был:\n```\n"
                start_code: '{print} Добро пожаловать в свой собственный камень-ножницы-бумага!'
                story_text_2: "## Вызов\nВместо слов вы также можете использовать эмодзи: ✊✋✌\nМожете ли вы создать код с помощью эмодзи?\n"
                example_code_2: "```\n{print} что вы выбираете?\n{ask} выбрать из _\n{echo} Итак, твой выбор был:\n```\n"
            2:
                story_text: "## Камень, бумага, ножницы\nВ этом уровне вы можете попрактиковаться в использовании переменных, чтобы в следующем уровне вы могли провести игру \"Камень, ножницы, бумага\"!\n"
                example_code: "```\n {is} {ask} камень, бумага или ножницы?\n{print} Я выбираю _\n```\n"
                start_code: '# разместите здесь свой код'
            3:
                story_text: "## Камень, бумага, ножницы\n\nВ этом уровне мы можем вводить списки и выбирать из них предметы.\nСначала вы составляете список с помощью `{is}`. Затем вы можете позволить компьютеру выбрать что-то из списка с помощью `{at} {random}`{random}`.\nНапример, вы можете позволить компьютеру выбрать из списка \"камень, бумага и ножницы\"\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Добро пожаловать в свой собственный камень-ножницы-бумага!'
                story_text_2: "## Вызов\nТеперь у вас есть только один игрок, так можете ли вы добавить второго игрока?\nВы даже можете использовать переменные, чтобы назвать игрока 1 и игрока 2.\n"
                example_code_2: "```\nвыбор {is} камень, бумага, ножницы\n{print} игрок 1 выбирает... выбор {at} {random}\n{print} игрок 2 _\n```\n"
            4:
                story_text: "## Камень, бумага, ножницы\nНа этом уровне мы можем дальше программировать камень, бумагу, ножницы. Но {if} вы хотите добавить текст, здесь тоже нужно использовать кавычки.\nЗавершите код, введя правильные команды или символы на подчеркиваниях?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} _ The computer chose: _ _ {at} _\n```\n"
                start_code: "{print} 'Добро пожаловать в свой собственный камень-ножницы-бумага!'"
            9:
                story_text: "## Камень, бумага, ножницы\nВ этом уровне вы можете запрограммировать целую игру \"Камень, ножницы, бумага\" путем вложения {if}-команд. Сможете ли вы закончить код?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} rock\n    {if} your_choice {is} paper\n        {print} 'You win!'\n    {if} your_choice {is} scissors\n        {print} 'You lose!'\n# finish this code\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Камень, бумага, ножницы\nЛень играть в игру самому? Позвольте Хеди сыграть за вас!\nВам нужно только заполнить имена игроков.\n"
                example_code: "```\nвыбор = камень, бумага, ножницы\nигроки = _\n{for} игрок {in} игроки\n     {print} игрок ' выбирает ' выбор {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "## Камень, бумага, ножницы\nС помощью команды `{and}` вы можете сократить свой код \"Камень, ножницы, бумага\"! Посмотрите приведенный ниже пример кода и попробуйте закончить его.\n"
                example_code: "```\nварианты = 'камень', 'бумага', 'ножницы'\nyour_choice = {ask} 'Что вы выбираете?'\nкомпьютерный_выбор = варианты {at} {random}\n{print} 'Вы выбираете ' your_choice\n{print} 'Компьютер выбирает ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'галстук'\n{if} computer_choice {is} 'камень' {and} your_choice {is} 'бумага'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'Компьютер победил!'\n_\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Камень, бумага, ножницы\nИграйте, пока не победите компьютер! Но сначала закончите код примера...\n"
                example_code: "```\nпобеда = 'нет'\nварианты = 'камень', 'бумага', 'ножницы'\n{while} выиграл == 'нет'\n    your_choice = {ask} 'Что вы выбираете?'\n    компьютерный_выбор = варианты {at} {random}\n    {print} 'вы выбрали ' ваш_выбор\n    {print} 'компьютер выбрал' computer_choice\n    {if} компьютерный_выбор == ваш_выбор\n        {print} 'Ничья!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'Вы проиграли!'\n    {if} компьютерный_выбор == 'камень' {and} ваш_выбор == 'бумага'\n        {print} 'Вы выиграли!'\n        выиграл = 'да'\n_\n```\n"
                start_code: '# разместите здесь свой код'
        name: Камень, ножницы, бумага
        description: Создайте свою собственную игру "камень, ножницы, бумага"
        default_save_name: Камень
    calculator:
        levels:
            9:
                start_code: "{print} 'Добро пожаловать в этот калькулятор!'"
                story_text: "## Калькулятор\nНа предыдущих уровнях вы научились создавать калькулятор, а на этом уровне вы можете расширить этот код и превратить его в небольшую математическую игру.\n## Задача\nСможете ли вы закончить строку 10, чтобы программа заработала?\n"
                example_code: "```\nоценка = 0\n{repeat} 10 {times}\n    числа = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    число1 = числа {at} {random}\n    номер2 = числа {at} {random}\n    правильный_ответ = число1 * число2\n    {print} 'Сколько будет ' число1 ' умножить на ' число2 '?\n    ответ = {ask} 'Введите свой ответ здесь...'\n    {print} 'Your answer is' answer\n    {if} _ {is} _\n        оценка = оценка + 1\n{print} 'Отличная работа! Ваша оценка... ' оценка ' из 10!\n```\n"
            10:
                start_code: '# разместите здесь свой код'
                story_text: "## Калькулятор\nЭта игра на калькуляторе поможет вам отработать таблицы умножения!\n## Вызов\nМожете ли вы добавить больше чисел в список, чтобы отработать все умножения?\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
            6:
                story_text: "## Калькулятор\nТеперь, когда вы умеете считать, вы можете сделать калькулятор самостоятельно!\n"
                example_code: "```\nчисло_1 {is} {ask} 'Заполните первое число:'\nчисло_2 {is} {ask} 'Введите второе число:'\nправильный_ответ = число_1 * число_2\n{print} число_1 ' раз ' число_2 ' есть ' правильный_ответ\n```\n"
                story_text_2: "## Вызов\nКалькулятор выше рассчитает ответ за вас, но вы также можете составить программу для проверки собственных математических навыков, например, такую:\nЗаполните пробелы, чтобы ответ был полным!\n"
                example_code_2: "```\nправильный_ответ = 11 * 27\nответ = {ask} 'Сколько будет 11 умножить на 27?\n{if} ответ {is} _ {print} 'Хорошая работа!'\n{else} {print} 'Неправильно! Это было ' _\n```\n"
                start_code: "{print} 'Добро пожаловать в этот калькулятор!'"
                story_text_3: "## Случайные числа\nВы также можете позволить компьютеру самостоятельно выполнять случайные суммы, используя функцию random.\nТаким образом, вы выбираете несколько таблиц для тренировки, и из них всегда получается разная сумма:\n"
                example_code_3: "```\nтаблицы = 4, 5, 6, 8\nчисла = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nтаблица = таблицы {at} {random}\nчисло = числа {at} {random}\nправильный_ответ = таблица * число\nответ = {ask} 'сколько будет ' таблица ' умножить на ' число '?\n{if} ответ {is} правильный_ответ {print} 'хорошо'\n{else} {print} 'ошибка! это было ' правильный_ответ\n```\n"
            12:
                story_text: "## Калькулятор\nТеперь вы можете сделать калькулятор, который работает для десятичных чисел. Заполните пробелы, чтобы он работал правильно!\n"
                example_code: "```\nnumber1 = {ask} 'Какое первое число?'\nnumber2 = {ask} 'Какое второе число?'\nответ = _\n{print} число1 ' плюс ' число2 ' есть ' ответ\n```\n"
                start_code: '# разместите здесь свой код'
            14:
                story_text: "## Угадай, какое число\nНа этом уровне вы можете запрограммировать игру \"Угадай число\"\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Калькулятор\nВы можете добавить цикл `{while}` в игру-калькулятор, которую вы научились делать в предыдущем уровне.\nЭто гарантирует, что игрок не сможет перейти к следующему вопросу {if} при неправильном ответе.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Калькулятор
        description: Создайте калькулятор
        default_save_name: Калькулятор
    restaurant:
        levels:
            6:
                start_code: '# разместите здесь свой код'
                story_text: "## Ресторан\nВ этом уровне вы можете использовать математику для подсчета общей стоимости заказа клиента, что может сделать ваш виртуальный ресторан более реалистичным.\n"
                example_code: "\nВы можете сделать простой код ресторана, например, такой:\n```\n{print} 'Добро пожаловать в ресторан Hedys'\n{print} 'Вот наше меню:'\n{print} 'Наши основные блюда - пицца, лазанья или спагетти'\nблюдо = {ask} 'Какое основное блюдо вы бы хотели?'\nцена = 0\n{if} основное {is} пицца цена = 10\n{if} основное {is} лазанья цена = 12\n{if} главная {is} спагетти цена = 8\n{print} 'Вы заказали ' блюдо\n{print} 'Это будет стоить ' цена ' долларов, пожалуйста'\n{print} 'Спасибо, приятного аппетита!'\n```\n"
                story_text_2: "Но вы также можете добавить много других вещей в свой виртуальный ресторан, например, дополнительные блюда.\n\n## Вызов\nВы можете добавить много других вещей в свой виртуальный ресторан. Например, вы можете...\n- {ask} сколько человек придет и умножить цену на это количество?\n- добавить еще одно блюдо?\n- дать людям скидку, если они введут (секретный) код купона?\n- добавить детское меню?\n- придумать другие интересные вещи, которые можно добавить?\n"
                example_code_2: "\nВ данном примере есть три блюда, что требует больше кода и больше дополнений при расчете цены.\n```\n{print} 'Добро пожаловать в ресторан Hedys'\n{print} 'Вот наше меню:'\n{print} 'Наши закуски - салат, суп или карпаччо'\n{print} 'Наши основные блюда: пицца, лазанья или спагетти'\n{print} 'Наши десерты: брауни, мороженое или молочный коктейль'\nstarter = {ask} 'Какое блюдо вы хотели бы заказать?'\nmain = {ask} 'Какое основное блюдо вы бы хотели?'\nдесерт = {ask} 'Какой десерт вы выберете?'\nцена = 0\n{if} стартер {is} суп цена = цена + 6 {else} цена = цена + 7\n{if} основное {is} пицца цена = цена + 10\n{if} основной {is} лазанья цена = цена + 12\n{if} основной {is} спагетти цена = цена + 8\n{if} десерт {is} пирожное цена = цена + 7\n{if} десерт {is} мороженое цена = цена + 5\n{if} десерт {is} молочный коктейль цена = цена + 4\n{print} 'Вы заказали \"стартер\", \"мэйн\" и \"десерт\"\n{print} 'Это будет стоить ' цена ' долларов, пожалуйста'\n{print} 'Спасибо, приятного аппетита!'\n```\n"
            12:
                start_code: '# разместите здесь свой код'
                story_text: "## Ресторан\nНачиная с этого уровня вы можете использовать десятичные числа, чтобы сделать ваше меню более реалистичным.\n\n## Челлендж\nМожете ли вы придумать код для предоставления 15% скидки своим друзьям и родственникам?\n"
                example_code: "```\nprice = 0\nеда = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} еда {is} 'hamburger'\n    price = price + 6.50\n{if} еда {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
            1:
                story_text: "## Ресторан\n На первом уровне вы сможете создать свой собственный виртуальный ресторан и принимать заказы своих гостей.\n"
                example_code: "```\n{print} Добро пожаловать в ресторан Хеди \U0001F35F\n{ask} Что бы вы хотели заказать?\n{echo} Итак, вы хотели бы заказать\n{print} Спасибо за ваш заказ!\n{print} Он уже в пути!\n```\n"
                story_text_2: "## Вызов\nМожете ли вы придумать больше строк, которые можно добавить в код ресторана? Например, вы можете {ask} гостям, что они хотели бы выпить, сообщить им цену или пожелать приятного аппетита?\n"
                start_code: '# разместите здесь свой код'
            2:
                story_text: "## Ресторан\nНа уровне 2 вы можете расширить свой ресторан, используя переменные. В первом уровне Хеди могла сделать заказ только один раз {echo} и запомнить только то, что было заказано последним.\nТеперь вы можете использовать переменные, и Хеди сможет запомнить и блюда, и начинку!\n"
                example_code: "```\n{print} Добро пожаловать в ресторан Хеди!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с топпингом уже в пути!\n```\n"
                start_code: '# разместите здесь свой код'
                story_text_2: "## Вызов\nМожете ли вы сделать этот код более сложным? Например, добавить к заказу напитки? Или...?\n"
                example_code_2: "```\n{print} Добро пожаловать в ресторан Хеди!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с топпингом уже в пути!\nнапитки {is} _\n```\n"
            3:
                story_text: "## Случайный ресторан\nНе можете решить, что хотите съесть на ужин? Вы можете позволить Хеди выбрать за вас!\nПросто добавьте списки ваших любимых (или нелюбимых) блюд, и Хеди сможет случайным образом выбрать ваш ужин.\nВы также можете немного повеселиться, позволив Хеди выбрать цену вашего ужина! Что вы получите?\n## Вызов\nСможете ли вы создать свою собственную версию случайного ресторана?\n"
                example_code: "```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "## Аллергия\nУ вашего клиента есть аллергия или ему не нравятся определенные блюда? Тогда вы можете воспользоваться командой `{remove}`, чтобы удалить его из своего меню.\n"
                example_code_2: "```\n{print} Молочный коктейль \"Тайна\nвкусы {is} клубника, шоколад, ваниль\nаллергия {is} {ask} Есть ли у вас аллергия на какие-либо фалворы?\n_\n{print} Вы получаете молочный коктейль со вкусом {at} {random}.\n```\n"
                start_code: '# разместите здесь свой код'
            4:
                story_text: "## Ресторан\nНа этом уровне вы должны использовать кавычки при использовании команды `{print}` или `{ask}`.\n\n## Задача\nДобавьте кавычки в этот код, чтобы он заработал! Будьте внимательны: переменные не должны заключаться в кавычки.\n"
                example_code: "## Пример ресторана Hedy\n```\nДобавьте кавычки к этому коду _\n{print} Добро пожаловать в ресторан Hedys!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с начинкой уже в пути!\nнапитки {is} {ask} Что бы вы хотели выпить с этим?\n{print} Спасибо за ваш заказ.\n{print} Ваша еда и напитки будут доставлены прямо сейчас!\n```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "## Ресторан\nНа этом уровне команда `{if}` позволяет вам `{ask}` задавать вопросы клиентам и давать различные ответы на них.\nВ приведенном ниже примере видно, что вы можете `{ask}` клиенту `{if}`, что он хочет услышать о специальных блюдах, а Хеди может ответить соответствующим образом.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nеда {is} {ask} 'What would you like to eat?'\n{print} 'One ' еда ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' еда\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n"
                story_text_2: "## Задача\nМожете ли вы придумать больше вопросов для `{ask}` клиентов, когда они делают заказ, и придумать различные ответы на них, используя команду `{if}`?\n"
                start_code: '# разместите здесь свой код'
            7:
                story_text: "## Ресторан\nНа этом уровне вы узнали, как использовать команду `{repeat}` для повторения строки кода определенное количество раз.\nВы можете использовать это в своем ресторане, чтобы `{ask}` нескольким людям о том, что они хотели бы съесть.\n\n## Задача\nМожете ли вы заполнить пробелы? Хеди нужно повторить этот вопрос столько раз, сколько людей. Так, если есть 5 человек, то вопрос нужно задать 5 раз.\n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Hedys!'\nлюди = {ask} 'Сколько человек присоединилось к нам сегодня?'\n{repeat} _ {times} еда = {ask} 'Что бы вы хотели съесть?'\n{print} 'Спасибо за ваш заказ! Его сейчас принесут!\n```\n"
                start_code: '# разместите здесь свой код'
            8:
                story_text: "## Ресторан\nНа этом уровне вы можете сделать свой виртуальный ресторан более сложным, повторяя несколько строк кода. Например:\n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Hedys!'\nлюди = {ask} 'Сколько человек присоединится к нам сегодня?'\n{print} 'Отлично!'\n{repeat} люди {times}\n    еда = {ask} 'Что бы вы хотели заказать?'\n    {print} еда\n{print} 'Спасибо за заказ!'\n{print} 'Приятного аппетита!'\n```\n"
                story_text_2: "## Вызов\nКонечно, этот код можно расширить, добавив больше позиций в меню, предложив напитки и/или несколько блюд, поэтому не стесняйтесь добавлять столько вариантов, сколько вам нравится!\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "## Ресторан\nВ этом уровне вы можете использовать вложенность, чтобы сделать ваш ресторан более реалистичным и веселым!\nНапример, вы попросите соус, если кто-то заказывает картофель фри, но не попросите, если кто-то заказывает пиццу!\n\n## Вызов\nЭто испытание для настоящих мозговиков! Каждая строка, которая нуждается в отступах, имеет пробел.\nСможете ли вы определить, сколько отступов нужно в каждой строке, чтобы код работал нормально?\nУдачи!\nСОВЕТ: Если клиент заказывает пиццу, Хеди не должна спрашивать, какой соус он хочет.\n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Hedys!'\nюди = {ask} 'Сколько человек присоединится к нам сегодня?'\n{print} 'Отлично!'\nцена = 0\n{repeat} люди {times}\n_ еда = {ask} 'Что бы вы хотели заказать?'\n_ {print} еда\n_ {if} еда {is} картофель фри\n_ цена = цена + 3\n_ соус = {ask} 'Какой соус вы хотели бы получить к картофелю фри?'\n_ {if} соус {is} нет\n_ {print} 'без соуса'\n_ {else}\n_ цена = цена + 1\n_ {print} 'с соусом'\n_ {if} еда {is} пицца\n_ цена = цена + 4\n{print} 'Это будет стоить ' цена ' доллар'\n{print} 'Приятного аппетита!'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Ресторан\nНа этом уровне вы узнаете, как легко {ask} заказы ваших гостей в виде короткого кода.\n"
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    еда = {ask} 'What would you like to eat as your ' course '?'\n    {print} еда ' will be your ' course\n```\n"
                story_text_2: "## Вызов\nКонечно, вы также можете сделать заказ для нескольких человек!\nМожете ли вы добавить нужное количество отступов перед каждой строкой, чтобы код работал правильно?\nСОВЕТ: некоторые строки вообще не нуждаются в отступах.\n"
                example_code_2: "```\n_ блюда = закуска, основное блюдо, десерт\n_ имена = Тимон, Онно\n_ {for} имя {in} имена\n_ {for} курс {in} курсы\n_ еда = {ask} имя ', что бы вы хотели съесть в качестве своего ''блюда''?\n_ {print} имя ' заказывает ' еду ' в качестве своего ' блюда\n```\n"
                start_code: блюда = закуска, основное блюдо, десерт
            11:
                story_text: "## Ресторан\nМы можем использовать `{for} i {in} {range} 1 {to} 5`{in}, чтобы `{print}` заказы от нескольких клиентов в упорядоченном порядке.\n\n## Вызов\nСможете ли вы справиться с еще одной задачей, связанной с отступами? Заставьте код работать правильно, добавив нужное количество отступов перед каждой строкой!\n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Hedy!'\nлюди = {ask} 'На сколько человек вы хотите сделать заказ?'\n{for} i {in} {range} 1 {to} люди\n_ {print} 'Номер заказа' i\n_ еда = {ask} 'Что бы вы хотели съесть?'\n_ {print} еда\n_ {if} еда {is} картофель фри\n_ соус = {ask} 'Какой соус вы бы хотели к этому?'\n_ {print} соус\n_ напитки = {ask} 'Что бы вы хотели выпить?'\n_ {print} напитки\nцена = 4 * человек\n{print} 'Это будет ' цена ' долларов, пожалуйста!'\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "## Ресторан\nВ этом уровне мы можем использовать новые команды для модернизации нашего ресторана.\nМы используем `{and}`, чтобы убедиться, что {if} оба варианта верны.\n"
                example_code: "```\nprice = 10\nеда = {ask} 'What would you like to eat?'\ndrink = {ask} 'What would you like to drink?'\n{if} еда {is} 'sandwich' {and} drink {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                story_text_2: "Мы используем `{or}`, чтобы проверить, так ли это в одном из двух случаев.\n"
                example_code_2: "```\ndrink = {ask} 'What would you like to drink?'\n{if} drink {is} 'water' {or} drink {is} 'juice'\n    {print} 'Thats a healthy choice'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Ресторан\nС помощью `{while}` вы можете убедиться, что ваши клиенты могут продолжать добавлять заказы, пока они не будут выполнены.\n"
                example_code: "```\n{print} 'Добро пожаловать в МакХеди'\nmore = 'yes'\n{while} more == 'yes'\n    заказать = {ask} 'Что бы вы хотели заказать?'\n    {print} заказать\n    more = {ask} 'Вы хотите заказать что-нибудь еще?'\n{print} 'Спасибо!'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Ресторан
        description: Создайте свой собственный виртуальный ресторан
        default_save_name: Ресторан
    secret:
        levels:
            12:
                start_code: '## разместите здесь свой код'
                story_text: "## Создайте секретный код, как супершпион\nВ этом приключении вы сможете создать свой собственный супершпионский код. Зашифруйте сообщение, которое сможет расшифровать только правильный агент.\nЕсли враг попытается взломать код, он получит ложную информацию, чтобы потратить свое время.\n\n## Вызов\nПридумайте свой собственный секретный код для супершпиона. Сможете ли вы сделать его состоящим из еще большего количества переменных?\n"
                example_code: "```\nname {is} {ask} 'Как вас зовут?'\nif name {is} 'Agent007'\n    a {is} 'Поехать в аэропорт'\n{else}\n    a {is} 'Поехать на вокзал'\nпароль {is} {ask} 'Какой пароль?'\n{if} пароль {is} 'TOPSECRET'\n    b {is} 'завтра в 02.00'\n{else}\n    b {is} 'сегодня в 10.00'\n{print} a + b\n```\n"
            13:
                start_code: '## поместите свой код здесь'
                story_text: "## Супершпион\nМожете ли вы заполнить правильную команду на бланке? Разум: Супершпион должен правильно ответить на ОБА вопроса, прежде чем он получит конфиденциальную информацию!\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\nпароль {is} {ask} 'Какой у вас пароль?'\n{if} имя {is} 'Agent007' _ пароль {is} 'TOPSECRET'\n    {print} 'Поехать в аэропорт в 02.00'\n{else}\n    {print} 'Отправиться на вокзал в 10.00'\n ```\n"
        name: СуперШпион
        description: Сделайте свой собственный шпионский код
        default_save_name: СуперШпион
    songs:
        name: Спойте песню!
        description: Печать песни
        default_save_name: Песня
        levels:
            6:
                story_text: "## Песни\nПесни часто содержат много повторений. Иногда повторение также основано на счете.\nНапример, в известной песне \"Бутылки пива\". Вы можете запрограммировать эту песню с помощью математики.\n\nСовет: Используйте функцию чтения вслух, чтобы Хеди спела вам песню!\n\n## Вызов\nТеперь вы можете повторять строки со 2 по 7 столько раз, сколько захотите, копируя их.\n"
                example_code: "```\nстих = 99\n{print} стих ' бутылки пива на стене '\n{print} стих ' бутылки пива'\n{print} 'Возьми одну, передай по кругу'\nстих = стих - 1\n{print} стих ' бутылки пива на стене'\n{sleep}\n```\n"
                start_code: "{print} 'Давай петь!'"
                story_text_2: "## 5 маленьких обезьянок прыгают на кровати\nЭта детская песенка отсчитывает время от 5 маленьких обезьянок до 1 обезьянки.\nЕсли вы скопируете строки 2 - 7 и вставите их под кодом, вы сможете спеть всю песню!\n"
                example_code_2: "```\nчисло = 6\nчисло = число - 1\nprint number ' Маленькие обезьянки прыгают по кровати'\nprint 'Один упал и ударился головой'\nprint 'Мама позвонила доктору, и доктор сказал'\nprint 'Больше никаких обезьян, прыгающих на кровати!\nsleep\n```\n"
            7:
                story_text: "## Песни\nПесни часто содержат много повторений. Например... Детеныш акулы! Если вы поете ее, вы продолжаете петь одно и то же:\n\nBaby Shark tututudutudu <br>\nBaby Shark tutututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark\n\nВы можете сделать эту песню намного короче с помощью `{repeat}`! Вы можете закончить код?\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n\nAfter Baby Shark you can of course also program other songs. There are many songs with repetition.\n"
                start_code: "{print} 'Малыш акула'"
            8:
                story_text: "## Песни\nВ предыдущем уровне вы запрограммировали песню \"Бутылки пива\". Вы сочинили один куплет, а затем должны были скопировать его 99 раз. В этом уровне вы можете повторить песню 99 раз, просто добавив одну простую строчку!\nЗнаете ли вы, какую строку кода нужно добавить на пустом месте?\n"
                example_code: "```\nстих = 99\n_ _ _\n    {print} стих 'бутылки пива на стене'\n    {print} стих ' бутылки пива'\n    {print} 'Возьми одну, передай по кругу'\n    стих = стих - 1\n    {print} стих ' бутылки пива на стене'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Песни\nНа этом уровне вы легко сможете исполнить детскую песенку \"Пять маленьких обезьянок\". Сможете ли вы сделать последний припев?\nВы также можете сделать всю песню про акулу (включая всех остальных акул в семье) всего за 6 строк, используя `{for}`!\nИли вы можете сделать песню Old McDonald со всеми различными животными.\n\n\n\n## Задачи\nМожете ли вы добавить последний куплет про обезьянок на кровати, когда осталась только одна обезьянка?\n\nМожете ли вы сделать код акулы-малютки еще короче, используя команду `{repeat}`?\n\nМожете ли вы добавить новых животных на ферму старого Макдональда?\n"
                example_code: "## 5 маленьких обезьянок, прыгающих на кровати\n```\nобезьянки = 5, 4, 3, 2\n{for} обезьяна {in} обезьянки\n    {print} обезьяна ' маленькие обезьянки прыгают на кровати'\n    {print} 'Один упал и ударился головой'\n    {print} 'Мама позвонила доктору, и доктор сказал'\n    {print} 'БОЛЬШЕ НИКАКИХ ОБЕЗЬЯНОК, ПРЫГАЮЩИХ НА КРОВАТИ!'\n```\n\n## Малышка Акула\n```\nакулы = ребенок, мама, папа, бабушка, дедушка\n{for} акула {in} акулы\n    {print} акула ' акула тутутутутуду'\n    {print} акула ' акула тутутутутутуду'\n    {print} акула ' акула тутутутутуду'\n    {print} акула ' акула '\n```\n## Старый Макдональд\n```\nживотные = свинья, собака, корова\n{for} животное {in} животные\n    {if} животное {is} свинья\n        звук = ойк\n    {if} животное {is} собака\n        звук = гав\n    {if} животное {is} корова\n        звук = му\n    {print} 'У старого Макдональда была ферма'\n    {print} 'E I E E I O!'\n    {print} 'и на этой ферме у него было ' животное\n    {print} 'E I E I O!'\n    {print} 'со звуком ' звук\n    {print} 'и ' звук ' там'\n    {print} 'здесь ' звук\n    {print} 'там ' звук\n    {print} 'везде ' звук звук звук\n```\n"
                start_code: '# разместите здесь свой код'
            11:
                story_text: "## Песни\nНа этом уровне вы можете использовать команду `{for} i {in} {range}`{in} {range}` для создания песен, в которых используется счет, например, 5 маленьких обезьянок.\n\n## Задача\nЗаполните пробелы и заставьте код работать!\n"
                example_code: "## 5 маленьких обезьянок\n```\n_ _ _ _ 5 _ 1\n    {print} i ' маленькие обезьянки прыгают по кровати'\n    {print} 'Одна упала и ударилась головой'\n    {print} 'Мама позвонила доктору, и доктор сказал'\n    {if} i {is} 1\n        {print} 'УЛОЖИТЕ ЭТИХ ОБЕЗЬЯНОК СПАТЬ!'\n    {else}\n        {print} \"БОЛЬШЕ НИКАКИХ ОБЕЗЬЯНОК, ПРЫГАЮЩИХ НА КРОВАТИ!\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "## Спойте песню!\nВ этой песне мы можем еще проще запрограммировать \"если ты счастлив и знаешь это, хлопай в ладоши\". Поскольку мы можем поместить все действия в переменную, проверьте это:\n\n## Задание\nМожете ли вы добавить нужное количество отступов к каждой строке, чтобы песня играла правильно?\nРазум: Не все строки нуждаются в отступах\n"
                example_code: "```\n_ действия = 'хлопать в ладоши', 'топать ногами', 'кричать Ура!'\n_ {for} действие {in} действия\n_ {for} i {in} {range} 1 {to} 2\n_ {print} 'if youre happy and you know it'\n_ {print} действие\n_ {print} 'если вы счастливы и знаете это, и вам очень хочется это показать'\n_ {print} 'if youre happy and you know it'\n_ {print} действие\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "## Спойте песню!\nНа этом уровне вы сможете еще быстрее запрограммировать песню типа OldMacDonald. Вы можете соединить нужное животное с нужным звуком, просто поместив их в одно и то же место в списке.\nПьяный моряк также быстро создается в этом уровне. Вам понадобится всего 8 строк для всей песни, посмотрите!\n"
                example_code: |
                    ## Старый Макдональд
                    ```
                    животные = ['свинья', 'собака', 'корова']
                    звуки = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        здесь = животные[i]
                        звук = звуки[i]
                        {print} 'У старого Макдональда была ферма'
                        {print} 'E I E E I O!'
                        {print} 'и на этой ферме у него было животное'
                        {print} 'E I E I O!'
                        {print} 'со звуком ' здесь
                        {print} 'и ' звук ' там'
                        {print} 'здесь ' звук
                        {print} 'там ' звук
                        {print} 'везде ' звук звук звук
                    ```

                    ## Пьяный моряк\n```\nстроки = ['что делать с пьяным матросом', 'брить ему брюхо ржавой бритвой', 'посадить его в длинную лодку, пока не протрезвеет']\n{for} строка {in} строки\n    {for} i {in} {range} 1 {to} 3\n        {print} строка\n    {print} 'рано утром'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# разместите здесь свой код'
    turtle:
        name: Черепаха
        description: Создайте свой собственный рисунок
        default_save_name: Черепаха
        levels:
            1:
                story_text: "## Давайте рисовать\nВы также можете использовать Хеди для рисования. Комбинируя повороты и линии, вы можете сделать квадрат или лестницу!\n\nИспользуя `{forward}`, нарисуйте линию вперед. Число за ней определяет, как далеко пройдет черепаха. `{turn} {right}` поворачивается на четверть оборота по часовой стрелке, `{turn} {left}` поворачивается против часовой стрелки.\n\nЕсли вы хотите пройти назад, вы используете команду `{forward}`, но с отрицательным числом. Например, `{forward} -100`\n\n## Challenge\nЭто начало маленькой лестницы. Можете ли вы сделать так, чтобы у нее было 5 ступенек?\n"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "## Черепаха\nВ этом уровне вы можете использовать переменные, чтобы сделать черепаху интерактивной. Например, вы можете спросить игрока, сколько шагов должна сделать черепаха.\n"
                example_code: "```\nответ {is} {ask} Сколько шагов должна сделать черепаха?\n{forward} ответ\n```\n"
                start_code: "{print} Черепашьи бега!\nугол {is} 90\n{turn} угол\n{forward} 25"
                story_text_2: "Кроме того, на первом уровне черепаха могла поворачивать только влево или вправо. Это немного скучно!\nНа втором уровне он может направлять свой нос во все стороны.\n\nИспользуйте 90 для поворота на четверть. Мы называем это градусами. Полный поворот - это 360 градусов.\n\n## Вызов\nМожете ли вы построить фигуру с помощью этого кода? Может быть, треугольник или круг?\n"
                example_code_2: "```\n{print} Чертежные фигуры\nугол {is} 90\n{turn} угол\n{forward} 25\n{turn} угол\n{forward} 25\n```\n"
            3:
                story_text: "## Рисующая черепаха\nВ этом уровне вы можете использовать `{at} {random}`{random}` с рисующей черепахой. Случайный выбор заставляет черепаху каждый раз идти по разному пути.\nИспользуйте `{at} {random}`{random}` для выбора значения из списка.\n## Задача\nМожете ли вы скопировать и вставить строки 2 и 3, чтобы создать более длинный случайный путь?\n"
                example_code: "```\nangles {is} 10, 50, 90, 150, 250\n{turn} angles {at} {random}\n{forward} 25\n```\n"
                start_code: "углы {is} 10, 50, 90, 150, 250\n{turn} углы {at} {random}\n{forward} 25"
            4:
                story_text: "## Давайте нарисуем\nВ четвертом уровне вы должны использовать кавычки с `{print}` и `{ask}`. Также при рисовании!\n"
                example_code: "```\n{print} _ Чертежные фигуры _\nугол {is} 90\n{turn} угол\n{forward} 25\n{turn} угол\n{forward} 25\n```\n"
                start_code: "{print} 'Рисование фигур'\nугол {is} 90\n{turn} угол\n{forward} 25"
                story_text_2: "## Цвета\nВы также можете изменить цвет линий с помощью команды `{color}`. Посмотрите пример.\nВы также можете использовать команду `{color} {white}`{white}`, чтобы сделать \"невидимые\" линии. Вы можете использовать эти белые линии для перемещения черепашки в любую точку экрана перед началом рисования.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "## Давайте рисовать\nНа уровне 5 вы можете сделать выбор с помощью `{if}`. Например, между разными типами фигур.\n"
                example_code: "```\n{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120\n{else} angle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} 'Рисуем фигуры'\nрисунок {is} {ask} 'Вам нужен квадрат или треугольник?'\n{if} рисунок {is} угол треугольника {is} 120 {else} угол {is} 90\n{turn} угол\n{forward} 25"
            6:
                story_text: "## Давайте рисовать\nНа этом уровне вы можете использовать вычисления для рисования различных фигур.\nВозможно, в школе вы узнали, что полный круг - это 360 градусов. Если нет, то теперь вы знаете!\nВот почему вы также используете 90 градусов для квадрата. 360 разделить на 4 - это 90.\nТеперь, когда мы можем заниматься математикой вместе с Хеди, мы можем рисовать любые фигуры, какие захотим!\n"
                example_code: "```\nangles = {ask} 'How many angles do you want?'\nangle = 360 / angles\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n```\n"
                start_code: "{print} 'Рисование фигур'"
            7:
                story_text: "## Давайте рисовать\nВ этом уровне вы можете повторить одну строку кода с `{repeat}`.\n"
                example_code: "```\n{print} 'Рисуйте фигуры'\n_ 3 _ {forward} 10\n```\n"
                start_code: "{print} 'Рисовать фигуры'\n{repeat} 3 {times} {forward} 10"
            8:
                story_text: "## Давайте рисовать\nТеперь, когда мы можем повторять несколько линий, нам легче строить фигуры.\nНам нужно только один раз задать угол, а затем использовать эту переменную в `{repeat}`.\n"
                example_code: "```\nangle = 90\n{repeat} 10 {times}\n    {turn} angle\n    {forward} 50\n```\n"
                story_text_2: "## Взаимодействие\nКроме того, теперь мы можем усовершенствовать программу, которая рисует различные фигуры.\nМожете ли вы определить, насколько черепаха должна повернуться здесь? Доработайте код, и вы сможете нарисовать любой многоугольник, какой захотите!\n"
                example_code_2: "```\nangles = {ask} 'How many angles should I draw?'\nangle = 360 / angles\n{repeat} angle {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "angles = {ask} 'Сколько углов я должен нарисовать?'"
    fortune:
        name: Предсказатель
        description: Позвольте Хеди предсказать будущее
        default_save_name: Гадалка
        levels:
            1:
                story_text: "## Гадалка\nБывали ли вы когда-нибудь на карнавале, где гадалка предсказывала ваше будущее? Или вы когда-нибудь играли с волшебным восьмеркой?\nТогда вы наверняка знаете, что на самом деле они не могут предсказать ваше будущее, но играть все равно интересно!\n\nВ следующих уровнях вы сможете узнать, как создать свою собственную гадальную машину!\nНа первом уровне вы можете начать с самого простого: пусть Хеди представится гадалкой и позволит ей {echo} ответы игроков.\nНапример:\n"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n"
                story_text_2: "## Вызов\nСейчас Хеди говорит вам только ваше имя. Можете ли вы расширить код, чтобы Хеди могла предсказывать больше вещей о вас?\nОчевидно, что Хеди еще не очень хорошая гадалка, так как она может только повторять ответы, которые были даны игроками!\nЗагляните на уровень 2, чтобы улучшить свою гадалку.\n"
                start_code: '# разместите здесь свой код'
            3:
                story_text: "## Гадалка\nВ предыдущих уровнях вы создали свою первую машину для гадания, но Хеди не могла ничего предсказать, только {echo}.\nВ этом уровне вы можете использовать переменную и команду `{at} {random}`{random}`, чтобы позволить Хеди действительно выбрать ответ за вас. Посмотрите, например, этот код:\n"
                example_code: "\nIn this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                story_text_2: "## Вызов\nСейчас Хеди может ответить только \"да\", \"нет\" или \"может быть\". Можете ли вы дать Хеди больше вариантов ответа, например, \"определенно\" или \"переспросить\"\n"
                start_code: '# разместите здесь свой код'
            4:
                story_text: "## Гадалка\nЭтот уровень не содержит новых функций, но позволяет потренироваться в использовании кавычек.\nВы можете переделать свой код уровня 3, и убедитесь, что добавили кавычки в нужных местах!\n\nОбратите внимание, что в уровне 3 мы не могли использовать слово \"вопрос\" и как имя переменной, и как обычное слово, которое можно напечатать.\nКавычки в уровне 3 делают это возможным!\n\nВажно! Имейте в виду, что теперь, когда мы используем кавычки, Хеди будет путаться, когда вы будете использовать апостроф для сокращений типа I'm или What's.\nОбязательно уберите эти апострофы и измените написание на Im или Whats.\n\n## Вызов\nМы убрали все кавычки из этого примера кода, можете ли вы добавить их во всех нужных местах?\n"
                example_code: "```\nДобавьте кавычки к этому коду _\n{print} Я Хеди - гадалка!\nвопрос {is} {ask} Что вы хотите узнать?\n{print} Это ваш вопрос: вопрос\nответы {is} да, нет, может быть\n{print} Мой хрустальный шар говорит...\n{sleep} 2\n{print} ответы {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other люди might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Я Хеди - предсказательница!'\n{print} 'Я могу предсказать, выиграете ли вы завтра в лотерею!'\nчеловек {is} {ask} 'Кто вы?'\n{if} человек {is} Хеди {print} 'Вы обязательно выиграете! \U0001F929' {else} {print} 'Не повезло! Выиграет кто-то другой! \U0001F62D'\n```\n"
                story_text_2: "## Взломать программу\nЗамените Hedy на свое имя в последней строке, и Hedy всегда будет предсказывать, что вы выиграете в лотерею, а другие - нет!\nКонечно, это может вызвать некоторые подозрения у других игроков... Чтобы избежать этого, вы можете сделать так, чтобы Хеди давала разные ответы каждый раз, когда вы запускаете код.\nНо, конечно, при этом она по-прежнему будет давать вам положительный ответ, а другим игрокам - отрицательный.\n"
                example_code_2: "```\n{print} 'Я Хеди - предсказательница!'\n{print} 'Я могу предсказать, выиграете ли вы завтра в лотерею!'\nчеловек {is} {ask} 'Кто вы?'\ngoodanswer {is} Ура! Вы выиграли!, Вы обязательно выиграете!, У нас есть победитель!\nbadanswer {is} Не повезло! Попробуйте еще раз!, Выиграет другой человек, а вы проиграете!\n{if} человек {is} Хеди {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n"
                story_text_3: "## Вызовы\nЭта концепция может быть использована для создания самых разных программ, просто будьте изобретательны! Например, вы можете создать машину, которая предскажет, что ваша любимая спортивная команда победит всех соперников!\nИли вы можете сделать волшебное зеркало Белоснежки на стене, чтобы сказать всем, что вы самая прекрасная из всех!\nДайте волю своему воображению!\n"
                start_code: '# разместите здесь свой код'
            6:
                story_text: "## Гадалка\nНа этом уровне вы можете использовать математику в своих предсказаниях в качестве гадалки. Это позволяет вам придумывать (глупые) формулы для расчета будущего.\nНапример, вы можете рассчитать, насколько богатым вы станете или сколько детей у вас будет, когда вы вырастете.\n\n\n\n## Вызов\nМожете ли вы придумать свою собственную (глупую) машину для гадания?\n"
                example_code: "```\n{print} 'Я могу предсказать, сколько детей у тебя будет, когда ты вырастешь!'\nвозраст = {ask} 'Сколько вам лет?'\nбратья_и_сестры = {ask} \"Сколько у вас братьев и сестер?\"\nдлина = {ask} 'Какой у вас рост в сантиметрах?'\nдети = длина / возраст\nдети = дети - братья_и_сестры\n{print} 'У тебя будет ...'\n{sleep}\n{print} 'дети  дети!'\n```\n\n## Пример глупой гадалки\nЕсли предыдущий пример не показался вам достаточно глупым, посмотрите на этот!\n```\n{print} 'Я Хеди - глупая гадалка!'\n{print} 'Я предскажу, насколько вы умны!'\nфутбол = {ask} 'По шкале 1-10 насколько сильно вы любите футбол?'\nбананы = {ask} 'Сколько бананов вы съели на этой неделе?'\nгигиена = {ask} 'Сколько раз вы сегодня мыли руки?'\nрезультат = бананы + гигиена\nрезультат = результат * футбол\n{print} 'Ты ' результат ' процент умных'\n```\n"
                start_code: '# разместите здес"Я Хеди - предсказательница!ь свой код'
            7:
                story_text: "## Гадалка\nНа этом уровне вы можете использовать команду `{repeat}`, чтобы заставить машину предсказывать несколько предсказаний одновременно.\n"
                example_code: "```\n{print} 'Я Хеди - предсказательница!'\n{print} 'Вы можете задать 3 вопроса!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nответ = да, нет, может быть\n{repeat} 3 {times} {print} 'Мой хрустальный шар говорит...' ответ {at} {random}\n```\n"
                story_text_2: "## Вызов\nКак вы можете видеть, в этом примере вопросы не печатаются. Это потому, что переменная `question` была изменена 3 раза.\nКаждый раз, когда игрок вводит новый ответ, Hedy перезаписывает предыдущий, поэтому первый ответ игрока забывается.\nЭто означает, что вы не можете напечатать все вопросы таким образом.\n\nИспользуя 3 различные переменные вместо одной (например, `question_1`, `question_2` и `question_3`), вы сможете решить проблему и распечатать все вопросы.\nЭто означает, что для ответов можно использовать только `{repeat}`, а все вопросы придется задавать и печатать отдельно.\nСможете ли вы это сделать?\n\nВ последующих уровнях изменится расположение команды `{repeat}`, что позволит вам повторять несколько строк одновременно.\n"
                start_code: '# разместите здесь свой код'
            8:
                story_text: "## Гадалка\nВ предыдущих уровнях вы узнали, как с помощью команды `{repeat}` заставить гадалку ответить на 3 вопроса подряд, но у нас возникла проблема с печатью вопросов.\nТеперь эта проблема решена благодаря новому способу использования команды `{repeat}`.\nВ следующем примере вы можете заставить гадалку задать 3 вопроса, а также распечатать их!\n\n## Задача\nСможете ли вы правильно заполнить команду `{repeat}` на пустых местах?\n"
                example_code: "```\n{print} 'Я Хеди - предсказательница!'\n{print} 'Вы можете задать мне 3 вопроса'.\nответы = да, нет, возможно\n_ _ _\n   вопрос = {ask} 'Что вы хотите узнать?'\n   {print} вопрос\n   {sleep}\n   {print} 'Мой хрустальный шар говорит...' ответы {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Гадалка\nВ этом уровне вы узнаете, как программировать игру MASH (mansion, apartement, shack, house). В этой игре вы можете предсказать всем игрокам сразу, каким будет их будущее.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: "## Вызов\nМы также можем сделать гадалку на тему Гарри Поттера. Заполните правильную строку кода в строке 5 и добавьте правильный отступ в строки 6 - 8, и эта программа будет действовать как сортировочная шляпа!\n"
                example_code_2: "```\nдома = Гриффиндор, Слизерин, Хаффлпафф, Рейвенкло\nпредметы = зелья, защита от темных искусств, чары, трансфигурация\nстрахи = Волдеморт, пауки, провалить тест OWL\nимена = Гарри, Рон, Гермиона\n_\n_ {print} имя ' помещено в ' дома {at} {random}\n_ {print} имя \"отлично справляется\" с предметами {at} {random}\n_ {print} имя ' больше всего боится ' страхов {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "## Гадалка\nВ этом уровне вы можете составлять гадания из нескольких слов. Сможете ли вы добавить в список больше различных предсказаний?\n"
                example_code: "```\nпредсказания = 'вы поскользнетесь на банановой кожуре', _\n{print} 'Я загляну в свой кристаллический шар, чтобы узнать ваше будущее'\n{print} 'Я вижу... Я вижу...\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
    haunted:
        name: Дом с привидениями
        description: Побег из дома с привидениями
        default_save_name: Дом с привидениями
        levels:
            1:
                story_text: "## Дом с привидениями\nВ этом приключении вам предстоит создать игру, в которой вы должны выбраться из дома с привидениями, выбрав правильную дверь.\nЕсли вы выберете правильную дверь, вы выживете, но если нет, то страшный монстр может...\n\nНа первом уровне мы начинаем игру в дом с привидениями с придумывания страшной истории и спрашиваем игрока, какое чудовище он увидит в доме с привидениями.\n"
                example_code: "```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "## Вызов\nСможете ли вы закончить страшную историю? Или придумать свою собственную историю о доме с привидениями?\n"
                start_code: '{print} Как я сюда попал?'
            2:
                story_text: "## Дом с привидениями\nВ этом доме с привидениями вы можете выбрать себе монстров с помощью эмодзи. Конечно, вы также можете использовать слова.\n"
                example_code: "```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
                story_text_2: "## Вызов\nВ приведенном выше примере монстры предопределены. Поэтому каждый раз, когда вы запускаете свой код, результат будет один и тот же.\nМожете ли вы добавить команды `{ask}`, чтобы сделать дом с привидениями интерактивным и чтобы игроки сами выбирали монстров, с которыми они сталкиваются?\n"
                example_code_2: "```\nмонстр_1 {is} _\nмонстр_2 {is} _\nмонстр_3 {is} _\n{print} Вы входите в дом с привидениями.\n{print} Вдруг вы видите монстра_1.\n{print} Вы бежите в другую комнату, но там вас поджидает монстр_2!\n{print} О нет! Быстро бегите на кухню.\n{print} Но когда вы входите, на вас нападает монстр_3!\n```\n"
            3:
                story_text: "## Игра \"Дом с привидениями\nВ предыдущих уровнях вы сделали вступление к игре \"Дом с привидениями\", но, как вы могли заметить, история всегда имела ужасный конец.\nВ этом уровне вы можете сделать свою историю более интерактивной, изменив исход игры; иногда вас съедят, иногда вы сбежите!\nПусть Хеди решает случайным образом!\n"
                example_code: "```\n{print} Escape from the haunted house!\n{print} There are 3 doors in front of you...\nchoice {is} {ask} Which door do you choose?\n{print} You picked door ... choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} You see...\n{sleep}\n{print} monsters {at} {random}\n```\n"
                story_text_2: "## Вызов\nЭта история довольно простая, возможно, вы можете немного оживить ее, добавив более захватывающий сюжет.\nТакже у вас сейчас очень ограниченное количество вариантов, есть только 3 варианта того, что находится за дверями. Возможно, вы сможете придумать еще больше монстров, чтобы добавить их в список!\n"
                start_code: '# разместите здесь свой код'
                story_text_3: "## Превратите игру в телевизионное геймшоу!\nНаконец, мы хотели бы предложить вам превратить эту игру в игровое шоу (как на телевидении), где вы выбираете дверь или чемодан, а в нем находится большая цена!\nСможете ли вы это сделать?\n"
                example_code_3: "```\n{print} Большое игровое шоу!\n{print} Перед вами 3 чемодана...\n{print} Один из них содержит _\n_\n```\n"
            4:
                story_text: "## Дом с привидениями\nВ этом уровне вы узнаете, как использовать кавычки в своих играх.\nСможете ли вы сделать свой уровень \"Дом с привидениями\" на 4?\n"
                example_code: "```\n{print} _ Побег из дома с привидениями! _\n{print} Перед вами 3 двери... _\nвыбор {is} {ask} _ Какую дверь вы выберете? _\n{print} _ Вы выбрали дверь ... _ выбор\nмонстры {is} зомби, вампир, НИЧЕГО ВЫ НЕ ВЫБРАЛИ\n{print} Вы видите... _\n{sleep}\n{print} монстры {at} {random}\n ```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "## Дом с привидениями\nДо этого уровня игра \"Дом с привидениями\" всегда просила игрока выбрать дверь, но, как вы могли заметить, ответ не обязательно должен быть правильным.\nЕсли игрок заполнял совершенно случайный ответ, игра все равно работала, и игрок мог даже выиграть (несмотря на то, что не выбрал дверь).\nВ этом уровне вы можете выиграть игру, только выбрав ту же дверь, которую случайно выбрала Хеди.\n\n## Задача\nСможете ли вы найти 4 недостающих слова, чтобы завершить код?\n"
                example_code: "```\n{print} 'Побег из дома с привидениями!'\n{print} 'Перед вами 3 двери...'\nдвери {is} 1, 2, 3\nмонстры {is} оборотень, мумия, вампир, зомби\nselected_door {is} {ask} 'Какую дверь вы выбираете?'\n{print} 'Ты выбрал дверь...' chose_door\n{sleep}\nправильная_дверь {is} двери {at} {random}\n_ _ _ _ _ {print} 'Отлично! Ты сбежал!\n{else} {print} 'О нет! Вас съедает...' монстры {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "## Дом с привидениями\nВ этом уровне вы можете использовать вложенность, которая позволяет сделать дом с привидениями еще более интерактивным!\n\n## Вызов\nСейчас очень трудно выиграть в этой игре, можете ли вы сделать так, чтобы выиграть было легче?\nНапример, вместо 1 правильной двери и 2 правильных дверей сделать только 1 неправильную дверь и 2 неправильные?\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Побег из дома с привидениями!'"
            11:
                story_text: "## Дом с привидениями\nВ этом уровне мы изменили команду repeat и добавили в наш дом с привидениями строку, которая сообщает игроку, в какой комнате он находится.\n\n## Задача\nЗавершите программу правильной строкой кода. Разум: Есть 3 комнаты, которые игрок должен пройти, прежде чем победить!\n"
                example_code: "```\n{print} 'Побег из дома с привидениями!\nигрок {is} жив\nдвери = 1, 2, 3\nмонстры = зомби, вампир, гигантский паук\n_\n    {if} игрок {is} жив\n        правильная_дверь = двери {at} {random}\n        {print} 'Комната' i\n        {print} 'Перед вами 3 двери...'\n        chosendoor = {ask} 'Какую дверь вы выберете?'\n        {if} chosendoor {is} correct_door\n            {print} 'Здесь нет монстров!'\n        {else}\n            {print} 'Вы съедены ' монстрами {at} {random}\n            игрок = мёртв\n    {else}\n        {print} 'ИГРА ОКОНЧЕНА'\n{if} игрок {is} живой\n    {print} 'Отлично! Вы выжили!\n```\n"
                start_code: "{print} 'Побег из дома с привидениями!'"
            14:
                story_text: "## Дом с привидениями\nВ этом уровне вы можете использовать символ `<` и `>`, чтобы ввести в игру жизни.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "## Игра \"Дом с привидениями\nВ этой игре \"Дом с привидениями\" используется связь между списками, которые вы можете использовать на этом уровне.\nНапример: все свойства, принадлежащие зомби, стоят первыми во всех списках, ведьма - вторая, а вампир - третий.\nПроверьте код!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[{random}]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# разместите здесь свой код'
    piggybank:
        name: Копилка
        description: Считайте свои карманные деньги!
        default_save_name: Копилка
        levels:
            12:
                story_text: "## Копилка\nВ этом приключении вы узнаете, как сделать цифровую копилку.\nЗавершите код, чтобы подсчитать, сколько у вас денег и сколько вам нужно накопить, чтобы купить то, что вы хотите!\n"
                start_code: '# разместите здесь свой код'
                example_code: "```\n{print} 'Цифровая копилка'\nwish = {ask} 'Что бы вы хотели купить?'\nцена = {ask} 'Сколько это стоит?'\nсбережения = {ask} 'Сколько денег вы уже сэкономили?'\nцена = {ask} 'Сколько карманных денег ты получаешь в неделю?'\nэкономия = цена - экономия\nнедели = экономия / пособие\n{print} 'Ты можешь купить _ за _ недель'\n```\n"
            14:
                story_text: "## Свинкопилка\nВ этом уровне вы можете позволить Хеди сообщить вам, если вы накопили достаточно денег!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# разместите здесь свой код'
    quizmaster:
        name: Викторина
        description: Составьте свою собственную викторину!
        default_save_name: Викторина
        levels:
            14:
                story_text: "## Создайте свою собственную викторину\nВ этом приключении вы можете создать свою собственную викторину! Заполняйте пробелы, добавляйте новые вопросы и наслаждайтесь своей собственной викториной!\nВы можете составить викторину о чем угодно: о своем хобби, любимом животном, любимой книге или вообще о чем угодно!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# разместите здесь свой код'
    language:
        name: Язык
        description: Отрабатывайте слова на иностранном языке
        default_save_name: Язык
        levels:
            5:
                story_text: "## Изучайте новый язык\nСоздайте свою собственную программу для тренировки словарного запаса на новом языке.\n\n## Вызов\nМожете ли вы сделать эту программу для другого языка? Или вы можете добавить больше слов во французскую программу?\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "## Изучайте новый язык\nСоздайте свою собственную программу для тренировки словарного запаса на новом языке.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# разместите здесь свой код'
    next:
        name: Что дальше?
        description: Что дальше?
        default_save_name: Далее
        levels:
            1:
                story_text: "## Что дальше?\nПоздравляем! Вы достигли конца первого уровня. Надеюсь, вы уже сделали несколько потрясающих кодов, но Хеди еще многое предстоит открыть для себя. \n\nНа первом уровне вы могли заметить, что команда `{echo}` может сохранять только один бит информации за раз. \nНапример, в приключении в ресторане вы могли передать эхом, что клиент хочет съесть или что он хочет выпить, но не то и другое в одном предложении.\n"
                example_code: "```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\n"
                story_text_2: "If the player types a hamburger and coke, you can't say \"so you would like a hamburger and coke\", but you have to make two separate line. \nAlso, the `{echo}` command only echoes the word at the end of the sentence. So you can't say \"your hamburger is coming right up!\"\n\nThat changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.\nSo let's go to the next level!\n"
                start_code: "{print} Поехали!"
            2:
                story_text: "## Что дальше?\nВ этом уровне вы узнали, что такое переменная и как ее использовать, чтобы сделать ваши приключения более интерактивными.\nНо... это не единственное, что можно делать с переменными! Вы также можете использовать переменные для составления списков.\nИ вы даже можете позволить Хеди выбирать случайное слово из списка, что позволит вам создавать настоящие игры!\nВзгляните на следующий уровень!\n"
                start_code: "{print} Переходим на следующий уровень!"
            3:
                story_text: "## Что дальше?\nНа этом уровне вы практиковались в работе с переменными, но, возможно, вы столкнулись с этой ошибкой.\n\nПопробуйте выполнить этот код:\n```\nname {is} Sophie\n{print} Меня зовут имя\n```\nКонечно, вы хотели напечатать `My name is Sophie`, но Хеди напечатала `My Sophie is Sophie`.\nНа следующем уровне эта проблема решается с помощью кавычек.\n"
                start_code: "{print} Переходим на следующий уровень!"
            4:
                story_text: "## Что дальше?\nВ предыдущих уровнях вы уже научились использовать `{at} {random}`{random}`, который делал ваши игры разными каждый раз, когда вы запускали код.\nНо это не совсем интерактивно, игрок не имеет никакого влияния на то, что происходит в игре.\n\nНа следующем уровне вы изучите команду `{if}`, которая позволяет давать различные ответы в вашей программе. Таким образом, вы сможете запрограммировать, например, секретный пароль для вашего компьютера.\nИтак, давайте посмотрим!\n\n```\npassword {is} {ask} 'Какой пароль правильный?'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            5:
                story_text: "## Что дальше?\nТеперь вы достигли конца этого уровня, поэтому вы выучили `{ask}` и `{if}`. Например, вы можете спросить гостей, что бы они хотели съесть.\nНо что вы еще не можете сделать, так это рассчитать стоимость ужина для каждого.\n\nСледующий уровень позволяет использовать в программах сложение, вычитание и умножение. Таким образом, вы сможете не только рассчитать цены в вашем ресторане, но и добавить секретный код, чтобы предоставить вашим друзьям и родственникам скидку.\nДругой вариант на следующем уровне - программирование собственной математической игры, чтобы ваш младший брат или сестра могли практиковаться в умножении.\nУбедитесь в этом сами на следующем уровне!\n"
                example_code: "## Бесплатные напитки!\n```\n{print} 'Добро пожаловать в МакХеди'\nзаказ {is} {ask} 'Что бы вы хотели съесть?'\n{print} 'Вы хотели бы ' заказ\n{if} заказать {is} гамбургер цена {is} 5\n{if} заказ {is} картофель фри цена {is} 2\nнапитки {is} {ask} 'Что бы вы хотели выпить?'\n{print} 'Вы бы хотели ' напитки\n{print} 'Это будет стоить ' цена ' долларов за ваш ' заказ ' пожалуйста'\n{print} 'Напитки бесплатны на этом уровне, потому что Хеди пока не может рассчитать цену...'\n```\n"
                start_code: "{print} 'На следующий уровень!'"
            6:
                story_text: "## Что дальше?\n Отличная работа! Вы достигли конца этого уровня, что означает, что вы практиковались с `{if}` и `{else}`. Вы, вероятно, заметили, что ваши коды становятся все длиннее и длиннее.\n Например, {if} вы хотите запрограммировать \"Happy Birthday\"\n\nЭто очень много кода для того, чтобы повторять одни и те же слова снова и снова. К счастью, на следующем уровне есть решение с помощью команды `{repeat}`, которая позволяет повторять строку кода несколько раз.\n"
                example_code: "```\n{print} 'happy birthday to you'\n{print} 'с днем рождения тебя'\n{print} 'с днем рождения дорогая Хеди'\n{print} 'happy birthday to you'\n```\n"
                start_code: "{print} 'На следующий уровень!'"
            7:
                story_text: "## Что дальше?\nТеперь вы узнали, как повторить одну единственную строку кода. Это очень удобно, но этого не всегда достаточно. Иногда вы хотите повторить сразу несколько строк.\nНа следующем уровне вы сможете сгруппировать несколько строк кода и повторить эту небольшую группу строк одновременно!\n"
                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            8:
                story_text: "## Что дальше?\nОтличная работа! Вы достигли конца очередного уровня! На этом уровне вы научились использовать несколько строк кода в команде {if} или {repeat}. Но вы еще не можете объединить их...\nХорошие новости! На следующем уровне вам будет разрешено помещать {if} внутрь {if}, или внутрь команды {repeat}.\n"
                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            9:
                story_text: "## Что дальше?\nУ вас все отлично! На этом уровне мы все еще сталкиваемся с небольшой проблемой. Вы научились повторять строчки, но что если вы захотите немного изменить строчку.\nНапример, если вы хотите спеть песню \"If you're happy and you know it\". Это будет выглядеть следующим образом:\n\nЕсли вы также захотите, чтобы следующий куплет был \"stomp your feet\", и следующий, и следующий, вам придется полностью изменить код.\nНа следующем уровне вы изучите команду `{for}`, которая позволяет составить список действий и каждый раз повторять код с другим действием!\nПожалуйста, посмотрите!\n"
                example_code: "```\n{repeat} 2 {times}\n    {print} 'if youre happy and you know it clap your hands'\n{print} 'если вы счастливы и знаете это, и вы действительно хотите показать это'\n{print} 'если ты счастлив и знаешь это, хлопай в ладоши'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            10:
                story_text: "## Что дальше?\nВы достигли конца этого уровня, вы молодцы! Вы собираетесь перейти на следующий уровень. На более высоких уровнях Хеди уделяет все больше внимания обучению языку программирования Python.\nВ Python нет команды `{repeat}`, но есть команда, которая работает как {repeat}. Вам интересно узнать, как сказать `{repeat}` на языке Python? Скорее переходите и узнайте!\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            11:
                story_text: "## Что дальше?\nВозможно, вы уже пробовали использовать десятичные числа в своих ресторанных приключениях. Если да, то вы, вероятно, заметили, что Хеди еще не понимает их и всегда округляет.\nСо следующего уровня вы сможете использовать десятичные числа.\n"
                example_code: "```\nбургер {is} 5\nнапиток {is} 2\nитого {is} бургер + напиток\nprint 'Вы заказали бургер и напиток'\nprint 'Это стоит ' всего ' долларов, пожалуйста'\n```\nПриведенный выше код работает, потому что бургер стоит 5 долларов, а напиток - 2 доллара. Но если вы берете на 50 центов больше, программа больше не работает! Например, код ниже:\n```\nбургер {is} 5.50\nнапиток {is} 2.30\nитого {is} бургер + напиток\nprint 'Вы заказали бургер и напиток'\nprint 'Это стоит ' всего ' долларов, пожалуйста'\n```\nПерейдите на следующий уровень, чтобы заставить этот код работать!\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            12:
                story_text: "## Что дальше?\nВ предыдущих уровнях вы узнали, как поместить две команды `{if}`друг в друга. Это работает хорошо, но дает очень длинные и неудобные коды, такие как этот:\n\nВ этой системе вы должны указать и правильное имя пользователя, и правильный пароль.\nНа следующем уровне вы узнаете команду `{and}`, которая сделает этот код еще короче и понятнее!\nПроверьте это!\n"
                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            13:
                story_text: "## Что дальше?\nС помощью приведенной ниже программы вы можете вычислить, сдали ли вы какой-либо предмет в школе (т.е. оценка шесть или выше).\nВы можете видеть, что этот код крайне неэффективен из-за очень длинного кода в строке 5.\nВсе различные оценки от 1 до 5 должны были быть запрограммированы отдельно. К счастью для вас, на следующем уровне вы узнаете, как сделать это без этого чрезвычайно длинного кода!\n"
                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            14:
                story_text: "## Что дальше?\nВ этой игре ниже был сделан код, чтобы игрок мог играть столько, сколько захочет...\nНо код неэффективен и слишком длинный. Кроме того, что если игрок захочет сыграть не 100, а 101 игру?\nВы не можете играть до бесконечности?\nВ следующем уровне вы узнаете команду, которая сделает все это намного проще!\n"
                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            15:
                story_text: "## Что дальше?\nНа следующем уровне мы еще немного продвинемся к реальному коду Python. Вы также узнаете, как сопоставить два списка.\nТаким образом, вы сможете запрограммировать код, в котором правильное животное будет сопоставлено с правильным звуком.\nПотому что два кода ниже... являются очевидной бессмыслицей!\n"
                example_code: "```\nживотные = 'курица', 'лошадь', 'корова'\nзвуки = 'кудахтанье', 'клекот', 'мычание'\n{for} животное {in} животные\n    {print} Животное \"говорит\" звуки {at} {random}\n```\nВы также можете попытаться сделать это таким образом, но....\n```\nживотные = 'курица', 'лошадь', 'корова'\nзвуки = 'cluck', 'neigh', 'moo'\n{for} животное {in} животные\n    {for} звук {in} звуки\n        {print} Животное \"говорит\" звук\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            16:
                story_text: "## Что дальше?\nНа следующем уровне пришло время для новой команды. Вы могли заметить в предыдущих уровнях, что `{if}` и `{else}` иногда недостаточно.\nНапример, в этом коде:\n"
                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
                story_text_2: В этом коде было бы здорово иметь 2x `{else}`, чтобы можно было выбрать один вариант для брокколи и один для стручковой фасоли. Следующий уровень поставляется с новой командой `{elif}`, которая делает это возможным! Так что посмотрите следующий уровень прямо сейчас!
                start_code: "{print} 'Переходим на следующий уровень!'"
            17:
                story_text: "## Что дальше?\nНа следующем уровне вы изучите реальный способ использования Python `{print}`.\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            18:
                story_text: "## Что дальше?\nПоздравляем! Вы достигли последнего уровня Hedy! Код, который вы создали здесь, можно скопировать в реальные среды Python, такие как replit или PyCharm, и продолжить обучение там!\nОбратите внимание, что Python может читать только английские команды, поэтому если вы использовали другие языки, вам придется перейти на английский.\n"
                start_code: "{print} (\"Отличная работа!!!\")"
    tic:
        name: Крестики-нолики
        description: Сыграйте в крестики-нолики!
        default_save_name: Тик
        levels:
            13:
                story_text: "## Tic Tac Toe\nВ этом приключении вы можете запрограммировать игру Tic Tac Toe. Вы можете играть с двумя людьми. По очереди вы выбираете номер места (1 - 9), на которое вы хотите поставить свой знак (x или o).\nПервый игрок, который поставит 3 знака подряд (по горизонтали, вертикали или диагонали), побеждает!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## разместите здесь свой код'
            15:
                start_code: '## разместите здесь свой код'
                story_text: "## Крестики-нолики\nВ этом уровне вы можете улучшить свою игру в Крестики-нолики с помощью цикла {while}. С помощью этого цикла вы можете объединить `{if} game != 'over'` и `{for} i {in} {range} 1 {to} 9` в одну простую линию.\nПроверьте это:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '## разместите здесь свой код'
                story_text: "## Tic Tac Toe\nВ предыдущих уровнях игра \"Крестики-нолики\" имела раздражающую особенность. После каждого хода вы должны были сами заполнить, выиграли вы или нет.\nЭто делало игру играбельной, но в то же время довольно медленной. В этом уровне мы изучили команду `{elif}`, которая может решить эту проблему.\nИспользовать {elif} для того, чтобы Хеди могла проверить, выиграл ли игрок или нет, очень интересно, но это также требует достаточно большого количества дополнительных строк.\n\nВ примере кода вы видите, что мы добавили требования для победы (3 места подряд по горизонтали, вертикали или диагонали).\nВы можете найти их в строках с 46 по 69. Видно, что каждый раз, когда требование выполняется (то есть если игрок выиграл), переменная game устанавливается в значение 'over'.\nЭто означает, что цикл {while} будет остановлен и игра закончится.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
            14:
                story_text: "## Тик-Так-Так\nВ предыдущих уровнях вы создали игру \"Крестики-нолики\". Теперь вы научились использовать знаки =, == и !=.\nВы можете использовать эти знания в своей новой игре Tic Tac Toe, например, так:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## разместите здесь свой код'
    blackjack:
        name: Блэкджек
        description: Постарайтесь приблизиться к 21, насколько это возможно
        default_save_name: Блэкджек
        levels:
            17:
                story_text: "## Создайте игру в блэкджек\nБлэкджек - это простая карточная игра, в которой вы должны как можно ближе подобраться к 21 очку. Вы получаете две карты. Каждая карта имеет свое цифровое значение, а карты с лицом (валет, королева и король) стоят 10 очков.\nТуз стоит 1 или 11 очков (вы можете выбрать). Дилер, ваш противник, также получает две карты.\nЕсли вы хотите, вы можете взять еще одну карту, и ее очки будут добавлены к вашей сумме. Дилер также может взять еще одну карту.\nНо будьте осторожны, чтобы не набрать больше 21 очка, потому что в этом случае вы проиграете!\nПобеждает тот игрок, который ближе всего подойдет к 21 очку, не превысив его!\n\nВеселитесь!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# разместите здесь свой код'
    pressit:
        levels:
            5:
                story_text: "## Press it!\nIn the introduction you were also told about the new keyword ```pressed```! Using ```pressed```\ncan make coding much more interactive, and you can have live control of what is executed!\nIn the upcoming levels you will learn how ```pressed``` makes this possible and what uses ```pressed```\nhas.\nBesides printing text, there is a whole other variety of uses for ```pressed```\nFor example, you can also link turtle commands to keys! Try it!\n"
                story_text_2: "## If Else Pressed\nYou can also assign an else statement to ```pressed```. The else statement will be executed\nwhenever you press a key other than the key you assigned.\n"
                example_code: "```\nif x is {pressed} forward 50\n```\n"
                example_code_2: "```\nif y is {pressed} {print} 'Amazing! You pressed the y key!'\nelse {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# place your code here'
            6:
                story_text: "Did you know you can also make a calculator using ```pressed```?\nGive the calculator two numbers and press the m key to multiply.\nNow you don't have to bring your own!\nTry other keys and see what happens! Do you get a different result?\n"
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\nprint 'press a to add, s to substract, d to divide, m to multiply'\nif a is {pressed} result = first + second\nif s is {pressed} result = first - second\nif d is {pressed} result = first / second\nif m is {pressed} result = first * second\nprint 'The answer is ' result\n```\n"
                start_code: '# place your code here'
            7:
                example_code: "```\nrepeat 3 times if x is {pressed} forward 15\n```\n"
                story_text: "You might have tried it in level 5 and 6, pressing the key linked to ```pressed``` multiple\ntimes. If you did, you noticed that this did nothing. but now that you have learned about repeat, we\ncan press keys multiple times! Make the turtle walk forward!\n"
                start_code: '# place your code here'
            8:
                example_code: "```\n{if} x is {pressed}\n    {print} 'Only the cool kids press the x key.'\n{else}\n    {print} 'The adventurous kids press something else.'\n```\n"
                start_code: '# place your code here'
                story_text: "## Press It!\nNow that you need to use indents for the {if} and {else} statements,\nyou will also have to indent code when using {pressed}! Don't worry,\nit works te same as with the other statements, see the example!\nPress another key instead of x and see what happens.\n"
            9:
                story_text_2: "Besides counting, you can now also move the turtle in many more ways than only forward or backwards!\nTry making some figures by walking the turtle around!\n"
                story_text: "Now that you know how to nest multiple statements, you can also do this with {pressed}!\nBy nesting a pressed in a {repeat} loop, you can repeatedly press buttons and make something happen.\nNow we know you could do this before, but by using the indents you have much more overview!\nTry it counting to 5, for example!\n"
                example_code: "```\ntotal = 1\n{repeat} 5 times\n    {if} x is {pressed}\n        {print} total\n        {print} 'keep pressing!'\n        total = total + 1\n```\n"
                start_code: '# place your code here'
                example_code_2: "```\nstepsize = 25\nleft = -90\nright = 90\naround = 180\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
            10:
                story_text: "In this level you can make the turtle draw you a figure. The turtle is raring to go.\nGive the turtle the starting signal by pressing the x or y key on your keyboard.\nCan you let the turtle draw you another figure?\n"
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} -90\n{if} y is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} 90\n```\n"
                start_code: '# place your code here'
            11:
                example_code: "```\nleft = -90\nright = 90\naround = 180\nfor counter in range 1 to 15\n    stepsize = counter * 5\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
                story_text: "Now that you have learned of the ```for ... in range ... to ...``` rule, you can use it for ```pressed```\ntoo! for example, try moving the turtle! The turtle grows everytime you press a linked button.\nThis way the turtle can move further every step!\n"
                start_code: '# place your code here'
            12:
                story_text: "Are you familiar with videogames? You walk into tall grass and are suddenly approached by\na very suspicious mouse. What will you do?\nIn this level we will make a small menu with different kinds of options.\nStoring text into a variable is quite handy for repeated uses.\nOption, I choose you!\n"
                example_code: "```\nchoose = 'You chose option: '\nprint 'A wild mouse appeared!'\nprint 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n is {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    sleep\n    {print} 'Congratulations you did it!'\n{if} c is {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    sleep\n    {print} 'The mouse got scared and ran away!'\n{if} b is {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r is {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "Now that you learned how to use ```and``` and ```or```, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump if he turns left and right first!\n"
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        looked_left = 1\n    {if} d is {pressed}\n        turn right\n        looked_right = 1\n    {if} p is {pressed}\n        {if} looked_left is 1 and looked_right is 1\n            forward 40\n            looked_left = 0\n            looked_right = 0\n```\n"
                start_code: '# place your code here'
            14:
                story_text: "Now that you learned how to use operators, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump every 5 steps or every 4 turns\n"
                start_code: '# place your code here'
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
            15:
                story_text: "Now that you have learned about the ```while``` loops, you can start using it on the turtle!\nThe turtle is now only allowed to take only 15 steps or turn 15 times, before he gets tired!\nTry to get as far as possible before the turtle gets tired! You can use your superjump after 2 turns\nor 5 steps.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\nwhile tired_in > 0\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "Lets move a little with a game of Twister!\nWhen everyone is ready, press the x key for the next move!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\nrepeat 20 times\n    l = limbs[random]\n    c = colours[random]\n    {if} x is {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
                start_code: '# place your code here'
            17:
                story_text: "Now that you learned how to use ```elif```, we can use it with ```pressed```too! Be aware,\n```elif ... is pressed ``` is not possible! That is why we are going to nest some ```elif```\nstatements into the ```pressed``` options. We also had to add ```:``` to the code to make\neverything work! imagine the turtle being able to do a superjump forward. by pressing ```p``` the\nturtle can make a superjump! However, the turtle can only do this jump every 5 steps or every\n4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}:\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}:\n        turn around\n    {if} a is {pressed}:\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}:\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}:\n        {if} jumptime <= 0 or spins <= 0:\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            print \"you need to take more steps or turns before you can superjump!\"\n```\n"
                start_code: '# place your code here'
        name: Press it!
        description: Try linking a keyboard key to a command!
        default_save_name: Pressit
