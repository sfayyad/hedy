adventures:
    default:
        name: "Einführung"
        description: "Erklärung des Levels"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    ## Willkommen bei Hedy!
                    In Level 1 kannst du die Befehle `{print}`, `{ask}` und `{echo}` verwenden.
                    Tippe den Code in das Programmierfeld. Oder drücke den grünen Knopf beim Beispielcode um ihn in dein Programm zu übernehmen!
                    Probiere den Code selbst mit der grünen Schaltfläche 'Code ausführen' unter dem linken Programmierfeld aus.

                    Du kannst Text auf dem Bildschirm ausgeben lassen indem du den Befehl `{print}` verwendest.     
                start_code: "{print} Hallo Welt!"
                example_code: "```\n{print} Hallo!\n{print} Willkommen bei Hedy!\n```\n"
                story_text_2: "Du kannst auch mit `{ask}` nach Eingaben fragen und sie dir mit dem Befehl `{echo}`zurückgeben lassen.\n"
                example_code_2: "```\n{ask} Wie heißt du?\n{echo} Hallo\n```\n"
                story_text_3: "Lass uns loslegen! Weißt du nicht was du programmieren sollst? In den nächsten Tabs warten Ideen für Programme auf dich.\n"
            2:
                story_text: |
                    ## Variablen
                    In Level 2 lernen wir zwei neue Befehle: `{is}`und `{sleep}`.
                    Du kannst ein Wort mit `{is}` benennen. Das nennt man eine Variable. In diesem Beispiel haben wir eine Variable name und eine Variable alter erstellt. Du kannst das Wort name irgendwo in deinem Code verwenden und es wird dann durch Hedy ersetzt, und zwar so:

                    Deswegen benötigst du den Befehl `{echo}` nicht mehr!
                start_code: "{print} Hallo Welt!"
                example_code: "```\nName {is} Hedy\nAlter {is} 15\n{print} Name ist Alter Jahre alt\n```\n"
                story_text_2: "`{print}` funktioniert genauso wie vorher, aber der Befehl `{ask}` hat sich verändert. Du brauchst jetzt auch für den Befehl `{ask}` eine Variable. Das sieht so aus:\n"
                example_code_2: "```\nAntwort {is} {ask} Wie heißt du?\n{print} Hallo Antwort\n```\n"
                story_text_3: "Ein weiterer neuer Befehl in diesem Level ist `{sleep}`, was das Programm für eine Sekunde anhält. Wenn du hinter {sleep} eine Zahl tippst, wartet das Programm so viele Sekunden.\n"
                example_code_3: "```\n{print} Meine Lieblingsfarbe ist...\n{sleep} 2\n{print} grün!\n```\n"
            3:
                story_text: |
                    ## Erstelle eine Liste!
                    In Level 3 kannst Du eine Liste erstellen. Du kannst den Computer etwas zufällig aus der Liste auswählen lassen. Du machst dies mit `{at} {random}` (es bedeutet wörtlich übersetzt "an zufällig" und man spricht es "ät rän-dum" aus).
                start_code: "{print} Hallo Welt!"
                example_code: "```\nTiere {is} Hund, Katze, Känguru\n{print} Tiere {at} {random}\n```\n"
                story_text_2: Du kannst auch Elemente der Liste mit `{add}` hinzufügen und Elemente mit`{remove}` entfernen.
                example_code_2: "```\nTiere {is} Hund, Katze, Känguru\n{add} Pinguin {to_list} Tiere\n{remove} Katze {from} Tiere\n{print} Tiere {at} {random}\n```\n"
            4:
                start_code: "{print} 'Hallo Welt'"
                story_text: |
                    ## 'Anführungszeichen'
                    In Level 4 haben sich `{print}` und `{ask}` geändert.

                    Du musst Text, den du genau so mit ausgeben möchtest, in Anführungszeichen setzen.

                    Das ist nützlich, denn nun kannst du alle Wörter ausgeben, die du möchtest. Auch die Wörter, mit denen du etwas mit `{is}` gespeichert hast.


                    Die meisten Programmiersprachen verwenden ebenfalls Anführungszeichen bei ihren Ausgabebefehlen, sodass wir dem echten Programmieren einen Schritt näher kommen!
                example_code: "```\n{print} 'Ab jetzt musst du Anführungszeichen verwenden!'\nAntwort {is} {ask} 'Was müssen wir ab jetzt verwenden?'\n{print} 'Wir müssen ' Antwort ' verwenden.'\n```\n"
                story_text_2: "## Abenteuer werden immer schwieriger\nDie Abenteuer werden jetzt immer schwieriger in den nächsten Tabs.\nDeswegen ist es am Besten wenn du dich von links nach rechts vorarbeitest, um immer mehr herausgefordert zu werden.\n"
            5:
                start_code: |-
                    name {is} {ask} 'Wie heisst du?'
                    {if} name {is} Hedy {print} 'Toll!' {else} {print} 'Blöd'
                story_text: |
                    ## Falls... sonst...
                    In Level 5 gibt es etwas neues, nämlich das `{if}`! Mit `{if}` kannst du zwischen zwei verschiedenen Möglichkeiten wählen. 
                    Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Blöd!', wenn du etwas anderes eingibst. 
                    `{ask}` und `{print}` funktionieren immer noch wie in Level 4.
                example_code: "```\nName {is} {ask} 'Wie heißt du?'\n{if} Name {is} Hedy {print} 'Schön' {else} {print} 'Buh!'\n```\n"
                story_text_3: "## Lists\nWenn wir überprüfen möchten ob etwas in einer Liste ist, können wir das mit dem Befehl `{in}` machen.\nDieser Code gibt schön! aus wenn du grün oder gelb auswählst, und na ja wenn du dich für eine andere Farbe entscheidest.\n"
                example_code_3: "``` \nschöne_Farben {is} grün, gelb \nFarbe {is} {ask} 'Was ist deine Lieblingsfarbe?' \n{if} Farbe {in} schöne_Farben {print} 'schön!' \n{else} {print} 'na ja' \n```\n"
                story_text_2: "Machmal wir Code mit einem`{if}`ziemlich lang und passt nicht gut in eine Zeile. <br> Du kannst den Code auch auf zwei Teilen aufteilen, beginnend mit der zweiten Zeile beim `{else}` Befehl, und zwar so:\n"
                example_code_2: "```\nName {is} {ask} 'Wie heißt du?'\n{if} Name {is} Hedy {print} 'Schön'\n{else} {print} 'Buh!'\n```\n"
            6:
                start_code: "{print} '5 mal 5 ist ' 5 * 5"
                story_text: |
                    ## 1 + 1
                    In diesem Level lernst du etwas Neues: Du kannst jetzt auch rechnen.

                    Das Plus ist leicht, das schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

                    Das Mal ist etwas anders, da auf deiner Tastatur kein Malzeichen vorhanden ist. Suche mal, das gibt es wirklich nicht!
                    Deshalb multiplizieren wir mit dem Stern (auf der Tastatur über dem Plus): `5 * 5`. Lies das als "5 mal 5", dann kannst du dich am einfachsten daran erinnern.
                example_code: "```\n{print} '5 plus 5 macht ' 5 + 5\n{print} '5 minus 5 macht ' 5 - 5\n{print} '5 {times} 5 macht ' 5 * 5\n```\n"
                story_text_2: "Wir verändern auch wie du ein Wort in einer Variable speichern kannst! Du darfst jetzt `=`anstatt `{is}` verwenden, wenn du ein Wort oder eine Zahl in einer Variable speicherst, und zwar so:\n"
                example_code_2: "```\nName = Hedy\nAntwort = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy macht Spaß!'"
                story_text: |
                    ## Level 7! Level 7!
                    In Level 7 kommt der Befehl `{repeat}`dazu. Mit {repeat} kannst du eine Zeile Code mehrmals ausführen.
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy macht Spaß!'\n```\n"
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hallo Leute'
                        {print} 'Das wird 5 mal ausgegeben'
                story_text: |
                    ## Die Einrückung 
                    `{ask}` und `{print}` funktionieren immer noch wie du es gewohnt bist. Aber `{if}`,`{else}` und `{repeat}` haben sich verändert! 
                    Du kannst jetzt Befehlsgruppen zusammen ausführen, aber du musst den Code dafür *einrücken*. 
                    Das bedeutet dass du die Befehlszeilen mit vier Leerzeichen beginnen musst. Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben möchtest.
                example_code: "Der `{repeat}` Befehl funktioniert jetzt so:\n```\n{repeat} 5 {times}\n    {print} 'Hallo zusammen'\n    {print} 'Das hier wird fünf Mal wiederholt'\n```\nDie Befehle `{if}` und `{else}` funktionieren jetzt so:\n\n```\nname {is} {ask} 'Wie heißt du?'\n{if} name {is} Hedy\n    {print} 'Willkommen Hedy'\n    {print} 'Du kannst an deinem Computer spielen'\n{else}\n    {print} 'EINDRINGLING!'\n    {print} 'Du darfst diesen Rechner nicht benutzen!'\n```\n"
            9:
                start_code: |-
                    {repeat} 3 {times}
                        Essen = {ask} 'Was möchtest du gern?'
                        {if} Essen {is} 'Pizza'
                            {print} 'Gut!'
                        {else}
                            {print} 'Pizza ist besser'
                story_text: |
                    ## Jetzt alles auf einmal!
                    In diesem Level kannst du nicht nur mehrere Zeilen mit `{if}` und `{repeat}` verwenden, du kannst sie auch kombinieren! 
                    Im Beispiel siehst du einen `{if}` Befehl innerhalb eines `{repeat}` Befehls. Es ist auch anders herum erlaubt. Und ebenso ist `{if}` innerhalb eines anderen `{if}` Befehls erlaubt, genau wie `{repeat}` in einem anderen `{repeat}` Befehl. 
                    Versuch es mal!
                example_code: "```\n{repeat} 3 {times}\n    Essen = {ask} 'Was würden Sie gerne essen?'\n    {if} Essen {is} Pizza\n        {print} 'Schön!'\n    {else}\n        {print} 'Pizza ist leckerer'\n```\n"
            10:
                start_code: |-
                    Tiere {is} Hund, Katze, Blobfisch
                    {for} Tier {in} Tiere
                      {print} 'Ich mag' Tier
                story_text: |-
                    ## Für jedes Element in meiner Liste... 
                    In diesem Level lernen wir den neuen Befehl `{for}`. Mit `{for}` kannst du eine Liste machen und alle ihre Elemente verwenden. 
                    `{for}` erstellt einen Block, so wie `{repeat}` und `{if}`, daher müssen alle Zeilen in dem Block mit Leerzeichen beginnen.
                example_code: "```\nTiere {is} Hund, Katze, Kugelfisch\n{for} Tier {in} Tiere\n  {print} 'Ich mag ' Tier\n```\n"
            11:
                start_code: |-
                    {for} Zähler {in} {range} 1 {to} 5
                        {print} Zähler
                story_text: |-
                    ## Schleifen! 
                    `{print}` funktioniert exakt genauso, aber wir verwenden jetzt die neue Form des Befehls `{for}`. Du kannst jetzt `{for} counter {in} {range} 1 {to} 5` schreiben anstelle von `{repeat} 5 {times}` und `counter` in deinem Programm verwenden.
                    Probier es aus und schau, was passiert! Denke daran, Einrückungen nach den `{for}`- und `{if}`-Anweisungen zu verwenden (Das bedeutet, einen Satz mit vier Leerzeichen zu beginnen).
                example_code: "```\n{for} Zähler {in} {range} 1 {to} 5\n    {print} Zähler\n```\n"
            12:
                start_code: |-
                    {print} 'Dezimalzahlen benötigen jetzt einen Punkt'
                    {print} 2.5 + 2.5
                story_text: |-
                    ## Zahlen und Texte 
                    **Dezimalzahlen** 
                    Bis jetzt konntest du mit Hedy keine Dezimalzahlen (das sind Kommazahlen) wie 1.5 verwenden, aber jetzt geht das. Denke daran, dass Computer anstatt des Kommas einen Punkt (`.`) verwenden.
                example_code: "```\n{print} 'Zweieinhalb plus zweieinhalb macht...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Jeder Text muss zwischen Anführungszeichen stehen**\nAb diesem Level musst du auch Anführungszeichen verwenden wenn du Text mit einem `=` abspeicherst:\n"
                example_code_2: "```\nName = 'Hedy der Roboter'\n{print} 'Hallo ' name\n```\n"
                story_text_3: "**Auch alle Elemente in Listen brauchen Anführungszeichen**\nListen sind Texte, also brauchen auch sie Anführungszeichen. Achte darauf dass jedes einzelne Element in einer Liste Anführungszeichen hat.\nSo kannst du zwei Wörter als ein Listenelement speichern, zum Beispiel 'Iron Man'.\n"
                example_code_3: "```\nSuperhelden = 'Spiderman', 'Batman', 'Iron Man'\n{print} Superhelden {at} {random}\n```\n"
                story_text_4: "**Auch jeder Text nach einem `{if}` Vergleich braucht Anführungszeichen**\n"
                example_code_4: "```\nName = {ask} 'Wie heißt du?'\n{if} Name = 'Hedy der Roboter'\n    {print} 'Hallo!'\n```\n"
                story_text_5: "**Zahlen brauchen keine Anführungszeichen**\nFür Zahlen verwendest du keine Anführungszeichen mit dem `=`:\n"
                example_code_5: "```\nPunkte = 25\n{print} 'Du hast ' score\n```\n"
                story_text_6: "**Mathe in Worten**  \nIn diesem Level ist es auch erlaubt das + Zeichen mit Texten zu benutzen. Zum Beispiel:"
                example_code_6: "``` \na = 'Hallo ' \nb = 'Welt!' \n{print} a + b \n```\n"
            13:
                start_code: |-
                    Name = {ask} 'Wie heißt Du?'
                    Alter = {ask} 'Wie alt bist Du?'
                    {if} Name {is} 'Hedy' {and} Alter {is} 2
                        {print} 'Du bist die echte Hedy!'
                story_text: |-
                    ## Und... oder...?
                    Wir werden jetzt `{and}` und `{or}` lernen! Wenn du zwei Angaben überprüfen willst, musst du nicht zwei `{if}` verwenden, sondern kannst `{and}` und `{or}` benutzen. Wenn du `{and}` verwendest, müssen beide Angaben, also links und rechts vom `{and}`, wahr sein. Du kannst auch `{or}` verwenden. Dann muss nur eine der beiden Aussage wahr sein.
                example_code: "``` \nName = {ask} 'Wie heißt du?'\nAlter = {ask} 'Wie alt bist du?'\n{if} Name {is} 'Hedy' {and} Alter {is} 2\n    {print} 'Du bist die echte Hedy!'\n```\n"
            14:
                start_code: |-
                    alter = {ask} 'Wie alt bist du?'
                    {if} alter < 13
                        {print} 'Du bist jünger als ich!'
                    {else}
                        {print} 'Du bist älter als ich!'
                story_text: |
                    ## Groß, größer, am größten!
                    Wir lernen weitere neue Elemente kennen! Du kennst sie vielleicht schon aus der Mathematik, das `<` und das `>` Zeichen.
                    Das `<` prüft, ob die erste Zahl kleiner ist als die zweite, so überprüft `Alter < 12` zum Beispiel, ob `Alter` kleiner als 12 ist.
                    Wenn du überprüfen willst, ob die erste Zahl kleiner oder gleich der zweiten ist, kannst du `<=`verwenden, zum Beispiel `Alter <= 11`.
                    Das `>` prüft, ob die erste Zahl größer als die zweite ist, so überprüft `Punkte > 10` zum Beispiel ob `Punkte` größer als 10 ist.
                    Wenn du überprüfen willst, ob die erste Zahl größer oder gleich der zweiten ist, kannst du `>=`verwenden, also zum Beispiel `Punkte >= 11`.
                    All diese Vergleiche kannst du mit einem `{if}`verwenden, das geht so:
                example_code: "```\nAlter = {ask} 'Wie alt bist du?'\n{if} Alter > 12\n    {print} 'Du bist älter als ich!'\n```\n"
                story_text_2: "Ab diesem Level, wenn du überprüfen willst ob etwas genau gleich ist, kannst du zwei Gleichheitszeichen verwenden. So machen das die meisten Programmiersprachen:\n"
                example_code_2: "```\nName = {ask} 'Wie heißt du?'\n{if} Name == 'Hedy'\n    {print} 'Du bist cool!'\n```\n"
                story_text_3: "Du kannst auch überprüfen ob etwas *nicht* gleich wie etwas anderes ist, mit `!=`und zwar so:\n"
                example_code_3: "```\nName = {ask} 'Wie heißt du?'\n{if} Name != 'Hedy'\n    {print} 'Du bist nicht Hedy'\n```\n"
            15:
                start_code: |-
                    antwort = 0
                    {while} antwort != 25
                        antwort = {ask} 'Wieviel ist 5 mal 5?'
                        {print} 'Das ist die richtge Antwort!'
                story_text: |-
                    ## Mehr Schleifen!
                    Wir lernen eine neue Schleife kennen, die `{while}`-Schleife! Wir setzen die Schleife so lange fort, wie die Aussage wahr ist!
                    Also vergiss nicht den Wert innerhalb der Schleife zu ändern.

                    Im Beispielcode fahren wir also fort, bis eine korrekte Antwort gegeben wurde.
                    Wenn die richtige Antwort nie gegeben wird, endet die Schleife nie!
                example_code: "```\nAntwort = 0\n{while} Antwort != 25\n    Antwort = {ask} 'Was macht 5 mal 5?'\n{print} 'Es wurde eine richtige Antwort abgegeben'\n```\n"
            16:
                start_code: |-
                    früchte = ['Apfel', 'Banane', 'Kirsche']
                    {print} früchte
                story_text: |-
                    ## Wir kommen dem richtigem Code immer näher!
                    Wir setzen jetzt eckige Klammern um Listen, so wie das in Python gemacht wird! Außerdem müssen wir jetzt einfache Anführungszeichen `'` um jedes Element einer Liste setzen, wie wir es in den vorherigen Leveln gelernt haben.
                    Du kannst die eckigen Klammern auch verwenden um eine Stelle in der Liste zu benennen.
                example_code: "```\nFreunde = ['Ahmed', 'Ben', 'Clemens']\nGlückszahlen = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'Die Glückszahl von ' Freunde[i]\n    {print} 'ist ' Glückszahlen[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Bereit oder nicht, hier komme ich!'
                story_text: |-
                    ## Elif
                    Jetzt werden wir ein wenig an der Einrückung ändern. Jedes Mal, wenn wir eine Einrückung benötigen, brauchen wir `:` in der Zeile vor der Einrückung.

                    In diesem Level kannst du außerdem einen neuen Befehl benutzen: `{elif}`. `{elif}` ist eine Abkürzung für {else} {if} und du brauchst ihn wenn du drei (oder Mehr!) Optionen machen willst.
                    Probier es mal aus!
                example_code: |
                    ```
                    Preise = ['1 Million Euro', 'ein Apfelkuchen', 'nichts']
                    dein_Preis = Preise[{random}]
                    {print} 'Du gewinnst ' dein_Preis
                    {if} dein_Preis == '1 Million Euro' :
                        {print} 'Juhuu! Du bist reich!'
                    {elif} dein_Preis == 'ein Apfelkuchen' :
                        {print} 'Wunderbar, ein Apfelkuchen!'
                    {else}:
                        {print} 'Viel Glück beim nächsten Mal...'
                    ```
            18:
                start_code: |-
                    Name = 'Hedy'
                    {print}('Ich heiße ', Name)
                story_text: |-
                    ## The last level!
                    Wir sind bei richtigem Python Code angekommen! Das bedeutet dass wir ab jetzt rund Klammern mit den Befehlen {print} und {range} benutzen müssen.

                story_text_2: |-
                    Wenn du mehr als ein Objekt mit dem {print}-Befehl ausgeben möchtest, musst du sie mit einem Komma trennen.

                example_code_2: |
                    ```
                    temperature = 25
                    {print}('Draußen sind es ', temperature,' Grad')
                    ```

                story_text_3: |-
                    ## Eingabe
                    Die letzte Änderung, die wir vornehmen müssen, um Python-Code zu erhalten, ist die Änderung von `{ask}` zu `{input}`.

                example_code_3: |
                    ```
                    {print}('Mein Name ist Hedy!')
                    name = {input}('Wie heißt du?')
                    {print}('Dein Name ist also ', name)
                    ```
                example_code: |
                    ```
                    {print}('Hallo!')
                    {for} i {in} {range}(1, 10):
                        {print}('This ist Zeile ', i)
                    ```
    story:
        name: "Geschichte"
        description: "Schreibe eine Geschichte"
        default_save_name: "Geschichte"
        levels:
            1:
                story_text: |
                    ## Schreib eine Geschichte
                    In Level 1 kannst Du die Hauptfigur Deiner Geschichte ändern, indem Du ihren Namen selbst eingibst.

                    Nutze `{ask}` in der ersten Zeile um zu fragen, wer der Hauptcharakter der Geschichte sein soll.

                    Beginne anschließend eine Zeile mit `{print}`, wenn ein Satz ausgegeben werden soll.
                    Nutze `{echo}`, wenn Du möchtest, dass der Name Deiner Hauptfigur am Ende des Satzes steht.

                example_code: |
                    ```
                    {ask} Der Name der Hauptfigur lautet: 
                    {print} Die Hauptfigur läuft nun durch einen dunklen Wald. 
                    {print} Überall sind seltsame Geräusche zu hören.
                    {echo} Da rief doch jemand seinen / ihren Namen: 
                    {print} Es ist schon sehr gruselig hier.
                    {print} Er / Sie befürchtet, dass es in diesem Wald spukt.
                    ```

                start_code: "{print} Deine Geschichte beginnt hier"
                story_text_2: "## Challenge\nKannst du deine eigene Geschichte in Hedy erstellen, indem du `{print}` , `{ask}` und `{echo}` verwendest?\n"
            2:
                story_text: |
                    ## Schreibe eine Geschichte
                    In Level 2 kannst Du deine Geschichte noch etwas spannender machen. Der Name Deiner Hauptfigur kann nun an jeder Stelle im Satz auftauchen.

                    Dafür musst Du aber auch ein kleines bisschen mehr programmieren. Du musst Dir jetzt seinen oder ihren Namen richtig merken.

                    Dafür kannst Du den Namen irgendwo im Satz verwenden.

                    ## Challenge
                    Kannst du selbst eine Geschichte schreiben, die eine Variable verwendet? Kannst du noch mehr Variablen hinzufügen?

                example_code: |-
                    ```
                    Name {is} {ask} Wie lautet der Name der Hauptfigur?
                    {print} Name läuft nun durch einen dunklen Wald.
                    {print} Name hat etwas Angst.
                    {print} Plötzlich ertönen seltsame Geräusche...
                    {sleep}
                    {print} Name hat Angst, dass es in diesem Wald spukt.
                    ```
                start_code: "{print} Deine Geschichte"
            12:
                story_text: |-
                    ## Geschichte
                    In diesem Level kannst Du die Anführungszeichen nutzen, um mehrere Wörter in einer Variable zu speichern.

                example_code: |
                    ```
                    Name = 'Die Königin von England'
                    {print} Name ' aß ein Stück Kuchen, als plötzlich...'
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                # Frankly, this section translates to German awfully.
                # Anybody has a good idea that works well in German?
                story_text: |
                    ## Geschichte
                    In diesem Level kannst Du den {for} Befehl für Deine Geschichte nutzen. Damit kannst Du zum Beispiel ganz einfach das Kinderbuch "Brauner Bär, brauner Bär, wen siehst denn Du?" programmieren.

                example_code: |
                    ```
                    Tiere = roter Vogel, schwarzes Schaf, grüner Frosch, gelbe Ente, kleines Kind
                    {print} 'Brauner Bär'
                    {print} 'Brauner Bär'
                    {print} 'Wen siehst denn Du?'
                    {for} Tier {in} Tiere
                        {print} 'Ich sehen ein/e/n ' Tier '. Der/die/das schaut mir zu.'
                        {print} Tier
                        {print} Tier
                        {print} 'Wen siehst denn Du?'
                    {print} 'Ich sehe all die Tiere. Die schauen mir zu.'
                    ```
                start_code: "# setze hier deinen Code hin"
            9:
                story_text: |
                    ## Geschichte
                    In diesem Level nutzt du Verschachtelungen, um `{if}`-, `{repeat}`- oder `{for}`-Befehle in anderen `{if}`-, `{repeat}`- oder `{for}`-Befehlen zu verwenden. Das eröffnet dir viele Möglichkeiten und hilft dir, deine Geschichte richtig interaktiv werden zu lassen.
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Robin läuft durch die Innenstadt.'\nOrt = {ask} 'Geht Robin in ein Geschäft oder nach Hause?'\n{if} Ort {is} Geschäft\n    {print} 'Sie betritt ein Geschäft.'\n    {print} 'Robin sieht ein Buch, das spanned wirkt.'\n    Buch = {ask} 'Kauft Robin das Buch?'\n    {if} Buch {is} ja\n        {print} 'Robin kauft das Buch und geht nach Hause.'\n    {else}\n        {print} 'Robin verlässt das Geschäft und geht nach Hause.'\n{else}\n    {print} 'Robin geht nach Hause.'\n```\n"
                story_text_2: "Das obige Beispiel ist recht simpel, doch mit verschachtelten {if} kannst Du richtig aufwendigen Code schreiben und aus Deiner Geschichte ein richtiges Spiel machen. Sieh Dir einmal dieses Beispiel an!"
                example_code_2: "## Ausgebauter Code\n```\nSchwert = verloren\nSpiel = läuft\n{print} 'Unsere Heldin läuft durch den Wald.'\n{print} 'Der Weg gabelt sich.'\n{repeat} 2 {times}\n    {if} Spiel {is} läuft\n        Weg = {ask} 'In welche Richtung soll sie gehen?'\n        {if} Weg {is} links\n            {if} Schwert {is} gefunden\n                {print} 'Unsere Heldin trifft auf einen Drachen!'\n                {print} 'Zum Glück hat unsere Heldin ein Schwert um die Bestie zu besiegen!'\n                Spiel = vorbei\n            {else}\n                {print} 'Unsere Heldin findet einen Drachen, hat aber keine Waffe!'\n                {print} 'Unsere Heldin wird vom Drachen geschlagen...'\n                {print} 'Versuch es nochmal.'\n                Spiel = vorbei\n        {if} Weg {is} rechts\n            {if} Schwert {is} verloren\n                {print} 'Unsere Heldin findet ein Schwert.'\n                {print} 'Das könnte sich noch als nützlich erweisen.'\n                Schwert = gefunden\n            {else}\n                {print} 'Du hast das Schwert schon gefunden. Hier gibt es nichts weiter zu entdecken.'\n                {print} 'Sie läuft zurück'\n```\n"
            8:
                story_text: |
                    ## Geschichte
                    In diesem Level kannst Du mehrere Zeilen zu einem {if}-Befehl hinzufügen. So kannst Du Deine guten und schlechten Enden etwas erweitern.

                    ## Challenge
                    Kannst du deine eigene Geschichte mit zwei verschiedenen Enden schreiben?

                example_code: |
                    ```
                    {print} 'OH NEIN! Der T-rex kommt immer näher!'
                    Ende = {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} Ende {is} gut
                        {print} 'Richard springt gerade noch rechtzeitig zurück in seine Zeitmaschine.'
                        {print} 'Michael gibt den Code ein und...'
                        {print} 'ZAP!'
                        {print} '...sind sie zurück in ihrer Garage.'
                    {else}
                        {print} 'Michael schreit LOS RICHARD! LAUF SCHNELLER!'
                        {print} 'Aber Richard ist zu langsam...'
                        {print} 'Der T-rex holt ihn ein und verschlingt ihn mit einem Biss.'
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Geschichte
                    In einer Geschichte kommt es manchmal vor, dass jemand ein Wort mehrmals hintereinander sagt. So zum Beispiel, wenn jemand um Hilfe ruft, oder etwas singt.
                    Solche Wiederholungen kannst Du mit dem Befehl `{repeat}` in Deine Geschichte einfügen. Repeat bedeutet wiederholen.

                    ## Challenge
                    Kannst du deine eigene Geschichte mit Wiederholungen schreiben?

                example_code: |
                    ```
                    {print} 'Der Prinz rief immer wieder um Hilfe.'
                    {repeat} 5 {times} {print} 'Hilfe!'
                    {print} 'Warum hilft mir niemand?'
                    ```

                start_code: "{repeat} 5 {times} {print} 'Hilfe!'"
            5:
                story_text: |
                    ## Geschichte
                    In diesem Level programmierst Du unterschiedliche Enden, was Deine Geschichte noch spannender werden lässt.

                    ## Challenge
                    Denke Dir einfach eine Geschichte mit zwei möglichen Enden aus, zum Beispiel:

                    - Die Prinzessin läuft durch den Wald.
                    - Sie begegnet einem Monster.

                    - Schönes Ende: Sie zieht ihr Schwert und das Monster ergreift die Flucht.
                    - Nicht so schönes Ende: Das Monster frisst die Prinzessin.

                    Du kannst auch wieder sicherstellen, dass ein Name eingegeben werden kann. Das funktioniert genau wie in den vorherigen Levels. Wenn Du das mit einem `{if}` kombinierst, dann hast Du bereits ein richtiges Programm!

                example_code: |
                    ```
                    name {is} {ask} 'Wer läuft durch den Wald?'
                    {print} name ' läuft durch den Wald.'
                    {print} name ' begegnet einem Monster.'
                    ende {is} {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} ende {is} gut {print} name ' zieht ihr Schwert und das Monster ergreift die Flucht.'
                    {else} {print} 'Das Monster frisst ' name '.'
                    ```
                start_code: "{print} 'Deine Geschichte beginnt genau hier.'"
            4:
                story_text: |
                    ## Geschichte
                    Vielleicht ist dir aufgefallen, dass es in den vorigen Leveln noch ein Problem gab. Hast du versucht, einen Satz mit dem Wort Name zu schreiben? Z.B. `{print}` mein Name ist Name.
                    In diesem Level kannst du das lösen. Du musst alles, was du ausgeben möchtest, in einfache Anführungszeichen setzen.

                example_code: |
                    ```
                    Name {is} Hans
                    {print}  _ Der Name der Hauptfigur lautet _ Name
                    {print} Name  _ läuft nun in den Wald hinein _
                    {print} Name _ fürchtet sich ein wenig _
                    Tiere {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Da hört er plötzlich ein _ Tiere {at} {random}
                    {print} Name _ erschrickt. Es spukt in diesem Wald _
                    ```
                start_code: "{print} 'Deine Geschichte wird hier gedruckt!'"
            3:
                story_text: |
                    ## Geschichte
                    In Level 3 wird es etwas witziger. Du kannst nun etwas ganz zufälliges zu Deiner Geschichte hinzufügen. Ein beliebiges Monster, ein Tier oder ein Hindernis. Das funktioniert so:
                start_code: "{print} Deine Geschichte"
                example_code: |
                    ```
                    Tiere {is} 🦔, 🐿, 🦉, 🦇
                    {print} Er hört jetzt ein Tiergeräusch von Tiere {at} {random}
                    ```
                story_text_2: |
                    Der Befehl `{add}` könnte auch nützlich werden in deiner Geschichte.

                example_code_2: |
                    ```
                    {print} Er hört ein Geräusch
                    Tiere {is} 🐿, 🦔, 🦇, 🦉
                    Tier {is} {ask} Was denkst du ist es?
                    {add} Tier {to_list} Tiere
                    {print} Es war das Tiere {at} {random}
                    ```
                story_text_3: |
                    Das ist ein Beispiel für den `{remove}` Befehl in deiner Geschichte

                    ## Challenge
                    Kannst du die 3 neuen Befehle `{at} {random}`, `{add} {to}` und `{remove} {from}` in deiner eigenen Geschichte verwenden?
                example_code_3: |
                    ```
                    {print} Sein Rucksack wurde viel zu schwer.
                    {print} Drinnen waren eine Flasche Wasser, eine Taschenlampe und ein Ziegelstein.
                    Rucksack {is} Wasser, Taschenlampe, Ziegelstein
                    rauswerfen {is} {ask} Welchen Gegenstand soll er rauswerfen?
                    {remove} rauswerfen {from} Rucksack
                    ```
            15:
                story_text: |
                    ## Geschichte
                    Mit der `{while}`-Schleife kannst Du Deine Geschichten noch interessanter gestalten. So kannst Du zum Beispiel mit `{while} Spiel {is} 'läuft'` Dein Spiel so lange laufen lassen, bis es tatsächlich vorbei ist.
                    Oder Du lässt die Spieler mit `{while} Schwert {is} 'verloren'` so lange weiter suchen, bis sie etwas finden.

                example_code: |
                    ```
                    Schlüssel = 'verloren'
                    {print} 'Du stehst in Deinem Garten, hast jedoch Deine Schlüssel verloren.'
                    {print} 'Wo willst Du nach ihnen suchen?'
                    {print} 'Wähle zwischen: Baum, Blumenbeet, Stein, Briefkasten'
                    {while} Schlüssel == 'verloren'
                        Ort = {ask} 'Wo willst Du suchen?'
                        {if} Ort == 'Blumenbeet'
                            {print} 'Ah, hier sind sie!'
                            Schlüssel = 'gefunden'
                        {else}
                            {print} 'Nope, sie sind nicht beim ' Ort '.'
                    {print} 'Jetzt kannst Du ins Haus!'
                    ```
                start_code: "# setze hier deinen Code hin"
            13:
                story_text: |
                    ## Geschichte
                    Mit den Befehlen `{and}` und `{or}` kannst Du Deine Geschichte etwas abkürzen. Sieh Dir zum Beispiel noch einmal die Geschichte mit dem Drachen an.

                    ## Challenge
                    Kannst Du dein eigenes Adventure-Minispiel wie dieses entwickeln?

                example_code: |
                    ```
                    Schwert = 'verloren'
                    Spiel = 'an'
                    {print} 'Unsere Heldin läuft durch den Wald.'
                    {print} 'Der Weg gabelt sich.'
                    {for} i {in} {range} 0 {to} 2
                        {if} Spiel {is} 'an'
                            Pfad = {ask} 'In welche Richtung soll sie gehen?'
                            {if} Pfad {is} 'links' {and} Schwert {is} 'gefunden'
                                {print} 'Unsere Heldin begegnet einem Drachen!'
                                {print} 'Zum Glück hat sie ein Schwert, um das Ungetüm zu besiegen!'
                                Spiel = 'aus'
                            {if} Pfad {is} 'links' {and} Schwert {is} 'verloren'
                                {print} 'Unsere Heldin begegnet einem Drachen, sie hat jedoch keine Waffe!'
                                {print} 'Sie wird vom Drachen besiegt...'
                                {print} 'Versuche es noch einmal.'
                                Spiel = 'aus'
                            {if} Pfad {is} 'rechts' {and} Schwert {is} 'gefunden'
                                {print} 'Das Schwert hast Du bereits gefunden. Hier gibt es nichts weiter zu entdecken.'
                                {print} 'Sie geht zurück.'
                            {if} Pfad {is} 'rechts' {and} Schwert {is} 'verloren'
                                {print} 'Unsere Heldin findet ein Schwert.'
                                {print} 'Das könnte sich noch als nützlich erweisen.'
                                Schwert = 'gefunden'
                    ```
                start_code: "# setze hier deinen Code hin"
    parrot:
        name: "Papagei"
        description: "Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!"
        default_save_name: "Papagei"
        levels:
            1:
                story_text: |
                    ## Papagei
                    Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!

                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei!
                    {ask} Wie lautet Dein Name?
                    {echo}
                    {echo}
                    ```
                start_code: "{print} Ich bin Hedy der Papagei"
                example_code_2: "```\n{print} Ich bin Hedy der Papagei\n{ask} _\n{echo}\n{echo}\n"
                story_text_2: "## Challenge\nKannst du den Papagei dazu bringen, eine andere Frage zu stellen? Fülle die Lücken im Beispiel aus!\n"
            2:
                story_text: |
                    ## Papagei
                    Lass Deinen zahmen Papageien noch etwas echter klingen!

                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei.
                    Name {is} {ask} Wie lautet Dein Name?
                    {print} Name
                    {sleep}
                    {print} Aaaaaak
                    {sleep}
                    {print} Name
                    ```
                start_code: "{print} Ich bin Hedy der Papagei!"
                story_text_2: "## Challenge\nDu kannst Variablen verwenden, damit der Papagei mehr als nur deinen Namen sagt. Kannst Du diesen Code vervollständigen?\n"
                example_code_2: "```\n{print} Ich bin Hedy der Papagei\nname {is} {ask} Wie heißt du?\n{print} name\n{sleep}\n{print} name\nNachname {is} {ask} Wie ist dein Nachname?\n_\n{sleep}\n_\n```\n"
            3:
                story_text: |
                    ## Papagei
                    Bringe Deinem Papageien mit dem Befehl `{add}` neue Wörter bei.
                    ## Challenge
                    Wie kannst Du deinen Papagei dazu bringen, mehrere Wörter zu sagen?

                example_code: |
                    ```
                    Wörter {is} Aaaaaaak, Hedy
                    {print} Bring deinem Papagei etwas bei!
                    neues_Wort {is} {ask} Welches Wort willst du ihm beibringen?
                    {add} neues_Wort {to_list} Wörter
                    {print} 🧒 Sag neues_Wort, Hedy!
                    {print} 🦜 Wörter {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Papagei
                    Belohne deinen Papagei, wenn er das richtige Wort sagt!
                    Vervollständige den Code, indem du die 4 fehlenden Befehle ergänzt.

                example_code: |
                    ```
                    Wörter {is} Aaaaaaak, Hedy
                    {print} 'Bring deinem Papagei etwas bei!'
                    neues_Wort {is} {ask} 'Welches Wort willst du ihm beibringen?'
                    {add} neues_Wort {to_list} Wörter
                    gesagtes_Wort {is} Wörter {at} {random}
                    {print} '🧒 Sag ' neues_Wort ', Hedy!'
                    {print} '🦜 ' gesagtes_Wort
                    _ gesagtes_Wort {is} neues_Wort _ '🧒 Gut gemacht, Hedy! 🍪'
                    _ _ '🧒 Nein, Hedy! Sag ' neues_Wort
                    ```
                start_code: "# setze hier deinen Code hin"
    songs:
        name: "Singe ein Lied!"
        description: "Gib einen Songtext aus"
        default_save_name: "Song"
        levels:
            12:
                story_text: |
                    ## Lieder
                    Jetzt machen wir es uns richtig einfach und programmieren 'Wenn Du glücklich bist, dann klatsche in die Hand'. Alles, was wir tun möchten, wenn wir glücklich sind, speichern wir in einer Variablen. Sieh es Dir an:

                    ## Herausforderung
                    Kannst du die richtige Anzahl Leerzeichen zum Einrücken hinzufügen, damit das Lied richtig spielt?
                    Beachte: Nicht jede Zeile braucht Einrückung.

                example_code: |
                    ```
                    Aktionen = 'klatsche in die Hand', 'stampfe mit dem Fuß', 'ruf Hurra'
                    _ {for} Aktion {in} Aktionen
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'Wenn Du glücklich bist'
                    _ {print} Aktion
                    _ {print} 'Zeig mir, wenn du bei mir bist, wie dir so zumute ist.'
                    _ {print} 'Wenn Du glücklich bist'
                    _ {print} Aktion
                    ```
                start_code: "# setze hier deinen Code hin"
            11:
                story_text: |
                    ## Lieder
                    In diesem Level nutzt du den Befehl `{for} i {in} {range}` für Lieder, in denen gezählt wird, wie z.B. bei 'Fünf kleine Affen'.

                    ## Herausforderung
                    Fülle die Lücken und mach, dass der Code funktioniert.

                example_code: |
                    ## Fünf kleine Affen
                    ```
                    _ _ _ _ 5 _ 1
                        {print} i ' kleine Affen springen auf dem Bett'
                        {print} 'Einer fiel herunter und stieß sich am Brett'
                        {print} 'Da rief Mama den Doktor und der Doktor hat gesagt'
                        {if} i {is} 1
                            {print} 'BRING DIESE AFFEN ENDLICH INS BETT!'
                        {else}
                            {print} 'KEIN AFFE SPRINGT MEHR AUF DEM BETT!'
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Lieder
                    In diesem Level kannst du ganz einfach das Kinderlied 'Fünf kleine Affen' programmieren. Kriegst du die letzte Strophe erstellen?
                    Du kannst auch das ganze Lied über den Babyhai (mit allen Mitgliedern der Haifamilie) in nur sechs Zeilen machen, indem du `{for}` benutzt!
                    Oder du kannst "Old MacDonald hat 'ne Farm" mit all den verschiedenen Tieren machen.



                    ## Herausforderungen
                    Kannst du die Strophe der Affen auf dem Bett hinzufügen, wo nur noch ein Affe übrig ist?

                    Kannst du den Babyhai-Code noch kürzer machen, indem du `{repeat}` verwendest?

                    Kannst du neue Tiere zu "Old MacDonald hat 'ne Farm" hinzufügen?

                example_code: |
                    ## Fünf kleine Affen springen auf dem Bett
                    ```
                    Affen = 5, 4, 3, 2
                    {for} Affe {in} Affen
                        {print} Affe ' kleine Affen springen auf dem Bett'
                        {print} 'Einer fiel herunter und stieß sich am Brett'
                        {print} 'Mama rief den Arzt und der Arzt hat gesagt'
                        {print} 'KEIN AFFE SPRINGT MEHR AUF DEM BETT!'
                    ```

                    ## Baby Hai
                    ```
                    Haie = Baby, Mami, Papi, Omi, Opi
                    {for} Hai {in} Haie
                        {print} Hai ' Hai tututututudu'
                        {print} Hai ' Hai tututututudu'
                        {print} Hai ' Hai tututututudu'
                        {print} Hai ' Hai'
                    ```
                    ## Old MacDonald hat ne Farm
                    ```
                    Tiere = Schweine, Hunde, Kühe
                    {for} Tier {in} Tiere
                        {if} Tier {is} Schweine
                            Geräusch = grunz
                        {if} Tier {is} Hunde
                            Geräusch = wuff
                        {if} Tier {is} Kühe
                            Geräusch = muh
                        {print} 'Old MacDonald hat ne Farm'
                        {print} 'I A I A O!'
                        {print} 'und auf der Farm da gibt es ' Tier
                        {print} 'I A I A O!'
                        {print} 'mit nem ' Geräusch Geräusch ' hier'
                        {print} 'und nem ' Geräusch Geräusch ' da'
                        {print} 'hier ein ' Geräusch
                        {print} 'dort ein ' Geräusch
                        {print} 'überall ein ' Geräusch Geräusch
                    ```
                start_code: "# setze hier deinen Code hin"
            8:
                story_text: |
                    ## Lieder
                    In einem vorigen Level hast du das Lied über die Bierflaschen programmiert. Du hast eine Strophe geschrieben und musstest sie dann 99 mal kopieren. In diesem Level kannst du das Lied 99 mal wiederholen, indem du nur eine einfache Zeile hinzufügst!
                    Weißt du welche Zeile Code du in die Lücken füllen musst?

                example_code: |
                    ```
                    Strophe = 99
                    _ _ _
                        {print} Strophe ' Flaschen Bier an der Wand'
                        {print} Strophe ' Flaschen Bier'
                        {print} 'Nimm eine runter, reich sie herum'
                        Strophe = Strophe - 1
                        {print} Strophe ' Flaschen Bier an der Wand'
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Lieder
                    In Liedern wiederholt sich oft einiges. So auch im Lied "Baby Hai"! Wenn Du es singst, singst Du eigentlich immer das gleiche:

                    Baby Hai tututudutudu <br>
                    Baby Hai tututudutudu <br>
                    Baby Hai tututudutudu <br>
                    Baby Hai 

                    Mit dem Befehl `{repeat}` kannst Du den Song abkürzen. Kannst Du den Code vervollständigen?

                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Hai tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    Du kannst natürlich auch andere Lieder programmieren. In vielen Liedern wiederholt sich etwas. Fällt Dir eins ein?

                start_code: "{print} 'Baby Hai'"
            6:
                story_text: |
                    ## Lieder
                    In Liedern wiederholt sich oft einiges. Manchmal beinhaltet die Wiederholung auch, dass etwas gezählt wird.
                    So zum Beispiel im Lied über die Bierflaschen. Dies ist eigentlich ein englisches Lied und hat den Titel "99 bottles of beer". Dieses Lied kannst du mit ein klein wenig Mathematik programmieren.

                    Tipp: Nutze die Laut-Vorlesen-Funktion um Hedy das Lied für dich singen zu lassen.

                    ## Herausforderung
                    Du kannst nun die Zeilen 2 bis 7 so oft wie du möchtest wiederholen, indem du sie kopierst.

                example_code: |
                    ```
                    Strophe = 99
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {sleep}
                    ```

                start_code: "{print} 'Lass uns singen!'"
                story_text_2: "## 5 Kleine Affen springen auf dem Bett\nDieses Kinderlied zählt runter, von 5 kleinen Affen bis zu 1 Affe.\nWenn du die Zeilen 2 bis 7 kopierst und unter dem Code einfügst, kannst du das ganze Lied singen!\n"
                example_code_2: "```\nnummer = 6\nnummer = nummer - 1\nprint nummer ' kleine Affen springen auf dem Bett'\nprint 'Einer fiel runter und stieß sich den Kopf'\nprint 'Mama rief den Arzt und der Arzt sagte'\nprint 'KEINE KLEINEN AFFEN SPRINGEN MEHR AUF DEM BETT!'\nsleep\n```\n"
            16:
                story_text: |
                    ## Lieder
                    In diesem Level kannst Du 'Old MacDonald hat ne Farm' sogar noch schneller programmieren. Du kannst jedem Tier das richtige Geräusch zuordnen, indem Du sie an die selbe Stelle einer Liste speicherst.
                    Vielleicht kennst Du ja auch schon das englischsprachige Lied 'The Drunken Sailor'. Hierfür benötigst Du nur 8 Zeilen Code. Sieh es Dir an!

                example_code: |
                    ## Old MacDonald hat ne Farm
                    ```
                    Tiere = ['Schweine', 'Hunde', 'Kühe']
                    Geräusche = ['grunz', 'wuff', 'muh']
                    {for} i {in} {range} 1 {to} 3
                        Tier = Tiere[i]
                        Geräusch = Geräusche[i]
                        {print} 'Old MacDonald hat ne Farm'
                        {print} 'I A I A O!'
                        {print} 'und auf der Farm da gibt es ' Tier
                        {print} 'I A I A O!'
                        {print} 'mit nem ' Geräusch Geräusch ' hier'
                        {print} 'und nem ' Geräusch Geräusch ' da'
                        {print} 'hier ein ' Geräusch
                        {print} 'dort ein ' Geräusch
                        {print} 'überall ein ' Geräusch Geräusch
                    ```

                    ## Drunken Sailor
                    ```
                    Zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} Zeile {in} Zeilen
                        {for} i {in} {range} 1 {to} 3
                            {print} Zeile
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: "# setze hier deinen Code hin"
    turtle:
        name: "Schildkröte"
        description: "Mal dein eigenes Bild"
        default_save_name: "Schildkröte"
        levels:
            1:
                story_text: |
                    ## Lass uns zeichnen
                    Du kannst mit Hedy auch zeichnen. Indem Du Drehungen und Linien kombinierst, kannst Du ein Quadrat oder eine Treppe zeichnen.

                    Mit `{forward}` ziehst Du eine Linie vorwärts. Die Zahl dahinter legt fest, wie weit die Schildkröte wandert. Mit `{turn} {right}` ("drehe Dich nach rechts") macht sie eine Viertelumdrehung im Uhrzeigersinn, mit `{turn} {left}` ("drehe Dich nach links") entgegen dem Uhrzeigersinn. Wenn du zurück laufen möchtest, benutzt du den `{forward}`-Befehl mit einer negativen Zahl., wie zum Beispiel `{forward} -100`.

                    ## Challenge
                    Das ist der Anfang einer kleinen Treppe. Kannst Du sie so zeichnen, dass sie 5 Stufen hat?

                example_code: |
                    ```
                    {turn} {right}
                    {forward} 50
                    {turn} {left}
                    {forward} 50
                    ```


                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    ## Schildkröte
                    In diesen level kann du Variablen nutzen, um die Schildkröte interaktiv zu machen. Du kannst zum Beispiel die Spieler fragen, wie viele Schritte die Schildkröte machen soll.

                example_code: |
                    ```
                    {print} Formen zeichnen
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                start_code: |-
                    {print} Schildkrötenrennen!
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                story_text_2: "In Level 1 konnte sich die Schildkröte außerdem nur nach links oder rechts drehen. Das ist ein bisschen langweilig!\nIn level 2 kann sie ihre Nase in alle Richtungen strecken.\n\nBenutze 90 für eine Vierteldrehung. Dies wird Grad genannt. Eine komplette Drehung sind 360 Grad.\nKannst du mit diesem Code eine Figur erstellen? Vielleicht einen Kreis oder ein Dreieck?\n\n## Herausforderung\nKannst du mit diesem Code eine Form gestalten? Vielleicht ein Dreieck oder einen Kreis?\n"
                example_code_2: "```\n{print} Figuren werden gezeichnet\nwinkel {is} 90\n{turn} winkel\n{forward} 25\n{turn} winkel\n{forward} 25\n```\n"
            3:
                story_text: |
                    ## Suchende Schildkröte
                    In diesem Level kannst Du `{at} {random}` nutzen, während die Schildkröte etwas zeichnet. Durch eine zufällige Wahl nimmt die Schildkröte jedes Mal einen anderen Weg.
                    Nutze `{at} {random}` um einen zufälligen Wert aus einer Liste zu wählen.

                    ## Herausforderung
                    Kannst du die Zeilen 2 und 3 kopieren und wieder einfügen, um einen längeren, zufälligen Pfad zu erzeugen?

                example_code: |
                    ```
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
                    ```

                start_code: |-
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
            4:
                story_text: |
                    ## Lass uns zeichnen
                    In Level 4 musst Du bei `{print}` und `{ask}` Anführungszeichen nutzen. Das gilt auch für's Zeichnen!

                example_code: |
                    ```
                    {print} _ Formen zeichnen _
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```

                start_code: |-
                    {print} 'Formen zeichnen'
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25

                story_text_2: "## Farben\nDu kannst auch die Farben der Linien mit dem Befehl `{color}` ändern. Sieh dir das Beispiel an.\nDu kannst auch den Befehl `{color} {white}` benutzen, um unsichtbare Linien zu ziehen. Du kannst diese weißen Linien nutzen, um die Schildkröte irgendwo auf dem Bildschirm hin zu bewegen bevor du zu malen anfängst.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: |
                    ## Lass uns zeichnen
                    In Level 5 kannst Du mit dem Befehl `{if}` Entscheidungen treffen. Du kannst Dich zum Beispiel zwischen verschiedenen Formen entscheiden.

                example_code: |
                    ```
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'Möchtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120
                    {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                start_code: |-
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'Möchtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120 {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
            8:
                story_text: |
                    ## Lass uns zeichnen
                    Jetzt, da wir einzelne Linien wiederholen können, fällt uns das Zeichnen einzelner Formen leichter.
                    Wir setzen den Winkel einmalig und nutzen dann die Variable im `{repeat}`.

                example_code: |
                    ```
                    Winkel = 90
                    {repeat} 10 {times}
                        {turn} Winkel
                        {forward} 50
                    ```
                story_text_2: |
                    ## Interaktiv
                    Wir können auch das Programm verbessern, das verschiedene Formen zeichnet.
                    Bekommst Du raus, wie weit die Schildkröte sich drehen muss? Vervollständige den Code und sie zeichnet jedes Vieleck, das Du möchtest.

                example_code_2: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {repeat} Ecken {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |-
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
            7:
                story_text: |
                    ## Lass uns zeichnen!
                    In diesem Level kannst Du mit dem Befehl `{repeat}` eine Code-Zeile wiederholen.

                example_code: |
                    ```
                    {print} 'Formen zeichnen'
                    _ 3 _ {forward} 10
                    ```
                start_code: |-
                    {print} 'Formen zeichnen'
                    {repeat} 3 {times} {forward} 10

            6:
                story_text: |
                    ## Lass uns zeichnen!
                    In diesem Level nutzen wir Berechnungen, um verschiedene Formen zu zeichnen.
                    Du hast vielleicht schon gelernt, dass eine komplette Umdrehung 360° sind. Falls nicht, dann weißt Du es jetzt!
                    Deswegen benutzen wir immer 90° für ein Rechteck. 360 geteilt durch 4 ist 90.
                    Jetzt, da wir wissen wie Mathe mit Hedy geht, können wir alle Formen zeichnen, die wir wollen!

                example_code: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    ```
                start_code: |-
                    {print} 'Formen zeichnen'
    dishes:
        name: "Abwasch?"
        description: "Nutze den Computer, um zu sehen, wer abwaschen muss (Beginne bei Level 3)"
        default_save_name: "Abwasch"
        levels:
            10:
                story_text: |
                    ## Abwasch
                    In diesem Level kannst Du deinen Abwaschplan noch etwas verbessern.

                example_code: |
                    ```
                    Wochentage = Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    _ Tag _ Wochentage
                        {print} Familienmitglieder {at} {random} ' ist am ' Tag ' mit dem Abwasch dran.'
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Abwaschen
                    Mit dem Befehl `{repeat}` kannst Du Code-Zeilen wiederholen. Das kannst Du nutzen, um für jeden Tag der Woche zu bestimmen, wer abwäscht.

                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    {repeat} _ _ {print} _ ' ist mit dem Abwasch dran'
                    ```
                start_code: "{print} 'Wer macht den Abwasch?'"
            6:
                story_text: |
                    ## Abwaschen
                    Wer ist wie oft mit dem Abwasch dran? Ist es gerecht verteilt? In diesem Level kannst Du mitzählen.

                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Emmas_Anzahl = 0
                    Tellerwäscher = Familienmitglieder {at} {random}
                    {print} 'Den Abwasch macht ' Tellerwäscher
                    {if} Tellerwäscher {is} Emma Emmas_Anzahl = Emmas_Anzahl + 1
                    {print} 'Emma ist diese Woche ' Emmas_Anzahl ' Mal mit dem Abwasch dran'
                    ```

                    Jetzt kannst Du die Zeilen ein paar Mal kopieren (z.B. weitere 6 Mal für die ganze Woche), um einen Plan für die ganze Woche aufzustellen.
                    Kannst Du den Code für eine ganze Woche schreiben?

                story_text_2: |
                    ## Mache es gerecht
                    Wenn Du ganz großes Pech hast, könnte Dich das vorigen Programm für die ganze Woche als Abwäscher bestimmen. Das ist ungerecht!
                    Um das System gerechter zu gestalten, kannst Du mit dem Befehl `{remove}` die ausgewählt Person von der Liste entfernen. Auf diese Weise musst Du nicht nochmal abwaschen, bis jeder einmal dran war.

                    Montag and Dienstag sind schon vorbereitet! Kannst Du den Rest der Woche vervollständigen?
                    Und... Kannst Du dir etwas einfallen lassen für den Fall, dass die Liste leer ist?

                example_code_2: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Tellerwäscher = Familienmitglieder {at} {random}
                    {print} 'Am Montag macht ' Tellerwäscher ' den Abwasch.'
                    {remove} Tellerwäscher {from} Familienmitglieder
                    Tellerwäscher = Familienmitglieder {at} {random}
                    {print} 'Am Dienstag macht ' Tellerwäscher ' den Abwasch.'
                    {remove} Tellerwäscher {from} Familienmitglieder
                    ```

                start_code: "{print} 'Wer wäscht ab?'"
            5:
                story_text: |
                    ## Abwaschen
                    Mit dem Befehl `{if}` kannst Du noch etwas mehr Spaß haben, wenn Du die Auswahl auswertest. Du kannst Dein Programm auf die Auswahl, die der Computer trifft, reagieren lassen.

                    Kannst Du den Code so vervollständigen, dass er "So ein Pech" ausgibt, wenn Du dran bist und ansonsten "Zum Glück!"?
                    Vergiss die Anführungszeichen nicht!

                example_code: |
                    ```
                    Leute {is} Mama, Papa, Emma, Sophie
                    Tellerwäscher {is} Leute {at} {random}
                    {if} Tellerwäscher {is} Sophie {print} _ So ein Pech. Ich muss abwaschen. _ 
                    {else} {print} 'Zum Glück kein Abwasch, weil ' _ ' dran ist.'
                    ```
                start_code: "{print} 'Wer macht den Abwasch?'"
            4:
                story_text: |
                    ## Abwaschen
                    Mit Anführungszeichen kannst Du deine Abwaschplanung etwas verschönern.
                    Dieses Mal ist der Beispiel-Code noch nicht ganz vollständig.

                    Kannst Du den Code vervollständigen, indem Du die Lücken ausfüllst? Jede Lücke muss mit einem Wort oder Symbol ersetzt werden.

                    Tipp: Denke an die Anführungszeichen!
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} _ den Abwasch macht heute _
                    {sleep}
                    {print} Familienmitglieder {at} {random}
                    ```
                start_code: "{print} 'Wer macht den Abwasch?'"
            3:
                story_text: |
                    ## Abwaschen
                    Gibt es bei euch zu Hause immer Streit, wer mit dem Abwasch dran ist und wer den Müll raus bringen muss?
                    Dann kannst du den Computer völlig fair entscheiden lassen. Das kannst du in diesem Level programmieren.
                    Zunächst legst du eine Liste deiner Familienmitglieder an. Anschließend wählst du mit `{at} {random}` zufällig jemanden von der Liste aus.

                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} Familienmitglieder {at} {random}
                    ```
                story_text_2: |
                    ## Hacke den Geschirrspüler!
                    Keine Lust auf selbst abwaschen? Hacke das Spülmaschinenprogramm und entferne deinen Namen von der Liste mit dem `{remove}` `{from}` Befehl.

                example_code_2: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    dein_Name {is} {ask} Wer bist Du?
                    _ dein_Name _ Familienmitglieder
                    {print} _ _ _ ist heute mit dem Abwasch dran.
                    ```
                start_code: "{print} Wer macht den Abwasch?"
    dice:
        name: "Würfel"
        description: "Erstelle Deinen eigenen Würfel"
        default_save_name: "Würfel"
        levels:
            10:
                story_text: |
                    ## Würfel
                    Brauchen alle zu lange, um zu würfeln? In diesem Level kannst du Hedy alle Würfel auf einmal werfen lassen.
                    Kannst du die korrekte Zeile Code in die Lücken füllen?

                example_code: |
                    ```
                    Spielerliste = Ann, John, Jesse
                    Würfelseiten = 1, 2, 3, 4, 5, 6
                    _
                        {print} Spieler ' würfelt ' Würfelseiten {at} {random}
                        {sleep}
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Würfel
                    Auch in Level 7 kannst Du wieder einen Würfel programmieren. Mit dem Befehl `{repeat}` kannst Du ganz einfach eine ganze Handvoll Würfel werfen.
                    Versuche, den Beispiel-Code zu vervollständigen. Die Unterstriche müssen durch mehrere Befehle und Zeichen ersetzt werden.

                    Vielleicht willst Du aber auch einen ganz anderen Würfel erstellen. Das geht natürlich auch!

                example_code: |
                    ```
                    Würfelseiten = 1, 2, 3, 4, 5, Regenwurm
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: "{print} 'Was wird der Würfel diesmal anzeigen?'"
            6:
                story_text: |
                    ## Würfel
                    Hier kannst Du auch wieder der Regenwurmwürfel erstellen, aber hier kannst Du dazu auch noch berechnen, wie viele Punkte gewürfelt wurden.
                    Vielleicht weißt Du ja, dass der Wurm 5 Punkte zählt. Jetzt kannst Du nach jedem Wurf direkt berechnen, wie viele Punkte Du bekommst.
                    Hier ist der Code zur Berechnung der Punkte für einen Würfel:

                    ## Herausforderung
                    Kannst du den Code verändern, um die Gesamtpunktzahl für 8 Würfel zu bekommen? Um das zu machen musst du einige Zeilen Code kopieren und einfügen.

                example_code: |
                    ```
                    Würfelseiten = 1, 2, 3, 4, 5, Regenwurm
                    Punkte = 0
                    Wurf = Würfelseiten {at} {random}
                    {print} 'Du hast ' Wurf ' gewürfelt.'
                    {if} Wurf {is} Regenwurm Punkte = Punkte + 5 {else} Punkte = Punkte + Wurf
                    {print} 'Jetzt hast Du ' Punkte ' Punkte.'
                    ```

                start_code: "print 'Was wird der Würfel diesmal anzeigen?'"
                example_code_2: "## Vorschau\n\nIst es dir gelungen, die Gesamtpunktzahl für 8 Würfel auszurechnen? Dafür musstest du ganz schön viel hin und her kopieren, oder?In Level 7 machen wir das einfacher!\n"
            5:
                story_text: |
                    ## Würfel
                    Auch den Würfel kannst Du in diesem Level nochmal programmieren, diesmal mit dem `if`.
                    Vervollständige den Beispiel-Code, sodass er ausgibt "Du kannst aufhören zu würfeln", sobald Du einen Regenwurm gewürfelt hast.

                    Vielleicht möchtest Du auch einen Würfel aus einem ganz anderen Spiel nachbauen. Das ist auch super! Dann überlege Dir selbst eine Reaktion. Zum Beispiel 'ja' bei einer 6 und 'schade' für alles andere.

                example_code: |
                    ```
                    Würfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    Wurf {is} _
                    print 'Du hast ' _ ' gewürfelt'
                    {if} _ {is} Regenwurm {print} 'Du kannst aufhören zu würfeln.' _ print 'Du musst es nochmal versuchen!'
                    ```
                start_code: "{print} 'Was zeigt der Würfel diesmal?'"
            4:
                story_text: |
                    ## Würfel
                    In diesem Level können wir Sätze mit dem Würfelwert im Satz bilden, natürlich mit Anführungszeichen.
                    Diesmal ist der Beispiel-Code nicht ganz vollständig. Kannst Du den Code vervollständigen?

                example_code: |
                    ```
                    Würfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    {print} _ Der Würfel zeigt  _
                    {print} _ _ _ <- Hier musst Du die Auswahl programmieren.
                    ```

                start_code: "{print} 'Was zeigt der Würfel diesmal?'"
            3:
                story_text: |
                    ## Würfel
                    In diesem Level können wir von einer Liste wählen. Damit können wir den Computer eine Seite des Würfels wählen lassen.
                    Schaut mal in die Brettspiele in Eurem Schrank zu Hause.
                    Haben einige davon (besondere) Würfel? Die kannst Du auch mit diesem Code nachbauen.
                    Zum Beispiel den Würfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf.

                    ![Würfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)

                example_code: |
                    ```
                    Würfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    {print} Würfelseiten {at} {random}
                    ```

                start_code: "{print} Was zeigt der Würfel diesmal?"
                story_text_2: "## Herausforderung\nDie Würfel im Beispiel oben sind die Würfel für ein bestimmtes Spiel. Kannst du normale Würfel machen?\nOder andere Spezialwürfel von einem anderen Spiel?\n"
                example_code_2: "```\nAuswahlmöglichkeiten {is} _\n```\n"
            15:
                story_text: |
                    ## Würfel
                    In diesem Spiel musst Du in möglichst wenig Versuchen eine 6 würfeln.

                example_code: |
                    ```
                    Würfelseiten = 1, 2, 3, 4, 5, 6
                    {print} 'Wirf so schnell wie möglich eine 6!'
                    Wurf = 0
                    Versuche = 0
                    {while} Wurf != 6
                        Wurf = Würfelseiten {at} {random}
                        {print} 'Du hast eine ' Wurf ' gewürfelt.'
                        Versuche = Versuche + 1
                    {print} 'Ja! Du hast in ' Versuche ' Versuchen eine 6 gewürfelt.'
                    ```
                start_code: "# setze hier deinen Code hin"
    rock:
        name: "Schere, Stein, Papier"
        description: "Mache dein eigenes Schere, Stein, Papier-Spiel"
        default_save_name: "Stein"
        levels:
            1:
                story_text: |
                    ## Rock, paper, scissors
                    In level 1 you can start with a rock, paper, scissors  game.

                    With `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.

                example_code: |
                    ```
                    {print} Was wählst du?
                    {ask} Wähle aus Stein, Schere oder Papier
                    {echo} Also war deine Wahl:
                    ```
                start_code: "{print} Welcome to your own rock scissors paper!"
                story_text_2: "## Herausforderung\nAnstelle von Wörtern kannst du auch Emoji benutzen ✊✋✌\nKannst du Code erstellen, der Emoji benutzt?\n"
                example_code_2: "```\n{print} Was wählst du?\n{ask} Wähle aus _\n{echo} Also war deine Wahl:\n```\n"
            10:
                story_text: |
                    ## Schere, Stein, Papier
                    Bist du zu faul, um das Spiel selbst zu spielen? Lass Hedy es für dich spielen!
                    Du musst nur die Namen der Spieler ausfüllen.

                example_code: |
                    ```
                    Auswahl = rock, paper, scissors
                    Personen = _
                    {for} Spieler {in} Personen
                         {print} Spieler ' wählt ' Auswahl {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            9:
                story_text: |
                    ## Rock, paper, scissors
                    In this level you can program the whole rock, paper, scissors game by nesting the if-commands. Can you finish the code?
                example_code: |
                    ```
                    Auswahl {is} Schere, Stein, Papier
                    deine_Wahl {is} {ask} 'Was wählst du?'
                    {print} 'Du wählst ' deine_Wahl
                    Computer_Wahl {is} Auswahl {at} {random}
                    {print} 'Der Computer wählt ' Computer_Wahl
                    {if} Computer_Wahl {is} deine_Wahl
                        {print} 'Unentschieden'
                    {if} Computer_Wahl {is} 'Stein'
                        {if} deine_Wahl {is} 'Papier'
                            {print} 'Du gewinnst!'
                        {if} deine_Wahl {is} 'Schere'
                            {print} 'Du verlierst!'
                    # mach den Beispiel-Code fertig
                    ```
                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Rock, paper, scissors
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see if they are the same or different.
                    Will you finish the code?

                example_code: |
                    ```
                    Auswahl {is} Schere, Stein, Papier
                    Computer_Wahl {is} _
                    deine_Wahl {is} {ask} Was wählst du?
                    {print} 'Du wählst ' _
                    {print} 'Der Computer wählte ' _
                    {if} _ {is} _ {print} 'Unentschieden!' {else} {print} 'kein Unentschieden'
                    ```

                    Ersetze die Unterstriche (_) mit dem richtigen Code um zu sehen ob das Spiel unentschieden ausgeht.

                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            4:
                story_text: |
                    ## Rock, paper, scissors
                    In this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.
                    Do you complete the code by entering the correct commands or characters on the underscores?

                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _ The computer chose: _ _ {at} _
                    ```
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            3:
                story_text: |
                    ## Rock, paper, scissors

                    In this level we can enter lists and choose things from them.
                    You first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.
                    For example, you can let the computer pick from rock, paper and scissors.

                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                start_code: "{print} Welcome to your own rock scissors paper!"
                story_text_2: "## Herausforderung\nJetzt hast du nur einen Spieler. Kannst du einen zweiten Spieler hinzufügen?\nDu kannst sogar Variablen benutzen um Spieler 1 und Spieler 2 zu benennen.\n"
                example_code_2: "```\nAuswahl {is} Stein, Schere, Papier\n{print} Spieler 1 wählt... Auswahl {at} {random}\n{print} Spieler 2 _\n```\n"
            2:
                story_text: |
                    ## Schere, Stein, Papier
                    In diesem Level kannst du üben, Variablen zu benutzen, damit du im nächsten Level das Spiel Schere, Stein, Papier machen kannst!

                example_code: |
                    ```
                    _ {is} {ask} Stein, Schere oder Papier?
                    {print} Ich wähle
                    ```
                start_code: "# setze hier deinen Code hin"
            15:
                story_text: |
                    ## Schere, Stein, Papier
                    Spiele, bis du den Computer besiegst! Aber mach zuerst den Beispiel-Code fertig...

                example_code: |
                    ```
                    gewonnen = 'nein'
                    Auswahl = 'Schere', 'Stein', 'Papier'
                    {while} gewonnen == 'nein'
                        deine_Wahl = {ask} 'Was wählst du?'
                        Computer_Wahl = Auswahl {at} {random}
                        {print} 'Du wähltest ' deine_Wahl
                        {print} 'Der Computer wählte ' Computer_Wahl
                        {if} Computer_Wahl == deine_Wahl
                            {print} 'Unentschieden!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Schere'
                            {print} 'Du hast verloren!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Papier'
                            {print} 'Du hast gewonnen!'
                            gewonnen = 'ja'
                    _
                    ```
                start_code: "# setze hier deinen Code hin"
            13:
                story_text: |
                    ## Rock, paper, scissors
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.

                example_code: |
                    ```
                    Optionen = 'Stein', 'Papier', 'Schere'
                    deine_auswahl = {ask} 'Was wählst du?'
                    computer_auswahl = Optionen {at} {random}
                    {print} 'Du wählst ' deine_auswahl
                    {print} 'Der Computer wählt ' computer_auswahl
                    {if} computer_auswahl {is} deine_auswahl
                        {print} 'Unentschieden'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Papier'
                        {print} 'Du gewinnst!'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Schere'
                        {print} 'Der Computer gewinnt!'
                    _
                    ```
                start_code: "# setze hier deinen Code hin"
    calculator:
        name: "Taschenrechner"
        description: "Programmiere einen Taschenrechner"
        default_save_name: "Taschenrechner"
        levels:
            14:
                story_text: |
                    ## Zahlen raten
                    In diesem Level kannst du das Spiel 'Zahlen raten' programmieren

                example_code: |
                    ```
                    {print} 'Rate welche Zahl'
                    Zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    Zahl = Zahlen {at} {random}
                    Spiel = 'läuft'
                    {for} i {in} {range} 1 {to} 10
                        {if} Spiel == 'läuft'
                            Vermutung = {ask} 'Welche Zahl denkst du ist es?'
                            {if} Vermutung > Zahl
                                {print} 'Niedriger!'
                            {if} Vermutung < Zahl
                                {print} 'Höher!'
                            {if} Vermutung == Zahl
                                {print} 'Du hast gewonnen!'
                                Spiel = 'vorbei'
                    ```
                start_code: "# setze hier deinen Code hin"
            12:
                story_text: |
                    ## Taschenrechner
                    Jetzt kannst du einen Taschenrechner bauen, der mit Dezimalzahlen umgehen kann. Fülle die Lücken, damit er ordentlich arbeitet!

                example_code: |
                    ```
                    Zahl1 = {ask} 'Was ist die erste Zahl?'
                    Zahl2 = {ask} 'Was ist die zweite Zahl?'
                    Antwort = _
                    {print} Zahl1 ' plus ' Zahl2 ' macht ' Antwort
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Taschenrechner
                    Dieses Taschenrechnerspiel hilft dir deine Multiplikationstabellen zu üben!

                    ## Herausforderung
                    Kannst du mehr Nummern zur Liste hinzufügen, um alle Multiplikationen zu üben?

                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' {times} ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: "# setze hier deinen Code hin"
            9:
                story_text: |
                    ## Taschenrechner
                    In den vorherigen Leveln hast du gelernt wie sich ein Taschenrechner machen lässt. In diesem Level kannst du diesen Code erweitern und zu einem kleinen Mathespiel machen.

                    ## Herausforderung
                    Kannst du Zeile 10 vervollständigen, um das Programm zum laufen zu bringen?

                example_code: |
                    ```
                    Punkte = 0
                    {repeat} 10 {times}
                        Nummern = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        Nummer1 = Nummern {at} {random}
                        Nummer2 = Nummern {at} {random}
                        richtige_antwort = Nummer1 * Nummer2
                        {print} 'Was ist ' Nummer1 ' mal ' Nummer2 '?'
                        Antwort = {ask} 'Tippe deine Antwort hier ein...'
                        {print} 'Deine Antwort ist' Antwort
                        {if} _ {is} _
                            Punkte = Punkte + 1
                    {print} 'Großartig gemacht! Dein Punktestand ist... ' Punkte ' von 10!'
                    ```
                start_code: "{print} 'Welcome to this calculator!'"
            6:
                story_text: |
                    ## Taschenrechner
                    Jetzt wo du rechnen kannst, kannst du selbst einen Taschenrechner erstellen!

                example_code: |
                    ```
                    nummer1 {is} {ask} 'Gib die erste Zahl ein:'
                    nummer2 {is} {ask} 'Gib die zweite Zahl ein:'
                    richtige_antwort = nummer1 * nummer2
                    {print} nummer1 ' mal ' nummer2 ' ist ' richtige_antwort
                    ```
                story_text_2: |
                    ## Herausforderung
                    Der Taschenrechner oben berechnet die Antwort für dich, aber du kannst auch ein Programm erstellen, um deine mathematischen Fähigkeiten zu testen, so wie dieses:
                    Fülle die Lücken aus, um es zu vervollständigen!

                example_code_2: |
                    ```
                    richtige_antwort = 11 * 27
                    antwort = {ask} 'Wie viel ist 11 mal 27?'
                    {if} antwort {is} _ {print} 'Gut gemacht!'
                    {else} {print} 'Falsch! Es war ' _
                    ```

                start_code: "print 'Welcome to this calculator!'"
                example_code_3: "```\nTabellen = 4, 5, 6, 8\nNummern = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nTabelle = Tabellen {at} {random}\nNummer = Nummern {at} {random}\nrichtige_antwort = Tabelle * Nummer\nAntwort = {ask} 'Wie viel ist ' Tabelle ' mal ' Nummer '?'\n{if} Antwort {is} richtige_antwort {print} 'okay'\n{else} {print} 'Fehler! Es war ' richtige_antwort\n```\n"
                story_text_3: "## Zufallszahlen\nDu kannst den Computer auch allein zufällige Summen rechnen lassen, indem du Zufall benutzt.\nSo wählst du einige Tabellen zum Üben, und daraus erhältst du immer eine andere Summe.\n"
            15:
                story_text: |
                    ## Calculator
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question if they answer incorrectly.

                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        
                        {while} answer != correct
                            {print} 'How much is ' number1 ' {times} ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: "# setze hier deinen Code hin"
    restaurant:
        name: "Restaurant"
        description: "Erstelle dein eigenes virtuelles Restaurant"
        default_save_name: "Restaurant"
        levels:
            1:
                story_text: |
                    ## Restaurant
                    Im ersten Level kannst du dein eigenes virtuelles Restaurant erstellen, und die Bestellungen deiner Gäste aufnehmen.

                example_code: |
                    ```
                    {print} Willkommen in Hedys Restaurant 🍟
                    {ask} Was würden Sie gerne bestellen?
                    {echo} Sie hätten also gerne
                    {print} Danke für Ihre Bestellung!
                    {print} Kommt sofort!
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "## Challenge\nFallen dir noch mehr Zeilen ein, die du zum Restaurant-Code hinzufügen kannst? Kannst du zum Beispiel die Gäste fragen ({ask}), was sie gerne trinken würden, wieviel es kosten wird, oder ihnen einen guten Appetit wünschen?\n"
            2:
                story_text: |
                    ## Restaurant
                    In Level 2 konntest du dein Restaurant mit Variablen erweitern. In Level 1 konnte Hedy nur die Bestellung einmal wiedergeben ({echo}) und sich nur das merken, was zuletzt bestellt wurde.
                    Jetzt kannst du Variablen verwenden und Hedy kann sich sowohl das Essen als auch den Belag merken!
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} Willkommen in Hedys Restaurant!\n{print} Heute gibt es Pizza oder Lasagne.\nEssen {is} {ask} Was würden Sie gerne essen?\n{print} Gute Wahl! Das ist mein Lieblingsessen!\nBelag {is} {ask} Hätten Sie die gerne mit Fleisch oder mit Gemüse?\n{print} Das Essen mit Belag ist auf dem Weg!\n```\n"
                story_text_2: "## Herausforderung\nKannst du den Code erweitern? Zum Beispiel, indem du Getränke zur Bestellung hinzufügst? Oder...?\n"
                example_code_2: "```\n{print} Willkommen in Hedys Restaurant!\n{print} Heute gibt es Pizza oder Lasagne.\nEssen {is} {ask} Was würden Sie gerne essen?\n{print} Gute Wahl! Das ist mein Lieblingsessen!\nBelag {is} {ask} Hätten Sie die gerne mit Fleisch oder mit Gemüse?\n{print} Das Essen mit Belag ist auf dem Weg!\nGetränke {is} _\n```\n"
            12:
                story_text: |
                    ## Restaurant
                    Ab diesem Level kannst du Dezimalzahlen verwenden, um deine Speisekarte realistischer zu machen.

                    ## Herausforderung
                    Kannst du dir Code ausdenken mit dem du deinen Freunden und deiner Familie 15% Rabatt geben kannst?

                example_code: |
                    ```
                    price = 0

                    food = ask 'What would you like to order?'
                    drink = ask 'What would you like to drink?'
                    if food is 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: "# setze hier deinen Code hin"
            11:
                story_text: |
                    ## Restaurant
                    Wir können `{for} i {in} {range} 1 {to} 5` nutzen, um die Bestellungen mehrerer Kundinnen und Kunden in angebrachter Reihenfolge zu `{print}`.

                    ## Herausforderung
                    Kannst du eine weitere Einrückungsherausforderung bestehen? Bringe den Code zum Laufen, indem du vor jede Zeile die richtige Anzahl an Leerzeichen zur Einrückung hinzufügst!

                example_code: |
                    ```

                    {print} 'Willkommen im Restaurant Hedy!'
                    Leute = {ask} 'Für wie viele Leute möchten Sie bestellen?'
                    {for} i {in} {range} 1 {to} Leute
                    _ {print} 'Bestellung Nummer ' i
                    _ Essen = {ask} 'Was möchten Sie essen?'
                    _ {print} Essen
                    _ {if} Essen {is} Fritten
                    _ Sauce = {ask} 'Welche Sauce möchten Sie dazu?'
                    _ {print} Sauce
                    _ Getränke = {ask} 'Was möchten Sie trinken?'
                    _ {print} Getränke
                    Preis = 4 * Leute
                    {print} 'Das macht ' Preis ' Euros, bitte!'
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Restaurant
                    In this level you'll learn how to easily ask your guests' orders in a short code.

                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```

                story_text_2: |
                    ## Herausforderung
                    Natürlich kannst auch für mehrere Personen bestellen!
                    Kannst du die richtige Anzahl an Leerzeichen zur Einrückung vor jeder Zeile hinzufügen, damit der Code richtig läuft?
                    TIPP: manche Zeilen brauchen gar keine Einrückung.

                example_code_2: |
                    ```
                    _ Kurse = Vorspeise, Hauptgericht, Nachtisch
                    _ Namen = Timon, Onno
                    _ {for} Name {in} Namen
                    _ {for} Kurs {in} Kurse
                    _ Essen = {ask} Name ', Was möchten Sie als ' Kurs '?'
                    _ {print} Name ' bestellt ' Essen ' als ' Kurs
                    ```
                start_code: "Gänge = Vorspeise, Hauptspeise, Dessert"
            9:
                story_text: |
                    ## Restaurant
                    In diesem Level kannst du nesting nutzen, um dein Restaurant realistischer und unterhaltsamer zu gestalten!
                    Du könntest zum Beispiel jemanden fragen, ob er eine Sauce zu den Pommes haben will, jedoch nicht zur Pizza!
                    Schau dir das Beispiel an und probiere es in deinem eingenen virtuellen Restaurant!

                    ## Herausforderung
                    Dies ist eine Herausforderung für echte Tüftler! Jede Zeile die eine Einrückung benötigt, hat eine Lücke bekommen.
                    Kannst du herausbekommen wie viel Einrückung jede Zeile benötigt, damit der Code richtig läuft?
                    Viel Erfolg!
                    TIPP: Wenn jemand Pizza bestellt, sollte Hedy nicht fragen, welche Sauce gewünscht ist.

                example_code: |
                    ```
                    {print} 'Willkommen in Hedys Restaurant!'
                    Leute = {ask} 'Wie viele Leute kommen heute?'
                    {print} 'Großartig!'
                    Preis = 0
                    {repeat} Leute {times}
                    _ Essen = {ask} 'Was möchten Sie bestellen?'
                    _ {print} Essen
                    _ {if} Essen {is} Fritten
                    _ Preis = Preis + 3
                    _ Sauce = {ask} 'Welche Sauce möchten Sie für die Fritten?'
                    _ {if} Sauce {is} keine
                    _ {print} 'keine Sauce'
                    _ {else}
                    _ Preis = Preis + 1
                    _ {print} 'mit ' Sauce
                    _ {if} Essen {is} Pizza
                    _ Preis = Preis + 4
                    {print} 'Das macht ' Preis ' Euro'
                    {print} 'Genießen Sie Ihre Mahlzeit!'
                    ```
                start_code: "# setze hier deinen Code hin"
            8:
                story_text: |
                    ## Restaurant
                    In diesem Level kannst du dein virtuelles Restaurant ausbauen, indem du mehrere Zeilen Code wiederholst. Das geht so:
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Willkommen in Hedys Restaurant!'\nGäste = {ask} 'Zu wie vielen kommen Sie heute zu uns?'\n{print} 'Großartig!'\n{repeat} Gäste {times}\n    Essen = {ask} 'Was würden Sie gerne bestellen?'\n    {print} Essen\n{print} 'Danke für Ihre Bestellung!'\n{print} 'Guten Appetit!'\n```\n"
                story_text_2: "## Challenge\nNatürlich kann dieser Code erweitert werden, mit mehr Speisen zur Auswahl, einem Getränkeangebot, und/oder mehreren Gängen. Füge also so viel Auswahl hinzu wie du magst!\n"
            7:
                story_text: |
                    ## Restaurant
                    In diesem Level hast du gelernt, wie du den Befehl `{repeat}` verwenden kannst, um eine Codezeile um eine bestimmte Anzahl zu wiederholen.
                    Du kannst das in deinem Restaurant verwenden um mehrere Leute nach ihren Essenwünschen zu fragen (`{ask}`).

                    ## Herausforderung
                    Kannst du die Lücken füllen? Hedy muss diese Frage so oft wiederholen wie Leute da sind. Wenn also 5 Leute da sind, muss die Frage 5 mal gestellt werden.
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Willkommen in Hedys Restaurant!'\nGäste = {ask} 'Zu wie vielen kommen Sie heute zu uns?'\n{repeat} _ {times} Essen = {ask} 'Was würden Sie gerne essen?'\n{print} 'Danke für Ihre Bestellung! Kommt sofort!'\n```\n"
            6:
                story_text: |
                    ## Restaurant
                    In diesem Level kannst du Mathe verwenden um den Gesamtpreis einer Bestellung auszurechnen. Da macht dein virtuelles Restaurant realistischer.

                example_code: |4

                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                story_text_2: |
                    Aber du kannst auch noch viel mehr Elemente zu deinem virtuellen Restaurant hinzufügen, zum Beispiel mehrere Essensgänge.

                    ## Challenge
                    Es gibt noch viel was du deinem virtuellen Restaurant hinzufügen könntest. Kannst du zum Beispiel...
                    - fragen ({ask}) wie viele Gäste kommen und den Preis mit dieser Anzahl multiplizieren?
                    - einen weiteren Gang hinzufügen?
                    - Gästen einen Rabatt geben wenn sie einen (geheimen) Gutscheincode eingeben?
                    - ein Kindermenü hinzufügen?
                    - dir noch weitere Ideen ausdenken?

                example_code_2: |4

                    In diesem Beispiel gibt es ein Drei-Gänge-Menü, was mehr Code erfordert sowie ein paar Zusätze in der Preisberechnung.
                    ```
                    {print} 'Willkommen in Hedys Restaurant'
                    {print} 'Hier ist die Speisekarte:'
                    {print} 'Unsere Vorspeisen sind Salat, Suppe und Carpaccio'
                    {print} 'Als Hauptspeise gibt es Pizza, Lasagne oder Spaghetti'
                    {print} 'Zum Desserts gibt es Brownie, Eis oder Milchshake'
                    Vorspeise = {ask} 'Welche Vorspeise hätten Sie gerne?'
                    Hauptspeise = {ask} 'Welche Hauptspeise hätten Sie gerne?'
                    Dessert = {ask} 'Was nehmen Sie als Dessert?'
                    Preis = 0
                    {if} Vorspeise {is} Suppe Preis = Preis + 6 {else} Preis = Preis + 7
                    {if} Hauptspeise {is} Pizza Preis = Preis + 10
                    {if} Hauptspeise {is} Lasagne Preis = Preis + 12
                    {if} Hauptspeise {is} Spaghetti Preis = Preis + 8
                    {if} Dessert {is} Brownie Preis = Preis + 7
                    {if} Dessert {is} Eis Preis = Preis + 5
                    {if} Dessert {is} Milchshake Preis = Preis + 4
                    {print} 'Sie haben ' Vorspeise ' , ' Hauptspeise ' und ' Dessert ' bestellt'
                    {print} 'Das macht dann ' Preis ' Euro, bitte'
                    {print} 'Danekschön, guten Appetit!'
                    ```

                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Restaurant
                    In diesem Level erlaubt dir der `{if}`-Befehl deinen Kundinnen oder Kunden Fragen zu stellen (`{ask}`) und verschiedene Antworten zu geben.
                    In dem unteren Beispiel siehst du, dass du die Kundin oder den Kunden fragen (`{ask}`) kannst, ob (`{if}`) sie oder er die Tagesgerichte erfahren möchte, und Hedy kann dementsprechend antworten.

                example_code: |
                    ```
                    {print} 'Willkommen in Hedys Restaurant'
                    Tagesgericht {is} {ask} 'Würden Sie gerne das heutige Tagesgericht erfahren?'
                    {if} Tagesgericht {is} ja {print} 'Das Tagesgericht ist Nudeln mit Tomatensoße.' {else} {print} 'Ok, kein Problem.'
                    Essen {is} {ask} 'Was würden Sie gerne essen?'
                    {print} 'Einmal ' Essen ', kommt sofort!'
                    Getränk {is} {ask} 'Was würden Sie gerne dazu trinken?'
                    {if} Getränk {is} Cola {print} 'Tut mir leid, die Cola ist aus!' {else} {print} 'Großartige Wahl!'
                    etwas {is} {ask} 'Hätten Sie gerne noch etwas?'
                    {print} 'Lassen Sie mich Ihre Bestellung noch einmal wiederholen...'
                    {print} 'Einmal ' Essen
                    {if} Getränk {is} Cola {print} 'und...' {else} {print} 'Einmal ' Getränk
                    {if} etwas {is} nein {print} 'Das ist alles!' {else} {print} 'Einmal ' etwas
                    {print} 'Danke für Ihre Bestellung und guten Appetit!'
                    ```

                start_code: "# setze hier deinen Code hin"
                story_text_2: "## Herausforderung\nFallen dir noch mehr Fragen ein, die du den Kundinnen oder Kunden stellen kannst (`{ask}`), wenn sie bestellen? Und kannst du dir ein paar Antworten auf ihre Fragen ausdenken, indem du den `{if}` Befehl verwendest?\n"
            4:
                story_text: |
                    ## Restaurant
                    In diesem Level musst du Anführungszeichen verwenden, wenn du die Befehle `{print}` oder `{ask}`benutzt.

                    ## Herausforderung
                    Füge die Anführungszeichen zum Code hinzu, um ihn zum Laufen zu bringen! Sei vorsichtig: Variablen sollten nicht in Anführungszeichen sein.
                start_code: "# setze hier deinen Code hin"
                example_code: "## Beispiel für Hedy's Restaurant\n```\n_ Füge Anführungszeichen in diesen Code ein _\n{print} Willkommen in Hedys Restaurant!\n{print} Heute gibt es Pizza oder Lasagne.\nEssen {is} {ask} Was würden Sie gerne essen?\n{print} Gute Wahl! Die  Essen  ist mein Favorit!\nBelag {is} {ask} Hätten Sie gerne Fleisch oder Gemüse als Belag?\n{print} Essen  mit  Belag  ist auf dem Weg!\nGetränke {is} {ask} Was würden Sie gerne dazu trinken?\n{print} Danke für Ihre Bestellung.\n{print} Ihre  Essen  und  Getränke  kommen sofort!\n```\n"
            3:
                story_text: |
                    ## Zufallsrestaurant
                    Fällt es dir schwer zu entscheiden, was du gerne zum Abendessen hättest? Du kannst das Hedy machen lassen!
                    Füge einfach Listen deiner Lieblingsgerichte (oder der von dir nicht so gemochten Gerichte) hinzu und Hedy kann zufällig für dich ein Abendessen auswählen.
                    Du kannst dir auch einen Spaß draus machen, indem du Hedy den Preis für dein Abendessen auswählen lässt! Was wird wohl rauskommen?
                    ## Herausforderung
                    Kannst du deine eigene Version des Zufallsrestaurants erstellen?

                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    ## Allergies
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.

                example_code_2: |
                    ```
                    {print} Überraschungs-Milchshake
                    Geschmacksrichtungen {is} Erdbeere, Schokolade, Vanille
                    Allergien {is} {ask} Bist du allergisch gegen irgendeine Geschmacksrichtung?
                    _
                    {print} Du bekommst einen Geschmacksrichtungen {at} {random} Milchshake
                    ```
                start_code: "# setze hier deinen Code hin"
            15:
                story_text: |
                    ## Restaurant
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.

                example_code: |
                    ```
                    {print} 'Willkommen bei McHedy'
                    mehr = 'ja'
                    {while} mehr == 'ja'
                        Bestellung = {ask} 'Was würden Sie gerne bestellen?'
                        {print} Bestellung
                        mehr = {ask} 'Würden Sie gerne noch etwas bestellen?'
                    {print} 'Dankeschön!'
                    ```
                start_code: "# setze hier deinen Code hin"
            13:
                story_text: |
                    ## Restaurant
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see if two things are both the case.

                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                story_text_2: |
                    Wir nutzen `{or}` um zu sehen, ob eine der beiden Sachen im Koffer ist.

                example_code_2: |
                    ```
                    drinks = {ask} 'What would you like to drink?'
                    {if} drinks {is} 'water' {or} drinks {is} 'juice'
                        {print} 'Thats a healthy choice'
                    ```
                start_code: "# setze hier deinen Code hin"
    fortune:
        name: "Wahrsagerin"
        description: "Lass Hedy die Zukunft voraussagen"
        default_save_name: "Wahrsagerin"
        levels:
            1:
                story_text: |
                    ## Fortune Teller
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her echo the players' answers.
                    Like this:

                example_code: |
                    ```
                    {print} Hallo, ich bin Hedy, die Wahrsagerin!
                    {ask} Wer bist du?
                    {print} Lass mich in meine Kristallkugel sehen
                    {print} Ich sehe... Ich sehe...
                    {echo} Du heißt
                    ```

                start_code: "# setze hier deinen Code hin"
                story_text_2: "## Challenge\nBis jetzt sagt Hedy nur deinen Namen. Kannst du den Code so erweitern, dass Hedy andere Voraussagen über dich machen kann?\nNoch ist Hedy natürlich keine gute Wahrsagerin, da sie ja nur die Antworten wiederholen kann, welche die Spieler vorher gegeben haben!\nSchau dir Level 2 an um deine Wahrsagerin zu verbessern.\n"
            12:
                story_text: |
                    ## Wahrsagerin
                    In diesem Level kannst du längere Sprüche aus mehreren Wörtern machen. Kannst du verschiedene Schicksale zur Liste hinzufügen?

                example_code: |
                    ```

                    Schicksale = 'Du wirst auf einer Bananenschale ausrutschen', _
                    {print} 'Ich werde in meine Kristallkugel schauen, um deine Zukunft zu sehen.'
                    {print} 'Ich sehe... Ich sehe...'
                    {sleep}
                    {print} Schicksale {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Wahrsagerin
                    In diesem Level wirst du lernen, das englische Spiel MASH zu programmieren. In diesem Spiel geht es darum, für alle Spieler die Zukunft vorauszusagen. Auf Englisch stehen die Buchstaben für mansion, apartement, shack, und house, was auf Deutsch Schloss, Wohnung, Schuppen und Haus bedeutet.

                example_code: |
                    ```
                    Häuser = Schloss, Wohnung, Schuppen, Haus
                    Liebe = niemand, ein*e König*in, den*die Nachbar*in, die wahre Liebe
                    Haustiere = Hund, Katze, Elephant
                    Namen = Judith, Benno, Tim
                    
                    {for} Name {in} Namen
                        {print} Name ' lebt in einem ' Häuser {at} {random}
                        {print} Name ' wird ' Liebe {at} {random} ' heiraten.'
                        {print} Name ' wird eine(n) ' Haustiere {at} {random} ' als Haustier haben.'
                        {sleep}
                    ```
                story_text_2: "## Herausforderung\nWir können auch eine Harry-Potter-Wahrsagerin machen. Fülle die Zeile 5 richtig aus und füge die richtige Einrückung in den Zeilen 6 - 8 hinzu und dieses Programm verhält sich wie der Sortierhut!\n"

                example_code_2: |
                    ```
                    Häuser = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    Fächer = Zaubertränke, Verteidigung gegen die dunklen Künste, Zauberkunst, Verwandlung
                    Ängste = Voldemort, Spinnen, den ZAG nicht bestehen
                    Namen = Harry, Ron, Hermine
                    _
                    _ {print} Name ' gehört zu ' Häuser {at} {random}
                    _ {print}  Name ' ist gut in ' Fächer {at} {random}
                    _ {print}  Name 's größte Angst: ' Ängste {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            8:
                story_text: |
                    ## Wahrsagerin
                    In den vorigen Leveln hast du gelernt `{repeat}` zu nutzen, um die Wahrsagerin 3 Fragen in Folge beantworten zu lassen, aber wir hatten ein Problem die Fragen anzuzeigen.
                    Jetzt ist das Problem gelöst, weil wir den neuen Weg den `{repeat}` Befehl zu benutzen nutzen.
                    Im nächsten Beispiel kannst du die Wahrsagerin 3 Fragen stellen lassen und sie auch anzeigen!

                    ## Herausforderung
                    Kannst du den `{repeat}` Befehl richtig in die Lücken füllen?

                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Du kannst mir 3 Fragen stellen.'
                    Antworten = ja, nein, vielleicht
                    _ _ _
                       Frage = {ask} 'Was möchtest du wissen?'
                       {print} Frage
                       {sleep}
                       {print} 'Meine Kristallkugel sagt...' Antworten {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Fortune Teller
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.

                example_code: |
                    ```
                    {print} 'Ich bin Hedy, die Wahrsagerin!'
                    {print} 'Du kannst 3 Fragen stellen!'
                    {repeat} 3 {times} Frage = {ask} 'Was würdest du gerne wissen?'
                    Antwort = ja, nein, vielleicht
                    {repeat} 3 {times} {print} 'Meine Kristallkugel sagt... ' Antwort {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "## Herausforderung\nWie du sehen kannst, werden die Fragen in diesem Beispiel nicht ausgegeben. Das liegt daran, dass die Variable `Frage` drei Mal geändert wurde.\nJedes mal wenn der Spieler eine neue Antwort eingibt, überschreibt Hedy die vorherige und vergisst somit die alte Antwort.\nSo kannst du also nicht alle Fragen auf einmal ausgeben lassen.\n\nIndem du aber drei unterschiedliche Variablen statt nur einer verwendest (zum Beispiel `Frage_1` , `Frage_2` und `Frage_3`), könntest du das Problem lösen und die Fragen ausgeben.\nDas bedeutet dass du `{repeat}` nur für die Antworten benutzen kannst, und dass du alle Fragen einzeln abfragen und ausgeben musst.\nSchaffst du das?\n\nIn den folgenden Leveln wird sich die Form des `{repeat}` Befehls verändern, was dir die Fähigkeit gibt mehrere Zeilen auf einmal zu wiederholen.\n"
            6:
                story_text: |
                    ## Wahrsagerin
                    In diesem Level können wir Mathe in deinen Vorhersagen als Wahrsagerin verwenden. Das ermöglicht es dir (alberne) Formeln zur Berechnung der Zukunft zu erfinden.
                    Zum Beispiel könntest du ausrechnen wie reich du einmal wirst oder wie viele Kinder du haben wirst, wenn du erwachsen bist.



                    ## Herausforderung
                    Kannst du dir deine eigene (alberne) Vorhersagemaschine ausdenken?

                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen wie viele Kinder du haben wirst!'
                    Alter = {ask} 'Wie alt bist du?'
                    Geschwister = {ask} 'Wie viele Geschwister hast du?'
                    Länge = {ask} 'Wie groß bist du in Zentimetern?'
                    Kinder = Länge / Alter
                    Kinder = Kinder - Geschwister
                    {print} 'Du bekommst ...'
                    {sleep}
                    {print} Kinder ' Kinder!'
                    ```

                    ## Beispiel Alberne Wahrsagerin
                    Wenn das vorige Beispiel dir nicht albern genug war, schau dir dieses an!
                    ```
                    {print} 'Ich bin Hedy die alberne Wahrsagerin!'
                    {print} 'Ich werde vorhersagen wie schlau du bist!'
                    Fußball = {ask} 'Auf einer Skala von 1 bis 10, wie sehr magst du Fußball?'
                    Bananen = {ask} 'Wie viele Bananen hast du diese Woche gegessen?'
                    Hygiene = {ask} 'Wie viele Male hast du heute deine Hände gewaschen?'
                    Ergebnis = Bananen + Hygiene
                    Ergebnis = Ergebnis * Fußball
                    {print} 'Du bist ' Ergebnis ' Prozent schlau.'
                    ```
                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Fortune Teller
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.

                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen, ob du morgen die Lotterie gewinnst!'
                    Person {is} {ask} 'Wer bist du?'
                    {if} Person {is} Hedy {print} 'Du wirst sicher gewinnen!🤩' {else} {print} 'Pech gehabt! Jemand anderes wird gewinnen!😭'
                    ```

                story_text_2: |
                    ## Hacke das Programm
                    Ersetze Hedy mit deinem eigenen Namen in der letzten Zeile, und Hedy wird immer vorhersagen dass du die Lottery gewinnen wirst und die anderen nicht!
                    Natürlich könnte das den anderen Spielern etwas verdächtig vorkommen... Um das zu vermeiden, kannst du sicherstellen, dass Hedy für jedes Mal wenn das Programm läuft eine unterschiedliche Antwort gibt.
                    Aber natürlich so, dass du einen positive Antwort und deine Mitspieler eine negative Antwort bekommen.

                example_code_2: |
                    ```
                    {print} 'Ich bin Hedy, die Wahrsagerin!'
                    {print} 'Ich kann vorhersagen ob du morgen im Lotto gewinnen wirst!'
                    Person {is} {ask} 'Wer bist du?'
                    gute_Antwort {is} Juhuu! Du gewinnst!, Du wirst auf jeden Fall gewinnen!, Wir haben einen Gewinner!
                    schlechte_Antwort {is} Pech gehabt! Probiers nochmal!, Jemand anderes wird gewinnen, du leider verlieren!
                    {if} Person {is} Hedy {print} gute_Antwort {at} {random} {else} {print} schlechte_Antwort {at} {random}
                    ```

                start_code: "# setze hier deinen Code hin"
                story_text_3: "## Herausforderungen\nMit diesem Konzept können viele verschieden Programme geschrieben werden, dafür musst du nur ein bisschen kreativ werden! Du könntest zum Beispiel eine Maschine bauen die vorhersagt, dass deine Lieblingsmannschaft alle gegnerischen Teams schlagen wird!\nOder du könntest den sprechenden Spiegel der bösen Königin aus Schneewittchen machen, der jedem sagst dass du der Schönste oder die Schönste im ganzen Land bist!\nLass deiner Fantasie freien Lauf!\n"
            4:
                story_text: |
                    ## Wahrsagerin
                    Dieses Level hat keine neuen Funktionen, aber gibt dir die Möglichkeit ein wenig mit Anführungszeichen zu üben.
                    Du kannst deinen Code aus Level 3 neu machen, aber achte darauf Anführungszeichen an den richtigen Stellen hinzuzufügen!

                    Beachte dass wir in Level 3 das Wort 'Frage' nicht sowohl als Variablenname, als auch als normales Wort das ausgegeben wird, benutzen konnten.
                    Die Anführungszeichen in Level 4 machen das möglich!

                    ## Challenge
                    Wir haben alle Anführungszeichen aus diesem Beispiel-Code entfernt. Kannst du sie alle an der richtigen Stelle hinzufügen?

                example_code: |
                    ```
                    _ Füge die Anführunszeichen in diesen Code ein _
                    {print} Ich bin Hedy die Wahrsagerin!
                    Frage {is} {ask} Was möchtest du wissen?
                    {print} Dies ist deine Frage:  Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            3:
                story_text: |
                    ## Fortune Teller
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only echo.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:

                example_code: |4

                    In diesem Beispiel kann die Spielerin Hedy eine Ja-Nein-Frage stellen und Hedy wird eine zufällige Antwort für dich aussuchen.
                    ```
                    {print} Ich bin Hedy, die Wahrsagerin!
                    Frage {is} {ask} Was würdest du gerne wissen?
                    {print} Das würdest du gerne wissen: Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "## Herausforderung\nBis hierhin konnte Hedy nur mit ja, nein oder vielleicht antworten. Kannst du Hedy mit zusätzlichen Antwortmöglichkeiten ausstatten, wie zum Beispiel 'auf jeden Fall' oder 'frag nochmal'?\n"
    haunted:
        name: "Spukhaus"
        description: "Entkomme dem Spukhaus"
        default_save_name: "Spukhaus"
        levels:
            1:
                story_text: |
                    ## Spukhaus
                    In diesem Abenteuer arbeiten wir an einem Spiel, in dem du aus einem Geisterhaus entkommen musst, indem du die richtigen Türen wählst.
                    Wenn du die richtige Tür wählst, überlebst du, aber wenn nicht, könnte ein schreckliches Monster…

                    In Level 1 beginnen wir mit unserem Spukhaus-Spiel, indem wir uns eine gruselige Geschichte ausdenken und die Spieler fragen, welches Monster sie in unserem Spukhaus finden werden.

                example_code: |
                    ```
                    {print} Wie bin ich hierher gekommen?
                    {print} Ich erinnere mich an meinen Freund, der sagte dass ich in das alte Haus gehen soll...
                    {print} und plötzlich wurde alles dunkel.
                    {print} Aber warum bin ich jetzt auf dem Boden...?
                    {print} Mein Kopf tut weh als hätte mir jemand mit der Pfanne eine übergezogen!
                    {print} Was ist das für ein Geräusch?
                    {print} Oh nein! Ich habe das Gefühl dass ich nicht alleine in diesem Haus bin!
                    {print} Ich muss hier raus!
                    {print} Vor mir sind drei Türen...
                    {ask} Durch welche Tür soll ich gehen?
                    {echo} Ich nehme Tür
                    {print} ...?
                    ```
                start_code: "{print} How did I get here?"
                story_text_2: "## Challenge\nKannst du die Gruselgeschichte fertig schreiben? Oder dir deine eigene ausdenken?\n"
            2:
                story_text: |
                    ## Spukhaus
                    In diesem Spukhaus kannst du Monster mit Emojis auswählen. Natürlich kannst du auch Wörter verwenden.
                start_code: "monster1 {is} _"
                example_code: "```\nMonster_1 {is} \U0001F47B\nMonster_2 {is} \U0001F921\nMonster_3 {is} \U0001F476\n{print} Du gehst ins Spukhaus.\n{print} Plötzlich siehst du ein Monster_1\n{print} Du läufst in den anderen Raum, aber ein Monster_2 wartet dort auf dich!\n{print} Oh nein! Schnell flitzt du in die Küche.\n{print} Aber als du reinkommst greift dich Monster_3 an!\n```\n"
                story_text_2: "## Herausforderung\nIm obigen Beispiel sind die Monster vorherbestimmt. Also ist die Ausgabe deines Codes jedes Mal das Gleiche.\nKannst du `{ask}` Befehle hinzufügen, um das Spukhaus interaktiv zu machen und die Spieler die Monster auswählen zu lassen auf die sie treffen?\n"
                example_code_2: "```\nMonster1 {is} _\nMonster2 {is} _\nMonster3 {is} _\n{print} Du betrittst das Spukhaus.\n{print} Plötzlich siehst du ein Monster1\n{print} Du rennst in den anderen Raum, aber ein Monster2 wartet dort auf dich!\n{print} Oh nein! Schnell in die Küche.\n{print} Aber als du hineingehst attackiert dich Monster3 !\n```\n"
            14:
                story_text: |
                    ## Spukhaus
                    In diesem Level kannst du die Symbole `<` und `>` verwenden um deinen Spielen Leben hinzuzufügen.

                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: "# setze hier deinen Code hin"
            11:
                story_text: |
                    ## Spukhaus
                    In diesem Level haben wir den Befehl zum Wiederholen verändert und wir haben eine Zeile hinzugefügt die unser Spukaus dem Spieler sagen lässt, in welchen Raum er sich befindet.

                    ## Herausforderung
                    Beende das Programm mit der richtigen Zeile Code. Beachte: Es gibt 3 Räume, die der Spieler überleben muss um zu gewinnen!

                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    Spieler {is} lebend
                    Türen = 1, 2, 3
                    Monster = Zombie, Vampire, Riesenspinne
                    _
                        {if} Spieler {is} lebend
                            richtigeTür = Türen {at} {random}
                            {print} 'Raum ' i
                            {print} 'Es sind 3 Türen vor dir...'
                            gewählteTür = {ask} 'Welche Tür wählst du?'
                            {if} gewählteTür {is} richtigeTür
                                {print} 'Keine Monster hier!'
                            {else}
                                {print} 'Du wirst gegessen von ' Monster {at} {random}
                                Spieler = tot
                        {else}
                            {print} 'GAME OVER'
                    {if} Spieler {is} lebend
                        {print} 'Großartig! Du hast überlebt!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            9:
                story_text: |
                    ## Spukhaus
                    In diesem Level kannst du Verschachtelungen verwenden, um das Spukhaus noch interaktiver zu machen!

                    ## Challenge
                    Im Moment ist es ziemlich schwer das Spiel zu gewinnen, kannst du es leichter machen?
                    Zum Beispiel mit nur einer falschen Tür und zwei richtigen anstatt einer richtigen Tür und zwei falschen?

                example_code: |
                    ```
                    {print} 'Entkomme dem Spukhaus!'
                    Spieler = am_Leben
                    Türen = 1, 2, 3
                    Monster = Zombie, Vampir, riesige Spinne
                    {repeat} 3 {times}
                        {if} Spieler {is} am_Leben
                            richtige_Tür {is} Türen {at} {random}
                            {print} 'Vor dir sind drei Türen...'
                            gewählte_Tür = {ask} 'Welche Tür wählst du?'
                            {if} gewählte_Tür {is} richtige_Tür
                                {print} 'Hier sind keine Monster!'
                            {else}
                                {print} 'Du wirst gefressen von einem(r) ' Monster {at} {random}
                                Spieler = tot
                        {else}
                            {print} 'GAME OVER'
                    {if} Spieler {is} am_Leben
                        {print} 'Großartig! Du hast überlebt'
                    ```

                start_code: "{print} 'Escape from the haunted house!'"
            5:
                story_text: |
                    ## Spukhaus
                    Bis zu diesem Level hat das Spukaus den Spieler immer gefragt durch welche Tür er gehen will, aber wie du vielleicht gemerkt hast, musste der Spieler nicht wirklich richtig antworten.
                    Wenn der Spieler einfach irgendetwas eingeben hat, ging das Spiel trotzdem weiter und der Spieler konnte sogar gewinnen (obwohl er gar keine Tür gewählt hat).
                    In diesem Level kannst du nur gewinnen, wenn du die gleiche Tür wählst die Hedy zufällig ausgesucht hat.

                    ## Herausforderung
                    Kannst du die 4 fehlenden Wörter finden, um den Code zu vervollständigen?

                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    {print} 'Es sind 3 Türen vor dir...'
                    Türen {is} 1, 2, 3
                    Monster {is} Werwolf, Mumie, Vampir, Zombie
                    gewählte_Tür {is} {ask} 'Welche Tür wählst du?'
                    {print} 'Du wählst Tür Nummer...' gewählte_Tür
                    {sleep}
                    richtige_Tür {is} Türen {at} {random}
                    _ _ _ _ {print} 'Großartig! Du bist entkommen!'
                    {else} {print} 'Oh nein! Du wirst gegessen von...' Monster {at} {random}
                    ```

                start_code: "# setze hier deinen Code hin"
            4:
                story_text: |
                    ## Spukhaus
                    In diesem Level lernst du mit Anführungszeichen umzugehen.
                    Kannst du dein Spukhaus für Level 4 abdichten?

                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} _ Entkomme dem Spukhaus! _\n{print} _ Vor dir sind drei Türen... _\nWahl {is} {ask} _ Welche Tür wählst du? _\n{print} _ Du nimmst Tür... _ Wahl\nMonster {is} ein Zombie, ein Vampir, NICHTS DU BIST ENTKOMMEN\n{print} _ Du siehst... _\n{sleep}\n{print} Monster {at} {random}\n```\n"
            3:
                story_text: |
                    ## Spukhaus-Spiel
                    In den vorherigen Leveln hast du eine Einleitung ins Spukhaus-Spiel gemacht, aber wie du vielleicht gemerkt hast war das Ender der Geschichte immer schrecklich.
                    In diesem Level kannst du die Geschichte interaktiver machen, indem du den Ausgang des Spiels änderst. Manchmal wirst du gefressen, manchmal kannst du entkommen!
                    Lass Hedy zufällig entscheiden!

                example_code: |
                    ```
                    {print} Entkomme dem Spukhaus!
                    {print} Vor dir sind drei Türen...
                    Wahl {is} {ask} Welche Türe wählst du?
                    {print} Du wählst Tür... Wahl
                    Monster {is} ein Zombie, ein Vampir, NICHTS DU ENTKOMMST
                    {print} Du siehst...
                    {sleep}
                    {print} Monster {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "## Challenge\nDiese Geschichte ist ziemlich einfach, vielleicht kannst du sie etwas mehr gruselig machen indem du die Geschichte spannender machst.\nAußerdem kennt die Geschichte gerade nur wenige Ausgänge, es gibt nur drei Möglichkeiten was hinter den Türen ist. Fallen dir noch mehr Monster ein die du der Liste hinzufügen kannst?\n"
                story_text_3: "## Mach das Spiel zu einer Fernseh-Show!\nZum Schluss wollen wir dich herausfordern, das Spiel zu einer Fernseh-Show zu machen, in der du eine Tür oder einen Koffer wählst der einen großen Preis enthält!\nSchaffst du das?\n"
                example_code_3: "```\n{print} Die große Spielshow!\n{print} Es liegen 3 Koffer vor dir...\n{print} Einer enthält _\n_\n```\n"
            16:
                story_text: |
                    ## Spukhaus-Spiel
                    Dieses Spukhaus-Spiel verwendet die Verbindung zwischen Listen, die du in diesem Level verwenden kannst.
                    Zum Beispiel kommen alle Eigenschaften, die zu Zombies gehören, als Erstes in der Liste, dann die Hexen und als drittes die Vampire.
                    Schau dir mal den Code an!

                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mension'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: "# setze hier deinen Code hin"
    piggybank:
        name: Sparschwein
        description: Zähle dein Taschengeld!
        default_save_name: Sparschwein
        levels:
            14:
                story_text: |
                    ## Sparschwein
                    In diesem Level kannst du dir von Hedy sagen lassen, ob du genug Geld gespart hast!

                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: "# setze hier deinen Code hin"
            12:
                story_text: |
                    ## Sparschwein
                    In diesem Abenteuer lernst du, wie man ein digitales Sparschwein macht. Vervollständige den Code, um auszurechnen wie viel Geld du hast und wie lang du sparen musst, um dir zu kaufen was du möchtest!

                example_code: |
                    ```
                    {print} 'Das digitale Sparschwein'
                    Wunsch = {ask} 'Was würdest du dir gerne kaufen?'
                    Preis = {ask} 'Wieviel kostet das?'
                    Gespartes = {ask} 'Wieviel Geld hast du schon gespart?'
                    Taschengeld = {ask} 'Wieviel Taschengeld bekommst du pro Woche?'
                    zu_sparen = Preis - Gespartes
                    Wochen = zu_sparen / Taschengeld
                    {print} 'Du kannst dir ein ' _ ' in ' _ ' Wochen kaufen.'
                    ```
                start_code: "# setze hier deinen Code hin"
    quizmaster:
        name: Quizmeister
        description: Mache dein eigenes Quiz!
        default_save_name: Quizmeister
        levels:
            14:
                story_text: |
                    ## Mache dein eigenes Quiz
                    In diesem Abenteuer kannst du dein eigenes Quiz machen! Füll alle Lücken aus, füge mehr Fragen hinzu und hab Spaß bei deinem eigenen Quiz!
                    Du kannst das Quiz machen über was du möchtest: dein Hobby, dein Lieblingstier, dein Lieblingsbuch, eigentlich über alles!

                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        print 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```

                start_code: "# setze hier deinen Code hin"
    language:
        name: Sprache
        description: Übe Wörter in einer Fremdsprache
        default_save_name: Sprache
        levels:
            5:
                story_text: |
                    ## Lerne eine neue Sprache
                    Schreibe dein eigenes Programm, um Vokabeln in einer neuen Sprache zu üben.

                    ## Herausforderung
                    Kannst du dieses Programm für eine andere Sprache erstellen? Oder kannst du mehr Wörter zum französischen hinzufügen?
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Lerne Französisch!'\nKatze {is} {ask} '\U0001F431'\n{if} Katze {is} chat {print} 'Großartig!'\n{else} {print} 'Nein, Katze heißt chat'\nFrosch {is} {ask} '\U0001F438'\n{if} Frosch {is} grenouille {print} 'Super!'\n{else} {print} 'Nein, Frosch heißt grenouille'\n```\n"
            16:
                story_text: |
                    ## Lerne eine neue Sprache
                    Schreibe dein eigenes Programm dien Vokabular in einer neuen Sprache zu lernen.

                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: "# setze hier deinen Code hin"
    next:
        name: "Was kommt als nächstes?"
        description: "Was kommt als nächstes?"
        default_save_name: "next"
        levels:
            1:
                story_text: |
                    ## Was kommt als Nächstes?
                    Herzlichen Glückwunsch! Du bist zum Ende von Level 1 gekommen. Hoffentlich hast du schon jetzt ein paar coole Codes geschrieben, aber bei Hedy gibt es noch eine Menge zu entdecken.

                    Im ersten Level hast du vielleicht gemerkt, dass der `{echo}` Befehl nur eine Information auf einmal speichern kann.
                    Im Restaurant-Abenteuer zum Beispiel konntest du nur entweder wiedergeben was der Kunde essen wollte, oder was er trinken wollte, aber nicht beides in einem Satz.

                start_code: "{print} Let's go!"
                example_code: "```\n{print} Willkommen bei Hedy's\n{ask} Was würden Sie gerne essen?\n{echo} Sie hätten also gerne \n{ask} Was würden Sie gerne trinken?\n{echo} Sie hätten also gerne \n```\n"
                story_text_2: "Wenn der Spieler einen Hamburger und ein Cola eintippt, kannst du nicht \"Sie hätten also gerne einen Hamburger und ein Cola\" sagen , sondern musst zwei eigene Zeilen schreiben. \nAußerdem gibt der `{echo}` Befehl nur das letzte Wort des Satzes zurück. Du kannst also nicht \"Ihr Hamburger kommt sofort!\" sagen.\n\nDas ändert sich ab Level 2. In Level 2 lernst du, mit Variablen zu arbeiten, die es dir erlauben, mehrere Informationsfragmente zu speichern und sie dort wo du willst auszugeben.\nAlso gleich weiter zu Level 2!\n"
            2:
                story_text: |
                    ## Was kommt als nächstes?
                    In diesem Level hast du gelernt was eine Variable ist und wie du sie benutzen kannst um deine Abenteuer interaktiver zu machen.
                    Aber... das ist nicht das Einzige was du mit Variablen anfangen kannst! Du kannst Variablen auch verwenden um Listen zu machen.
                    Und du kannst sogar Hedy ein zufälliges Wort aus einer Liste auswählen lassen, womit du richtige Spiele machen kannst!
                    Schau dir dafür einfach mal das nächste Level an!
                start_code: "{print} Let's go to the next level!"
            3:
                story_text: |
                    ## Was kommt als Nächstes?
                    In diesem Level hast du mit Variablen geübt, aber vielleicht bist du diesem Fehler über den Weg gelaufen.

                    Probier mal diesen Code aus:
                    ```
                    Name {is} Sophie
                    {print} Mein Name ist Name
                    ```
                    Natürlich wolltest du `Mein Name ist Sophie` ausgeben, aber Hedy schreibt `Mein Sophie ist Sophie`.
                    Im nächsten Level wird diese Problem gelöst. Dazu benutzen wir Anführungszeichen.

                start_code: "{print} Let's go to the next level!"
            4:
                story_text: |
                    ## What's next?
                    In the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.
                    But it's not really interactive, the player doesn't have any influence on what happens in the game.

                    In the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.
                    So let's take a peak!

                    ```
                    password {is} {ask} 'What is the correct password?'
                    ```
                start_code: "{print} 'Lets go to the next level!'"
            5:
                story_text: |
                    ## Was kommt als Nächstes?
                    Du bist jetzt am Ende dieses Levels angekommen. Dabei hast du `{ask}` and `{if}` gelernt. Zum Beispiel kannst du jetzt Gäste fragen, was sie gerne essen würden.
                    Du kannst aber noch nicht den Preis für das Abendessen von jedem ausrechnen.

                    Das nächste Level ermöglicht es, Addition, Subtraktion und Multiplikation in deinen Programmen zu verwenden. So kannst du die Preise im Restaurant ausrechnen, aber du könntest auch Geheimcode einfügen der deinen Freunden und deiner Familie einen Rabatt gibt.
                    Eine andere Möglichkeit im nächsten Level ist ein eigenes Mathespiel zu programmieren, für deinen kleinen Bruder oder deine kleine Schwester, damit sie Multiplikation üben.
                    Schau es dir selbst an, im nächsten Level!
                start_code: "{print} 'On to the next level!'"
                example_code: "## Freigetränke!\n```\n{print} 'Willkommen bei McHedy'\nBestellung {is} {ask} 'Was würden Sie gerne essen?'\n{print} 'Sie hätten gerne ' Bestellung\n{if} Bestellung {is} Hamburger Preis {is} 5\n{if} Bestellung {is} Pommes Preis {is} 2\nGetränke {is} {ask} 'Was würden Sie gerne dazu trinken?'\n{print} 'Sie hätten gerne ' Getränke\n{print} 'Das macht dann ' Preis ' Euro für Ihre ' Bestellung ' bitte'\n{print} 'Die Getränke sind gratis in diesem Level weil Hedy noch nicht den Preis ausrechnen kann...'\n```\n"
            6:
                story_text: |
                    ## Was kommt als Nächstes?
                    Gut gemacht! Du hast das Ende dieses Levels erreicht, was bedeutet dass du mit `{if}` und `{else}` geübt hast. Vielleicht ist dir aufgefallen, dass deine Codes immer länger und länger werden.
                    Zum Beispiel wenn du 'Zum Geburtstag viel Glück' programmieren möchtest.

                    Das ist eine Menge Code, dafür das eigentlich nur die Gleichen Wörter immer wieder kommen. Zum Glück gibt es im nächsten Level eine Lösung dafür, den `{repeat}` Befehl, der es dir erlaubt eine Zeile Code mehrmals zu wiederholen.
                start_code: "{print} 'On to the next level!'"
                example_code: "```\n {print} 'Zum Geburtstag viel Glück'\n {print} 'Zum Geburtstag viel Glück'\n {print} 'Zum Geburtstag liebe Hedy'\n {print} 'Zum Geburtstag viel Glück'\n```\n"
            7:
                story_text: |
                    ## Was kommt als Nächstes?
                    Jetzt hast du gelernt, wie du eine Zeile Code wiederholen kannst. Das wird sich noch als nützlich erweisen, reicht aber nicht immer aus. Manchmal musst du mehrere Zeilen auf einmal wiederholen.
                    Das nächste Level erlaubt dir, ein paar Zeilen Code zu einer Gruppe zusammenzufügen und diese kleine Gruppe dann auf einmal zu wiederholen!

                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n{repeat} 5 {times} {print} 'Im nächsten Level kannst du mehrere Zeilen Code auf einmal wiederholen!'\n```\n"
            8:
                story_text: |
                    ## Was kommt als Nächstes?
                    Gut gemacht! Du hast den Schluss eines weiteren Levels erreicht! In diesem Level hast du gelernt, mehrere Zeilen Code in einem {if} oder {repeat} Befehl zu verwenden. Noch kannst du nicht beide kombinieren...
                    Aber es gibt gute Neuigkeiten! Im nächsten Level wirst du ein {if} in ein {if} setzen dürfen, oder in einen {repeat} Befehl.
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nAntwort = {ask} 'Würdest du gerne zum nächsten Level gehen?'\n{if} Antwort {is} ja\n    {print} 'Toll! Du kannst den {repeat} Befehl im {if} Befehl verwenden!'\n    {print} 'Juhuu!'\n    {print} 'Juhuu!'\n    {print} 'Juhuu!'\n{else}\n    {print} 'Okay, du darfst noch ein bisschen hier bleiben!'\n```\n"
            9:
                story_text: |
                    ## Was kommt als Nächstes?
                    Du machst das super! In diesem Level begegnet uns noch ein kleines Problem. Du hast das Wiederholen einer Zeile gelernt, aber was wenn du eine Zeile ein wenig ändern wolltest?
                    Wenn du zum Beispiel das Lied 'if you're happy and you know it' singen würdest, sähe das so aus:

                    Wenn du auch noch den nächsten Verse 'stomp your feet' wolltest, und den nächsten, und den nächsten, dann müsstest du den Code komplett ändern.
                    Im nächsten Level lernst du den `{for}` Befehl, der es dir erlaubt eine Liste von Aktionen zu machen und den Code jedes Mal mit einer anderen Aktion zu wiederholen!
                    Schau es dir an!
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n{repeat} 2 {times}\n    {print} 'Wenn du glücklich bist, dann klatsche in die Hand'\n{print} 'Zeig mir, wenn du bei mir bist, wie dir so zumute ist'\n{print} 'Wenn du glücklich bist, dann klatsche in die Hand'\n```\n"
            10:
                story_text: |
                    ## What's next?
                    You have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
                start_code: "{print} 'Lets go to the next level!'"
            11:
                story_text: |
                    ## Was kommt als Nächstes?
                    Vielleicht hast du im Restaurant-Abenteuer schon einmal versucht, Dezimalzahlen zu verwenden. Falls ja, hast du vielleicht bemerkt, dass Hedy diese noch nicht verstanden und immer abgerundet hat.
                    Ab dem nächsten Level kannst du Dezimalzahlen verwenden.
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nburger {is} 5\ndrink {is} 2\ntotal {is} burger + drink\n{print} 'Du hast einen Burger und ein Getränk bestellt'\n{print} 'Das macht dann bitte ' total ' Euro'\n```\nDer Code oben funktioniert, weil der Burger 5 Dollar und das Getränk 2 Dollar kostet. Wenn du aber 50 Cent mehr verrechnest, funktioniert das Programm nicht mehr! So wie im unteren Code:\n```\nburger {is} 5,50\ndrink {is} 2,30\ntotal {is} burger + drink\n{print} 'Du hast einen Burger und ein Getränk bestellt'\n{print} 'Das macht dann bitte ' total ' Euro'\n```\nGeh zum nächsten Level, um diesen Code zum Laufen zu bringen!\n"
            12:
                story_text: |
                    ## Was kommt als Nächstes?
                    In den letzten Leveln hast du gelernt, wie du zwei `{if}` Befehle ineinanderfügen kannst. Das funktioniert soweit gut, aber so bekommst du ziemlich lange und unhandliche Codes, so wie diesen hier:

                    In diesem System musst du sowohl den richtigen Nutzernamen als auch das richtige Passwort angeben.
                    Im nächsten Level lernst du den Befehl `{and}`, der deinen Code ein ganzes Stück kürzer und verständlicher machen wird!
                    Sieh für dich selbst!
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nNutzername {is} {ask} 'Was ist dein Nutzername?'\nPasswort {is} {ask} 'Was ist dein Passwort?'\n{if} Nutzername {is} 'Hedy'\n    {if} Passwort {is} 'geheim'\n        {print} 'Willkommen Hedy!'\n    {else}\n        {print} 'Zugang gesperrt!'\n{else}\n    {print} 'Zugang gesperrt!'\n```\n"
            13:
                story_text: |
                    ## Was kommt als Nächstes?
                    Mit dem Programm unten kannst du ausrechnen, ob du eine Schulaufgabe bestanden hast (dafür brauchst du sechs oder mehr Punkte).
                    Wie du siehst, ist der Code super ineffizient, wegen des sehr langen Codes in der fünften Zeile.
                    Alle unterschiedlichen Punktzahlen von 1 bis 5 mussten einzeln programmiert werden. Zum Glück lernst du im nächsten Level wie du das ohne extrem langen Code hinbekommst!
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nErste_Punktzahl = {ask} 'Wie viele Punkte hast du im ersten Test?'\nZweite_Punktzahl = {ask} 'Wie viele Punkte hast du im zweiten Test?'\nSumme {is} Erste_Punktzahl + Zweite_Punktzahl\nDurchschnitt {is} Summe / 2\n{if} Durchschnitt = 1 {or} Durchschnitt = 2 {or} Durchschnitt = 3 {or} Durchschnitt = 4 {or} Durchschnitt = 5\n    {print} 'Oh nein! Du bist durchgefallen...'\n{else}\n    {print} 'Juhuu! Du hast bestanden!'\n```\n"
            14:
                story_text: |
                    ## Was kommt als Nächstes?
                    In diesem Spiel unten wurde der Code so gemacht, dass der Spieler solange spielen kann wie er oder sie möchte...
                    Aber der Code ist ineffizient und viel zu lang. Und was, wenn der Spieler 101 Spiele und nicht 100 spielen möchte?
                    Kann man nicht bis unendlich spielen?
                    Im nächsten Level lernst du einen Befehl der das alles ein ganzes Stück einfacher macht.
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nSpiel {is} 'läuft'\n{for} i {in} {range} 1 {to} 100\n    {if} Spiel {is} 'läuft'\n        Antwort = {ask} 'Möchtest du weiterspielen?'\n        {if} Antwort {is} 'nein'\n            Spiel {is} 'vorbei'\n        {if} Antwort {is} 'ja'\n            {print} 'Ok dann machen wir weiter.'\n```\n"
            15:
                story_text: |
                    ## Was kommt als Nächstes?
                    Im nächsten Level werden wir uns ein bisschen mehr in Richtung echten Python-Code bewegen. Du wirst lernen wie sich zwei Listen zusammenfügen lassen.
                    So kannst du Code programmieren in dem einem Tier das entsprechende Tiergeräusch zugeordnet wird.
                    Weil die beiden Codes unten... sind einfach nur Quatsch!
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nTiere = 'Huhn', 'Pferd', 'Kuh'\nGeräusche = 'Gack', 'Wieh', 'Muh'\n{for} Tier {in} Tiere\n    {print} 'Ein ' Tier ' macht ' Geräusche {at} {random}\n```\nSo kannst du es auch hinbekommen, aber....\n```\nTiere = 'Huhn', 'Pferd', 'Kuh'\nGeräusche = 'Gack', 'Wieh', 'Muh'\n{for} Tier {in} Tiere\n    {for} Geräusch {in} Geräusche\n        {print} 'Ein ' Tier ' macht ' Geräusch\n```\n"
            16:
                story_text: |
                    ## Was kommt als Nächstes?
                    Im nächsten Level wird es Zeit für einen neuen Befehl. Vielleicht ist dir in den vorherigen Leveln schon aufgefallen, dass `{if}` und `{else}`manchmal nicht ausreichen.
                    Schau dir zum Beispiel mal diesen Code an:
                start_code: "{print} 'Lets go to the next level!'"
                story_text_2: In diesem Code wäre es toll, zweimal ein `{else}` zu haben, damit du eine Option für den Brokkoli und eine für die Grünen Bohnen haben kannst. Das nächste Level bringt den Befehl `{elif}` mit, der genau das möglich macht! Also nichts wie los zum nächsten Level!
                example_code: "```\n{print} 'Was gibt es heute zum Abendessen?'\nMöglichkeiten = ['Pizza', 'Brokkoli', 'Grüne Bohnen']\nWahl = Möglichkeiten {at} {random}\n{if} Wahl = 'Pizza'\n    {print} 'Lecker! Pizza!'\n{else}\n    {print} 'Igitt...'\n```\n"
            17:
                story_text: |
                    ## What's next?
                    In the next level you will learn a real Python way to use `{print}`.
                start_code: "{print} 'Lets go to the next level!'"
            18:
                story_text: |
                    ## Was kommt als nächstes?
                    Herzlichen Glückwunsch! Du hast das letzte Level von Hedy erreicht! Der Code, den du geschrieben hast, kann in echte Python-Umgebungen wie Replit oder PyCharm kopiert werden, wo du dann weiterüben kannst!
                    Beachte jedoch, dass Python nur englische Befehle auslesen kann. Wenn du sonst also mit anderen Sprachen gearbeitet hast, musst du jetzt auch Englisch wechseln.
                start_code: "{print} ('Great job!!!')"
    secret:
        default_save_name: Sprache
        levels:
            12:
                story_text: "## Schreibe einen Geheim-Code wie ein Superspion\nIn diesem Abenteuer kannst du deinen eigenen Superspion-Code schreiben. Verschlüssele eine Nachricht die nur der richtige Agent entschlüsseln kann.\nWenn der Feind versucht den Code zu knacken, wird er nur falsche Informationen bekommen die seine Zeit verschwenden.\n\n## Herausforderung\nErstelle deinen eigenen Geheimcode für deinen Superspion. Kannst du ihn aus noch mehr Variablen machen?\n"
                example_code: "```\nName {is} {ask} 'Wie heißt du?'\nif Name {is} 'Agent007'\n    a {is} 'Geh zum Flughafen '\n{else}\n    a {is} 'Geh zum Bahnhof '\nPasswort {is}  {ask} 'Wie lautet das Passwort?'\n{if} Passwort {is} 'STRENGGEHEIM'\n    b {is} 'Morgen um 2 Uhr'\n{else}\n    b {is} 'Morgen um 10 Uhr'\n{print} a + b\n```\n"
                start_code: '## setze hier deinen Code hin'
            13:
                story_text: "## Superspion\nKannst du den richtigen Befehl in die Lücke füllen? Beachte: Der Superspion muss beide Fragen richtig beantworten bevor sie die geheimen Informationen erhalten!\n"
                example_code: "```\nName {is} {ask} 'Wie heißt du?'\nPasswort {is} {ask} 'Wie lautet dein Passwort?'\n{if} Name {is} 'Agent007' _ Passwort {is} 'STRENGGEHEIM'\n    {print} 'Gehe um 2 Uhr zum Flughafen'\n{else}\n    {print}  'Gehe um 10 Uhr zum Bahnhof'\n ```\n"
                start_code: '## setze hier deinen Code hin'
        name: Superspion
        description: Schreibe deinen eigenen Spion-Code
    tic:
        name: Tic Tac Toe
        description: Spiele ein Spiel Tic Tac Toe!
        default_save_name: Tic
        levels:
            13:
                story_text: "## Tic Tac Toe\nIn diesem Abenteuer kannst du ein Tic Tac Toe-Spiel programmieren. Du kannst mit zwei Leuten spielen. Ihr wählt abwechselnd die Zahl (zwischen 1 und 9) des Feldes, in das ihr euer Symbol (X oder O) einsetzen wollt.\nDie erste Person, die 3 Symbole in einer Reihe (horizontal, vertikal oder diagonal) hat, gewinnt!\nViel Spaß!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '##Schreibe deinen Code hier'
            14:
                start_code: '## Schreibe deinen Code hier'
                story_text: "## Tic Tac Toe\nIn den vorigen Levels hast du ein Tic Tac Toe-Spiel kreiert. Jetzt weißt du, wie du das =-Symbol, das ==-Symbol und das !=-Symbol nutzen kannst.\nDu kannst dieses Wissen in deinem neuen Tic Tac Toe-Spiel zum Beispiel so anwenden:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                start_code: '## füge hier deinen Code ein'
                story_text: "## Tic Tac Toe\nIn diesem Level kannst du dein Tic Tac Toe-Spiel mit der {while}-Schleife verbessern. Mit dieser Schleife kannst du `{if} game != 'over'` und `{for} i {in} {range} 1 {to} 9` in eine einfache Zeile zusammenführen.\nProbiere es gleich aus:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '## gib deinen Code hier ein'
                story_text: "## Tic Tac Toe\nIn den vorigen Leveln hatte das Tic Tac Toe-Spiel ein nerviges Feature. Nach jedem Zug musstest du selbstständig eintragen, ob du gewonnen hast oder nicht. Zwar hat das das Spiel spielbar gemacht, gleichzeitig aber auch stark gebremst. In diesem Level haben wir gelernt, wie wir den `{elif}`-Befehl nutzen können, um dieses Problem zu lösen.\nDen `{elif}`-Befehl so zu nutzen, um Hedy feststellen zu lassen, ob eine Spielerin oder ein Spieler gewonnen hat, ist spaßig, braucht aber auch eine gewisse Anzahl an zusätzlichen Zeilen.\n\nIm Beispielcode kannst du sehen, dass wir Siegesbestimmungen hinzugefügt haben (3 Felder in einer horizontalen, vertikalen oder diagonalen Reihe). Du kannst diese in den Zeilen 46 bis 69 (leiwand) finden. Du kannst ebenso sehen, dass jedes Mal, wenn die Bestimmungen erfüllt sind (also, wenn jemand gewonnen hat), die Variable game auf 'over' gesetzt wird. Das bedeutet, dass die {while}-Schleife gestoppt wird und das Spiel zu Ende ist.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
    blackjack:
        name: Blackjack
        description: Versuche, so nah wie möglich an die 21 heran zu kommen
        default_save_name: Blackjack
        levels:
            17:
                story_text: "## Erstelle ein Blackjack-Spiel\nBlackjack ist ein einfaches Kartenspiel, bei dem du so nahe wie möglich an die 21 herankommen musst. Du bekommst zwei Karten. Jede Karte hat den Wert ihrer abgebildeten zahl und die Karten mit Bildern (Bube, Dame, König) sind 10 Punkte Wert.\nDas Ass is entweder 1 oder 1 Punkte wert (das kannst du dir aussuchen). Der Kartengeber, dein Gegner, erhält auch zwei Karten.\nWenn du möchtest, kannst du noch eine Karte ziehen und ihre Punkte werden zu deinen dazugerechnet. Der Kartengeber darf auch noch eine Karte ziehen.\nAber pass auf, dass du nicht mehr als 21 Punkte bekommst, denn dann verlierst du!\nDer Spieler, der am nächsten an 21 herankommt ohne sie zu überschreiten, gewinnt!\n\nViel Spaß!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    {print} 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    {print} 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# Schreibe deinen Code hier'
    pressit:
        levels:
            8:
                start_code: '# place your code here'
                story_text: "## Press It!\nNow that you need to use indents for the {if} and {else} statements,\nyou will also have to indent code when using {pressed}! Don't worry,\nit works te same as with the other statements, see the example!\nPress another key instead of x and see what happens.\n"
                example_code: "```\n{if} x is {pressed}\n    {print} 'Only the cool kids press the x key.'\n{else}\n    {print} 'The adventurous kids press something else.'\n```\n"
            9:
                start_code: '# place your code here'
                story_text: "Now that you know how to nest multiple statements, you can also do this with {pressed}!\nBy nesting a pressed in a {repeat} loop, you can repeatedly press buttons and make something happen.\nNow we know you could do this before, but by using the indents you have much more overview!\nTry it counting to 5, for example!\n"
                example_code: "```\ntotal = 1\n{repeat} 5 times\n    {if} x is {pressed}\n        {print} total\n        {print} 'keep pressing!'\n        total = total + 1\n```\n"
                story_text_2: "Besides counting, you can now also move the turtle in many more ways than only forward or backwards!\nTry making some figures by walking the turtle around!\n"
                example_code_2: "```\nstepsize = 25\nleft = -90\nright = 90\naround = 180\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
            10:
                start_code: '# place your code here'
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} -90\n{if} y is {pressed}\n    for distance in distances\n        {forward} distance\n        {turn} 90\n```\n"
                story_text: "In this level you can make the turtle draw you a figure. The turtle is raring to go.\nGive the turtle the starting signal by pressing the x or y key on your keyboard.\nCan you let the turtle draw you another figure?\n"
            11:
                start_code: '# place your code here'
                story_text: "Now that you have learned of the ```for ... in range ... to ...``` rule, you can use it for ```pressed```\ntoo! for example, try moving the turtle! The turtle grows everytime you press a linked button.\nThis way the turtle can move further every step!\n"
                example_code: "```\nleft = -90\nright = 90\naround = 180\nfor counter in range 1 to 15\n    stepsize = counter * 5\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n    {if} d is {pressed}\n        turn right\n```\n"
            14:
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
                start_code: '# place your code here'
                story_text: "Now that you learned how to use operators, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump every 5 steps or every 4 turns\n"
            15:
                story_text: "Now that you have learned about the ```while``` loops, you can start using it on the turtle!\nThe turtle is now only allowed to take only 15 steps or turn 15 times, before he gets tired!\nTry to get as far as possible before the turtle gets tired! You can use your superjump after 2 turns\nor 5 steps.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\nwhile tired_in > 0\n    {if} w is {pressed}\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}\n        {if} jumptime <= 0 or spins <= 0\n            forward stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
                start_code: '# place your code here'
            16:
                start_code: '# place your code here'
                story_text: "Lets move a little with a game of Twister!\nWhen everyone is ready, press the x key for the next move!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\nrepeat 20 times\n    l = limbs[random]\n    c = colours[random]\n    {if} x is {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
            17:
                story_text: "Now that you learned how to use ```elif```, we can use it with ```pressed```too! Be aware,\n```elif ... is pressed ``` is not possible! That is why we are going to nest some ```elif```\nstatements into the ```pressed``` options. We also had to add ```:``` to the code to make\neverything work! imagine the turtle being able to do a superjump forward. by pressing ```p``` the\nturtle can make a superjump! However, the turtle can only do this jump every 5 steps or every\n4 turns\n"
                start_code: '# place your code here'
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\nrepeat 40 times\n    {if} w is {pressed}:\n        forward stepsize\n        jumptime = jumptime - 1\n    {if} s is {pressed}:\n        turn around\n    {if} a is {pressed}:\n        turn left\n        spins = spins - 1\n    {if} d is {pressed}:\n        turn right\n        spins = spins - 1\n    {if} p is {pressed}:\n        {if} jumptime <= 0 or spins <= 0:\n            forward stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            print \"you need to take more steps or turns before you can superjump!\"\n```\n"
            12:
                story_text: "Are you familiar with videogames? You walk into tall grass and are suddenly approached by\na very suspicious mouse. What will you do?\nIn this level we will make a small menu with different kinds of options.\nStoring text into a variable is quite handy for repeated uses.\nOption, I choose you!\n"
                example_code: "```\nchoose = 'You chose option: '\nprint 'A wild mouse appeared!'\nprint 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n is {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    sleep\n    {print} 'Congratulations you did it!'\n{if} c is {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    sleep\n    {print} 'The mouse got scared and ran away!'\n{if} b is {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r is {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "Now that you learned how to use ```and``` and ```or```, we can use it with ```pressed```too!\nimagine the turtle being able to do a superjump forward. by pressing ```p``` the turtle can make a\nsuperjump! However, the turtle can only do this jump if he turns left and right first!\n"
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\nrepeat 40 times\n    {if} w is {pressed}\n        forward stepsize\n    {if} s is {pressed}\n        turn around\n    {if} a is {pressed}\n        turn left\n        looked_left = 1\n    {if} d is {pressed}\n        turn right\n        looked_right = 1\n    {if} p is {pressed}\n        {if} looked_left is 1 and looked_right is 1\n            forward 40\n            looked_left = 0\n            looked_right = 0\n```\n"
                start_code: '# place your code here'
            5:
                start_code: '# place your code here'
                story_text: "## Press it!\nIn the introduction you were also told about the new keyword ```pressed```! Using ```pressed```\ncan make coding much more interactive, and you can have live control of what is executed!\nIn the upcoming levels you will learn how ```pressed``` makes this possible and what uses ```pressed```\nhas.\nBesides printing text, there is a whole other variety of uses for ```pressed```\nFor example, you can also link turtle commands to keys! Try it!\n"
                example_code: "```\nif x is {pressed} forward 50\n```\n"
                story_text_2: "## If Else Pressed\nYou can also assign an else statement to ```pressed```. The else statement will be executed\nwhenever you press a key other than the key you assigned.\n"
                example_code_2: "```\nif y is {pressed} {print} 'Amazing! You pressed the y key!'\nelse {print} 'Oh no! You did not press the y key.'\n```\n"
            6:
                story_text: "Did you know you can also make a calculator using ```pressed```?\nGive the calculator two numbers and press the m key to multiply.\nNow you don't have to bring your own!\nTry other keys and see what happens! Do you get a different result?\n"
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\nprint 'press a to add, s to substract, d to divide, m to multiply'\nif a is {pressed} result = first + second\nif s is {pressed} result = first - second\nif d is {pressed} result = first / second\nif m is {pressed} result = first * second\nprint 'The answer is ' result\n```\n"
                start_code: '# place your code here'
            7:
                example_code: "```\nrepeat 3 times if x is {pressed} forward 15\n```\n"
                start_code: '# place your code here'
                story_text: "You might have tried it in level 5 and 6, pressing the key linked to ```pressed``` multiple\ntimes. If you did, you noticed that this did nothing. but now that you have learned about repeat, we\ncan press keys multiple times! Make the turtle walk forward!\n"
        name: Press it!
        description: Try linking a keyboard key to a command!
        default_save_name: Pressit
