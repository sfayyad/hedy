program: _empty_program | _non_empty_program
_empty_program: (_EOL | _SPACE)*
_non_empty_program: _EOL* (command | error_invalid) _SPACE* (_EOL+ command _SPACE*)* _EOL* //lines may end on spaces and might be separated by many newlines

//placing assign after print means print is will print 'is' and print is Felienne will print 'is Felienne'
command:+= ifpressed_else | ifpressed | ifelse | ifs -= error_invalid | error_ask_no_quotes > assign
_if_less_command: print | ask | turtle | assign_list | add | remove | sleep | error_print_no_quotes | assign

// error_invalid is moved from to command to program, so that command rules have priority over error_invalid
error_invalid: textwithoutspaces _SPACE* (quoted_text | textwithspaces)?


assign_list: var _IS textwithspaces (_COMMA textwithspaces)+
assign: var _IS (list_access | textwithspaces)

error_print_no_quotes: _PRINT (textwithoutspaces | list_access | var_access) (_SPACE (textwithoutspaces | list_access | var_access))*  -> error_print_nq

// new commands for level 5
ifpressed_else: _IF LETTER_OR_NUMERAL _IS _PRESSED _EOL* _if_less_command (_SPACE+ _EOL* | _SPACE* _EOL+) _ELSE (_SPACE+ _EOL* | _SPACE* _EOL+) _if_less_command
ifpressed: _IF LETTER_OR_NUMERAL _IS _PRESSED _EOL* _if_less_command

_if_clause: _IF (condition (_SPACE+ _EOL* | _SPACE* _EOL+) | condition_spaces _SPACE* _EOL+ | error_condition) _if_less_command
error_condition: condition_spaces _SPACE
ifelse: _if_clause (_SPACE+ _EOL* | _SPACE* _EOL+) _ELSE (_SPACE+ _EOL* | _SPACE* _EOL+) _if_less_command
ifs: _if_clause // 'if' is a reserved word in Python, hence the name of the rule is 'ifs'

condition_spaces: textwithoutspaces _IS textwithoutspaces (_SPACE textwithoutspaces)+
condition: equality_check | in_list_check
equality_check: (textwithoutspaces | INT) _IS (quoted_text | textwithoutspaces | INT) //TODO FH nov 2021: not super pretty that this is textwithoutquotes for both a var and also a textual constant, level 12 handles this nicer now, could be done here too


in_list_check: textwithoutspaces _IN var_access

nospace: /[^\n, ]/


textwithspaces: /(?:[^#\n،,， ]| (?!else|başka|faese|अन्यथा|否则|muuten|muidu|senão|ellers|alie|иначе|altrimenti|інакше|annars|anders|ndryshe|inaczej|sinon|sonst|sino|وکھرا|אחרת|وإلا))+/ -> text //anything can be parsed except for a newline and a comma for list separators
//a space is allowed, but it may not be followed by an else. The part " (?!else))" means space not followed by (negative look ahead) else
//That is because allowing else in strings leads to issue #303
textwithoutspaces: /(?:[^#\n،,， *+\-\/eiіиamfnsbअ否אو]|א(?!חרת )|و(?!إلا |کھرا )|否(?!则 )|अ(?!न्यथा )|и(?!наче )|m(?!uidu |uuten )|b(?!aşka )|n(?!dryshe )|f(?!aese )|e(?!lse |llers )|s(?!inon |enão |ino |onst )|і(?!накше )|i(?!naczej )|a(?!nders |lie |ltrimenti |nnars ))+/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
//the part e(?!lse)|i(?!f)) means e not followed by lse, and i not followed by f
// this is because allowing else and if in invalid leads to ambiguity in the grammar


//
