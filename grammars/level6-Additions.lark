_print_argument: (_SPACE | quoted_text | list_access | expression | print_expression)*
?print_expression: var_access_print | error_unsupported_number | INT

// redefining it entirely since it has many order-depending rules
command: print | turtle | add | remove | sleep | error_print_no_quotes | ifpressed_else | ifpressed | ifelse | ifs | ask | assign | assign_list | error_invalid_space | error_text_no_print | empty_line
_if_less_command: print | turtle | add | remove | sleep | error_print_no_quotes | ask | assign | assign_list

//splitting  these commands into two rules, one for equals and one for is so they can be properly handled in the translator
ask: var (_IS | _EQUALS) _ASK (_print_argument)?

equality_check: (textwithoutspaces | INT) (_IS | _EQUALS) (textwithoutspaces | quoted_text | INT)

condition:+= equality_check -= equality_check

assign_list: var (_IS | _EQUALS) textwithspaces (_COMMA textwithspaces)+
assign: var (_IS | _EQUALS) (list_access | expression | textwithoutspaces | textwithspaces)

sleep: _SLEEP (INT | list_access | var_access | expression)?

turtle: _FORWARD ((NUMBER | list_access | textwithoutspaces | expression))? -> forward | _TURN ((NUMBER | list_access | textwithoutspaces | expression))? -> turn | _COLOR ((black | blue | brown | gray | green | orange | pink | purple | red | white | yellow | list_access | textwithoutspaces))? -> color

?expression: simple_expression | expression _MULTIPLY atom -> multiplication | expression _DIVIDE atom -> division | expression _PLUS atom -> addition | expression _MINUS atom -> subtraction
?simple_expression: atom _MULTIPLY atom -> multiplication | atom _DIVIDE atom -> division | atom _PLUS atom -> addition | atom _MINUS atom -> subtraction

?atom: INT | _MINUS INT |var_access | error_unsupported_number | textwithoutspaces

error_unsupported_number: /([-+]?(\d+[\.ØŒ,ï¼Œ]\d+))/ -> error_unsupported_number

